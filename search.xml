<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>RBT(红黑树)的相关操作及代码</title>
    <url>/2020/02/18/RBT-%E7%BA%A2%E9%BB%91%E6%A0%91-%E7%9A%84%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C%E5%8F%8A%E4%BB%A3%E7%A0%81/</url>
    <content><![CDATA[<h1 id="红黑树（RBT）"><a href="#红黑树（RBT）" class="headerlink" title="红黑树（RBT）"></a>红黑树（RBT）</h1><p>红黑树也是一种平衡二叉排序树。</p>
<h2 id="五个条件-性质"><a href="#五个条件-性质" class="headerlink" title="五个条件(性质)"></a>五个条件(性质)</h2><ol>
<li><p>每个节点非黑即红；</p>
</li>
<li><p>根节点一定为黑；</p>
</li>
<li><p>叶节点(NIL，用来替代原有空指针的节点)一定为黑；</p>
</li>
<li><font color="red">红色节点的左右两个子节点一定为黑；</font>
</li>
<li><font color="red">从根节点出发到所有叶节点的路径上，每条路径的黑色节点数量相同。</font>

<blockquote>
<p>可由性质4和5得到：</p>
<p>红黑树中从根节点出发到所有叶子节点最长路径和最短路径的长度关系是最长路径是最短路径的二倍</p>
<p>简单证明：</p>
<p>由红黑树性质可得知，最短的路径一定全由黑色节点组成，而最长的路径则是穿插着红色节点，在这两条路径中黑色节点数量相等，所以最长路径的长度是最短路径的二倍</p>
</blockquote>
</li>
</ol>
<p>AVL树是通过树高控制平衡，而红黑树的本质也是通过控制树高来控制平衡，不过红黑树的树高范围更松散一些(长边是短边的二倍)。</p>
<h2 id="调整策略"><a href="#调整策略" class="headerlink" title="调整策略"></a>调整策略</h2><ol>
<li>插入调整站在<font color="red">祖父节点</font>看，若站在<font color="red">祖父节点</font>向下看两层失衡了，则进行调整<font color="ligblue">(解决两个红色节点相连的情况，因为两个红色节点相连会打破第4个条件)</font></li>
<li>删除调整站在<font color="red">父节点</font>看，若站在<font color="red">父节点</font>向下看一层失衡了，则进行调整<font color="ligblue">(类比二叉排序树的删除)</font></li>
<li>插入和删除的情况处理一共5种</li>
</ol>
<h3 id="插入调整"><a href="#插入调整" class="headerlink" title="插入调整"></a>插入调整</h3><p><strong>往一个红黑树中插入黑色节点对整体的影响大于插入红色节点对整体的影响</strong>，因为无论往哪一条路径插入黑色节点，都会导致这条路径上的黑色节点数目增加1，就可能打破条件5，即从根节点出发到所有的叶节点，黑色节点的数目相等。</p>
<p>所以在红黑树的插入操作中，为了防止打破条件5，我们选择新插入的节点颜色为红色，而不是黑色。</p>
<blockquote>
<p>在新插入的节点为红色的情况下，只有一种情况可能会导致失衡：即插入节点的颜色为红色，其父节点也是红色(打破了条件4)。</p>
</blockquote>
<p>当需要进行插入调整的时候，<font color="red">祖父节点一定是黑色</font>，由第4条性质可知，产生冲突的x节点的父节点一定是红色，所以x节点的祖父节点一定不是红色，若祖父节点是红色，那么x的父节点一定是黑色，所以不会导致冲突，与之前产生冲突的x节点产生了矛盾。</p>
<h4 id="红色下沉"><a href="#红色下沉" class="headerlink" title="红色下沉"></a>红色下沉</h4><p><img src="RBT-红色下沉.png" alt="RBT-红色下沉"></p>
<h4 id="红色上浮"><a href="#红色上浮" class="headerlink" title="红色上浮"></a>红色上浮</h4><p><img src="RBT-红色上浮.png" alt="RBT-红色上浮"></p>
<p>在红黑树的第5个条件中，这两个条件是等价的。</p>
<h4 id="情况一-uncle为红色"><a href="#情况一-uncle为红色" class="headerlink" title="情况一(uncle为红色)"></a>情况一(uncle为红色)</h4><p>如下图所示：</p>
<p><img src="RBT-插入调整情况一.png" alt="RBT-插入调整情况一"></p>
<p>注：框住的节点为颜色确定的节点。</p>
<p>此时如何解决冲突？</p>
<blockquote>
<p>解决方案：利用红色上浮解决此问题</p>
<p>将作为父节点的20号红色节点和作为uncle节点的1号红色节点改为黑色，将作为祖父节点的15号黑色节点改为红色即可解决冲突。</p>
</blockquote>
<h5 id="延伸情况-4种"><a href="#延伸情况-4种" class="headerlink" title="延伸情况(4种)"></a>延伸情况(4种)</h5><p>以此延伸出4种情况，如下图所示，均可统一用红色上浮解决此问题。</p>
<p><img src="RBT-插入调整情况一延伸情况.png" alt="RBT-插入调整情况一延伸情况"></p>
<p>即只要产生冲突的x节点的uncle节点为红色，不管x的位置如何，均可采用红色上浮来解决冲突。</p>
<h4 id="情况二-uncle为黑色"><a href="#情况二-uncle为黑色" class="headerlink" title="情况二(uncle为黑色)"></a>情况二(uncle为黑色)</h4><p><img src="RBT-插入调整情况二.png" alt="RBT-插入调整情况二"></p>
<p>此时如何解决冲突？</p>
<blockquote>
<p>解决方案：将其绕祖父节点进行大右旋</p>
</blockquote>
<p>将情况二进行大右旋后：</p>
<p><img src="RBT-插入调整情况二右旋后.png" alt="插入调整情况二右旋后"></p>
<blockquote>
<p>解决方案：利用<font color="red">红色下沉</font>将20号黑色节点改为红色节点，将15号红色节点改为黑色节点，或者利用<font color="red">红色上浮</font>将10号节点改为黑色，这两种策略都可以使得两边的黑色节点数量相等。</p>
</blockquote>
<h5 id="延伸情况-4种-1"><a href="#延伸情况-4种-1" class="headerlink" title="延伸情况(4种)"></a>延伸情况(4种)</h5><p><img src="RBT-插入调整情况二延伸情况.png" alt="插入调整情况二延伸情况"></p>
<blockquote>
<p>解决方案：</p>
<p>对于LL型将其绕着x节点的祖父节点进行<font color="red">大右旋</font>，再对其利用红色下沉或者红色上浮即可解决冲突(即情况二所示)</p>
<p>对于RR型将其绕着x节点的祖父节点进行<font color="red">大左旋</font>，在对其利用红色下沉或者红色上浮即可解决冲突(与LL型类似)</p>
</blockquote>
<p><img src="RBT-插入调整情况二延伸情况2.png" alt="插入调整情况二延伸情况2"></p>
<blockquote>
<p>解决方案：</p>
<p>对于LR型，类比AVL树的LR型调整，将x的祖父节点的左子树进行小左旋，转换成LL型(即情况二所示)，再对其进行大右旋后，利用红色下沉或者红色上浮即可解决冲突</p>
<p>对于RL型，类比AVL树的RL型调整，将x的祖父节点的右子树进行小右旋，转换成RR型，再对其进行大左旋后，利用红色下沉或者红色上浮即可解决冲突</p>
</blockquote>
<h3 id="删除调整"><a href="#删除调整" class="headerlink" title="删除调整"></a>删除调整</h3><p>类比于二叉排序树的删除：</p>
<p>若删除度为0、1、2的红色节点，对红黑树无影响，不会影响其平衡，因为第5个条件主要说的是黑色节点数量，而不是红色节点数量。</p>
<p>但若是删除黑色节点，无论度为几，则对红黑树有影响，主要影响了第5个条件。</p>
<h4 id="双重黑"><a href="#双重黑" class="headerlink" title="双重黑"></a>双重黑</h4><p>当产生双重黑时，就要进行调整操作，删除调整主要去掉双重黑。</p>
<h4 id="情况一-brother为黑色"><a href="#情况一-brother为黑色" class="headerlink" title="情况一(brother为黑色)"></a>情况一(brother为黑色)</h4><p><img src="RBT-删除调整情况一.png" alt="RBT-删除调整情况一"></p>
<blockquote>
<p>情况描述：</p>
<p>x是双重黑，x的brother节点也是黑色，其两个孩子也同时为黑色</p>
</blockquote>
<blockquote>
<p>解决方案：</p>
<p>由于要处理掉双重黑，所以要使得x节点从双重黑变为单黑，就要使得43号节点的左子树黑色节点数目减少一，为了处理这种情况，<font color="red">使x变为单黑，43号节点加一重黑色，43号节点的左子树减少一重黑色，即9号兄弟节点由单黑变为红色节点</font>，即可解决这个问题。由于43号节点颜色不确定，但是没关系，若43号节点本身为单黑，加一重黑色变为双黑，在之后回溯的过程中仍然会调整；若43号节点本身为红色，加一重黑色则变为单黑节点，仍然无冲突。</p>
<p>好处：</p>
<p>这样做的好处在于可以使得双重黑逐渐向上浮，浮到根节点时即可直接使双重黑消失。</p>
</blockquote>
<h4 id="情况二-brother为黑色，RL型"><a href="#情况二-brother为黑色，RL型" class="headerlink" title="情况二(brother为黑色，RL型)"></a>情况二(brother为黑色，RL型)</h4><p><img src="RBT-删除调整情况二.png" alt="删除调整情况二"></p>
<blockquote>
<p>情况描述：</p>
<p>此为RL型，x双重黑节点的兄弟节点在父节点右部，兄弟节点左部有一个红色节点</p>
</blockquote>
<blockquote>
<p>解决方案：</p>
<p>先将其绕着兄弟节点进行右旋，得到如下所示的图</p>
</blockquote>
<p><img src="RBT-删除调整情况二右旋后.png" alt="删除调整情况二右旋后"></p>
<blockquote>
<p>解决方案：</p>
<p>将51节点改为黑色，将72节点变为红色，放大到全图看变回了RR型，即可转为情况三的RR型进行处理。</p>
</blockquote>
<h5 id="延伸情况-LR型"><a href="#延伸情况-LR型" class="headerlink" title="延伸情况(LR型)"></a>延伸情况(LR型)</h5><blockquote>
<p>解决方案类似于RL型，出现LR型情况时，将其绕着兄弟节点进行左旋，转换成情况三的LL型进行处理。</p>
</blockquote>
<h4 id="情况三-brother为黑色，RR型"><a href="#情况三-brother为黑色，RR型" class="headerlink" title="情况三(brother为黑色，RR型)"></a>情况三(brother为黑色，RR型)</h4><p><img src="RBT-删除调整情况三.png" alt="删除调整情况三"></p>
<blockquote>
<p>情况描述： </p>
<p>此为RR型，x双重黑节点的兄弟节点在x父节点右部，而兄弟节点的右部有一个红色节点</p>
</blockquote>
<blockquote>
<p>解决方案：</p>
<p>将其围绕着x节点的父节点进行右旋，得到如下所示的图</p>
</blockquote>
<p><img src="RBT-删除调整情况三左旋后.png" alt="删除调整情况三左旋后"></p>
<blockquote>
<p>解决方案：</p>
<p>由于48号节点颜色不确定，为了防止两个红色的冲突，38号节点一定要改成黑色，这个时候将72改成黑色，51改成红色即可防止冲突。</p>
<p>但若38本身是黑色，则将51也改成黑色即可。</p>
</blockquote>
<blockquote>
<p>总结如下：</p>
<p>出现RR型情况时，将其绕着父节点进行左旋，将左旋后的根节点的两个子节点改为黑色，将左旋后的根节点颜色改为原有根节点的颜色即可。</p>
</blockquote>
<h5 id="延伸情况-LL型"><a href="#延伸情况-LL型" class="headerlink" title="延伸情况(LL型)"></a>延伸情况(LL型)</h5><blockquote>
<p>解决方案类似于RR型，出现LL型情况时，将其绕着父节点进行右旋，将右旋后的根节点的两个子节点改为黑色，将右旋后的根节点颜色改为原有根节点的颜色即可。</p>
</blockquote>
<h4 id="延伸情况-brother为红色，2种"><a href="#延伸情况-brother为红色，2种" class="headerlink" title="延伸情况(brother为红色，2种)"></a>延伸情况(brother为红色，2种)</h4><font color="red">注：若brother节点在x节点左部则进行右旋，若在右部则进行左旋</font>

<p><img src="RBT-删除调整延伸情况.png" alt="删除调整延伸情况"></p>
<blockquote>
<p>情况描述：</p>
<p>此时作为双重黑的x节点的兄弟节点为红色</p>
</blockquote>
<blockquote>
<p>解决方案：</p>
<p>将其绕着父节点进行右旋，得到如下所示的图</p>
</blockquote>
<p><img src="RBT-删除调整延伸情况右旋后.png" alt="删除调整延伸情况右旋后"></p>
<blockquote>
<p>解决方案：</p>
<p>将颜色更改为如下图所示，得到新的brother节点，此时brother节点为黑色 </p>
</blockquote>
<p><img src="RBT-删除调整延伸情况颜色更改.png" alt="删除调整延伸情况颜色更改"></p>
<blockquote>
<p>解决方案：</p>
<p>最终转换成删除调整的情况一、二、三进行解决。</p>
</blockquote>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RED 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BLACK 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DOUBLE_BLACK 2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> key, color; <span class="comment">// 0 red, 1 black, 2 double black</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">lchild</span>, *<span class="title">rchild</span>;</span></span><br><span class="line">&#125; Node;</span><br><span class="line"></span><br><span class="line">Node _NIL, * <span class="keyword">const</span> NIL = &amp;_NIL;</span><br><span class="line"></span><br><span class="line">__attribute__((constructor))</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init_NIL</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    NIL-&gt;key = <span class="number">0</span>;</span><br><span class="line">    NIL-&gt;lchild = NIL-&gt;rchild = NIL;</span><br><span class="line">    NIL-&gt;color = BLACK;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Node *<span class="title">getNewNode</span><span class="params">(<span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">    Node *p = (Node *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    p-&gt;key = key;</span><br><span class="line">    p-&gt;lchild = p-&gt;rchild = NIL;</span><br><span class="line">    p-&gt;color = RED;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">hasRedChild</span><span class="params">(Node *root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> root-&gt;lchild-&gt;color == RED || root-&gt;rchild-&gt;color == RED;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Node *<span class="title">left_rotate</span><span class="params">(Node *root)</span> </span>&#123;</span><br><span class="line">    Node *temp = root-&gt;rchild;</span><br><span class="line">    root-&gt;rchild = temp-&gt;lchild;</span><br><span class="line">    temp-&gt;lchild = root;</span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Node *<span class="title">right_rotate</span><span class="params">(Node *root)</span> </span>&#123;</span><br><span class="line">    Node *temp = root-&gt;lchild;</span><br><span class="line">    root-&gt;lchild = temp-&gt;rchild;</span><br><span class="line">    temp-&gt;rchild = root;</span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">Node *<span class="title">insert_maintain</span><span class="params">(Node *root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!hasRedChild(root)) <span class="keyword">return</span> root;</span><br><span class="line">    <span class="keyword">if</span> (root-&gt;lchild-&gt;color == RED &amp;&amp; root-&gt;rchild-&gt;color == RED) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!hasRedChild(root-&gt;lchild) &amp;&amp; !hasRedChild(root-&gt;rchild)) <span class="keyword">return</span> root;</span><br><span class="line">        <span class="keyword">goto</span> insert_end;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (root-&gt;lchild-&gt;color == RED) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!hasRedChild(root-&gt;lchild)) <span class="keyword">return</span> root;</span><br><span class="line">        <span class="keyword">if</span> (root-&gt;lchild-&gt;rchild-&gt;color == RED) &#123;</span><br><span class="line">            root-&gt;lchild = left_rotate(root-&gt;lchild);</span><br><span class="line">        &#125;</span><br><span class="line">        root = right_rotate(root);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!hasRedChild(root-&gt;rchild)) <span class="keyword">return</span> root;</span><br><span class="line">        <span class="keyword">if</span> (root-&gt;rchild-&gt;lchild-&gt;color == RED) &#123;</span><br><span class="line">            root-&gt;rchild = right_rotate(root-&gt;rchild);</span><br><span class="line">        &#125;</span><br><span class="line">        root = left_rotate(root);</span><br><span class="line">    &#125;</span><br><span class="line">insert_end:</span><br><span class="line">    root-&gt;color = RED;</span><br><span class="line">    root-&gt;lchild-&gt;color = root-&gt;rchild-&gt;color = BLACK;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Node *__insert(Node *root, <span class="keyword">int</span> key) &#123;</span><br><span class="line">    <span class="keyword">if</span> (root == NIL) <span class="keyword">return</span> getNewNode(key);</span><br><span class="line">    <span class="keyword">if</span> (root-&gt;key == key) <span class="keyword">return</span> root;</span><br><span class="line">    <span class="keyword">if</span> (root-&gt;key &gt; key) root-&gt;lchild = __insert(root-&gt;lchild, key);</span><br><span class="line">    <span class="keyword">else</span> root-&gt;rchild = __insert(root-&gt;rchild, key);</span><br><span class="line">    <span class="keyword">return</span> insert_maintain(root);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Node *<span class="title">insert</span><span class="params">(Node *root, <span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">    root = __insert(root, key);</span><br><span class="line">    root-&gt;color = BLACK;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Node *<span class="title">predeccessor</span><span class="params">(Node *root)</span> </span>&#123;</span><br><span class="line">    Node *temp = root-&gt;lchild;</span><br><span class="line">    <span class="keyword">while</span> (temp-&gt;rchild != NIL) temp = temp-&gt;rchild;</span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Node *<span class="title">erase_maintain</span><span class="params">(Node *root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root-&gt;lchild-&gt;color != DOUBLE_BLACK &amp;&amp; root-&gt;rchild-&gt;color != DOUBLE_BLACK) <span class="keyword">return</span> root;</span><br><span class="line">    <span class="keyword">if</span> (root-&gt;rchild-&gt;color == DOUBLE_BLACK) &#123;</span><br><span class="line">        <span class="keyword">if</span> (root-&gt;lchild-&gt;color == RED) &#123;</span><br><span class="line">            root-&gt;color = RED;</span><br><span class="line">            root-&gt;lchild-&gt;color = BLACK;</span><br><span class="line">            root = right_rotate(root);</span><br><span class="line">            root-&gt;rchild = erase_maintain(root-&gt;rchild);</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!hasRedChild(root-&gt;lchild)) &#123;</span><br><span class="line">            root-&gt;color += <span class="number">1</span>;</span><br><span class="line">            root-&gt;lchild-&gt;color -= <span class="number">1</span>;</span><br><span class="line">            root-&gt;rchild-&gt;color -= <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (root-&gt;lchild-&gt;lchild-&gt;color != RED) &#123;</span><br><span class="line">            root-&gt;lchild-&gt;rchild-&gt;color = BLACK;</span><br><span class="line">            root-&gt;lchild-&gt;color = RED;</span><br><span class="line">            root-&gt;lchild = left_rotate(root-&gt;lchild);</span><br><span class="line">        &#125;</span><br><span class="line">        root-&gt;lchild-&gt;color = root-&gt;color;</span><br><span class="line">        root-&gt;rchild-&gt;color -= <span class="number">1</span>;</span><br><span class="line">        root = right_rotate(root);</span><br><span class="line">        root-&gt;lchild-&gt;color = root-&gt;rchild-&gt;color = BLACK;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root-&gt;rchild-&gt;color == RED) &#123;</span><br><span class="line">            root-&gt;color = RED;</span><br><span class="line">            root-&gt;rchild-&gt;color = BLACK;</span><br><span class="line">            root = left_rotate(root);</span><br><span class="line">            root-&gt;lchild = erase_maintain(root-&gt;lchild);</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!hasRedChild(root-&gt;rchild)) &#123;</span><br><span class="line">            root-&gt;color += <span class="number">1</span>;</span><br><span class="line">            root-&gt;lchild-&gt;color -= <span class="number">1</span>;</span><br><span class="line">            root-&gt;rchild-&gt;color -= <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (root-&gt;rchild-&gt;rchild-&gt;color != RED) &#123;</span><br><span class="line">            root-&gt;rchild-&gt;lchild-&gt;color = BLACK;</span><br><span class="line">            root-&gt;rchild-&gt;color = RED;</span><br><span class="line">            root-&gt;rchild = right_rotate(root-&gt;rchild);</span><br><span class="line">        &#125;</span><br><span class="line">        root-&gt;rchild-&gt;color = root-&gt;color;</span><br><span class="line">        root-&gt;lchild-&gt;color -= <span class="number">1</span>;</span><br><span class="line">        root = left_rotate(root);</span><br><span class="line">        root-&gt;lchild-&gt;color = root-&gt;rchild-&gt;color = BLACK;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Node *__erase(Node *root, <span class="keyword">int</span> key) &#123;</span><br><span class="line">    <span class="keyword">if</span> (root == NIL) <span class="keyword">return</span> root;</span><br><span class="line">    <span class="keyword">if</span> (root-&gt;key &gt; key) &#123;</span><br><span class="line">        root-&gt;lchild = __erase(root-&gt;lchild, key);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (root-&gt;key &lt; key) &#123;</span><br><span class="line">        root-&gt;rchild = __erase(root-&gt;rchild, key);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//处理度为0或1的黑色节点</span></span><br><span class="line">        <span class="keyword">if</span> (root-&gt;lchild == NIL || root-&gt;rchild == NIL) &#123;</span><br><span class="line">            Node *temp = root-&gt;lchild == NIL ? root-&gt;rchild : root-&gt;lchild;</span><br><span class="line">            temp-&gt;color += root-&gt;color;</span><br><span class="line">            <span class="built_in">free</span>(root);</span><br><span class="line">            <span class="keyword">return</span> temp;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//处理度为2</span></span><br><span class="line">            Node *temp = predeccessor(root);</span><br><span class="line">            root-&gt;key = temp-&gt;key;</span><br><span class="line">            root-&gt;lchild = __erase(root-&gt;lchild, temp-&gt;key);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> erase_maintain(root);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Node *<span class="title">erase</span><span class="params">(Node *root, <span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">    root = __erase(root, key);</span><br><span class="line">    root-&gt;color = BLACK;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">(Node *root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">NULL</span>) <span class="keyword">return</span> ;</span><br><span class="line">    clear(root-&gt;lchild);</span><br><span class="line">    clear(root-&gt;rchild);</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">(Node *root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == NIL) <span class="keyword">return</span> ; </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d [%d, %d] %s\n"</span>, </span><br><span class="line">        root-&gt;key,</span><br><span class="line">        root-&gt;lchild-&gt;key,</span><br><span class="line">        root-&gt;rchild-&gt;key,</span><br><span class="line">        root-&gt;color ? <span class="string">"BLACK"</span> : <span class="string">"RED"</span></span><br><span class="line">    );</span><br><span class="line">    output(root-&gt;lchild);</span><br><span class="line">    output(root-&gt;rchild);</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> op, val;</span><br><span class="line">    Node *root = NIL;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;op, &amp;val) != EOF) &#123;</span><br><span class="line">        <span class="keyword">switch</span> (op) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>: root = insert(root, val); <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>: root = erase(root, val); <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        output(root);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>二叉排序树</tag>
      </tags>
  </entry>
  <entry>
    <title>AVL树的相关操作及代码</title>
    <url>/2020/02/18/AVL%E6%A0%91%E7%9A%84%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C%E5%8F%8A%E4%BB%A3%E7%A0%81/</url>
    <content><![CDATA[<h1 id="AVL树"><a href="#AVL树" class="headerlink" title="AVL树"></a>AVL树</h1><p>为了解决二叉排序树在极端情况下(如数列有序)退化成线性表，导致树高为元素个数，从而使得各操作(如插入、删除、查询)的效率由O(log(n))降低为O(n)的问题，由此有了平衡二叉排序树。</p>
<p>所有的平衡二叉排序树仅在平衡条件上有所区别，剩下的基本相同，本质上都是二叉排序树。</p>
<h2 id="性质-平衡条件"><a href="#性质-平衡条件" class="headerlink" title="性质(平衡条件)"></a>性质(平衡条件)</h2><blockquote>
<p>|H(left) - H(right)| &lt;= 1</p>
</blockquote>
<p>即任意节点处的左子树高度与右子树高度差小于等于1。</p>
<h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><p>由于对每个节点的左右子树的树高做出了限制，所以整棵树并不会退化成一个线性表，效率也不会降低。</p>
<h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><blockquote>
<p>1、高度为H的BS树(二叉排序树)，所包含的节点数量在什么范围之内？</p>
<p>2、高度为H的AVL树，所包含的节点数量在什么范围之内？</p>
</blockquote>
<p>对于思考1：</p>
<p>考虑节点的上界：若要保证树高为H，则最多可以有(2<sup>H</sup>-1)个节点(即满二叉树)。</p>
<p>考虑节点的下界：若要保证树高为H，则最少可以有H个节点，此时为最差情况，BS树已退化成链表。</p>
<p>所以思考1的节点数量范围为：<strong>H &lt;= x &lt;= (2<sup>H</sup>-1)</strong></p>
<p>对于思考2：</p>
<p>考虑节点的上界：与思考1的上界相同，均在满二叉树的情况时达到最多节点数(2<sup>H</sup>-1)个节点。</p>
<p>考虑节点的下界：记 low(H) 代表高度为H的AVL树的最少节点数量，有low(1) = 1，low(2) = 2，low(3) = low(2) + low(1) + 1，则可得出递推公式：<code>low(H) = low(H - 2) + low(H - 1) + 1</code></p>
<p>所以思考2的节点数量范围为：<strong>low(H - 2) + low(H - 1) + 1 &lt;= x &lt;= (2<sup>H</sup>-1)，low(1) = 1, low(2) = 2, H &gt;= 3</strong>。</p>
<blockquote>
<p>对于AVL树来说，近似将其节点范围看作<strong>1.5<sup>H</sup> &lt;= x &lt;= 2<sup>H</sup> -1</strong>，其节点数量与树高的关系总是log(n)的关系。</p>
<p>若节点数量有n个，树高最高为log<sub>1.5</sub>n，最低为log<sub>2</sub>n，也就证明当我们将n个节点插入AVL树中，其<strong>效率总为logn级别的</strong>。</p>
<p>AVL提高了传统二叉排序树的下界。</p>
</blockquote>
<h2 id="基本调整操作"><a href="#基本调整操作" class="headerlink" title="基本调整操作"></a>基本调整操作</h2><h3 id="左旋"><a href="#左旋" class="headerlink" title="左旋"></a>左旋</h3><p><img src="AVL树-左旋.png" alt="AVL树-左旋"></p>
<p>若以根节点K1进行左旋，则整体掐着K1向左旋转(逆时针旋转)，K3成为K1的父节点，K1成为K3的左子树，K3原有的左子树变为K1的右子树，调整完之后的树仍然是二叉排序树。(以K1节点进行左旋，则K1节点的右子树的根节点变为左旋之后的新树的根节点K3，K3原有的左子树节点变为原来的根节点K1的右子树节点，而K1节点本身变为新根节点的左子树的根节点)</p>
<blockquote>
<p>为何调整完之后的树仍然是二叉排序树？</p>
<p>简单证明：在上图的左边图中，本身是二叉排序树，A节点在K3节点左子树上，说明A节点的值小于等于K3结点的值；A节点同时在K1节点右子树上，说明A节点的值大于等于K1结点的值。当K3作为根节点，K1挂到K3的左子树上时，A节点则挂到K1节点的右子树上，K1节点的左子树不变。这样调整完之后的树仍然是二叉排序树。</p>
</blockquote>
<h3 id="右旋"><a href="#右旋" class="headerlink" title="右旋"></a>右旋</h3><p><img src="AVL树-右旋.png" alt="AVL树-右旋"></p>
<p>类比于左旋。</p>
<h2 id="失衡类型"><a href="#失衡类型" class="headerlink" title="失衡类型"></a>失衡类型</h2><p><img src="AVL树-失衡类型.png" alt="AVL树-失衡类型"></p>
<p>当往一个二叉排序树中插入一个新节点时，出现了子树间高度差大于1的情况，则说明这个二叉排序树失衡。</p>
<p>由于是一个节点一个节点的插入，当第一次出现失衡时，左右子树间高度差应该为2(画图可知)。</p>
<p>对于上图，需要注意的是K1并不一定是整棵树的根节点，它是从下往上看第一个失衡的节点。</p>
<p>对于LL型失衡，如上图，若站在K1节点处，K1节点的左子树高度大于K1节点的右子树高度，并且高度差为2，K1节点的左子树的左子树仍然要高一些，则称这种失衡为LL型失衡(即某个节点的左子树高于右子树，其左子树的左子树也高于右子树)。</p>
<p>对于LR型失衡，某节点的左子树高于右子树，其左子树的右子树高于左子树。</p>
<p>RR型失衡可类比于LL型失衡，RL型失衡可类比于LR型失衡。</p>
<h3 id="如何调整？"><a href="#如何调整？" class="headerlink" title="如何调整？"></a>如何调整？</h3><h4 id="LL型失衡与RR型失衡的调整"><a href="#LL型失衡与RR型失衡的调整" class="headerlink" title="LL型失衡与RR型失衡的调整"></a>LL型失衡与RR型失衡的调整</h4><p><img src="AVL树-LL型失衡.png" alt="AVL树-LL型失衡"></p>
<p>LL型失衡即左子树的左子树高度更高一些。</p>
<p>在LL型失衡中有如下关系存在：</p>
<blockquote>
<p>以H(x)表示x节点子树的高度。</p>
<p>H(2) = H(3) + 2 = H(a) + 1 =&gt; H(3) = H(a) - 1 = max(H(c), H(d)) + 1 =&gt; H(a) = max(H(c), H(d)) + 2</p>
<p>H(b) = H(a) - 1 (若高度相同，不用插入新节点其本身就是失衡)</p>
</blockquote>
<p>当这种失衡类型发生时，说明整棵树左边过重，则需要在第一个失衡处进行整个的大右旋，将其朝左边倾斜倾斜。</p>
<p>在大右旋调整后的树中有如下关系存在：</p>
<blockquote>
<p>H(1) = max(H(c), H(d)) + 2 = H(b) + 1 (又H(a) = max(H(c), H(d)) + 2 = H(b) + 1，所以右旋后的树的H(1) = H(a)，站在K2节点处，左右子树高度相等，则平衡  )</p>
<p>H(b) = H(a) - 1, H(3) = max(H(c), H(d)) + 1 = H(a) - 1 (所以站在K1节点处，H(b) = H(3)，左右子树高度相等，则平衡，而原本A、B、C、D子树内部平衡，所以整棵树平衡)</p>
</blockquote>
<p>RR型失衡与LL型失衡类似。</p>
<h4 id="LR型失衡与RL型失衡的调整"><a href="#LR型失衡与RL型失衡的调整" class="headerlink" title="LR型失衡与RL型失衡的调整"></a>LR型失衡与RL型失衡的调整</h4><p><img src="AVL树-LR型失衡1.png" alt="AVL树-LR型失衡(1)"></p>
<p><img src="AVL树-LR型失衡2.png" alt="AVL树-LR型失衡(2)"></p>
<p>LL型失衡即左子树的右子树高度更高一些。</p>
<p>在LR型失衡中有如下关系存在：</p>
<blockquote>
<p>H(3) = max(H(b), H(c)) + 1</p>
<p>H(a) = h(3) - 1 = max(H(b), H(c))</p>
<p>H(2) = H3) + 1</p>
<p>H(d) = H(2) - 2 = H(3) - 1 = H(a)</p>
</blockquote>
<p>在LR型失衡中表明左子树的右子树更深一些，所以首先将左子树的根节点进行小左旋，调整成LL型，然后再进行大右旋。</p>
<p>在LR型失衡中，将其小左旋后有如下关系存在：</p>
<blockquote>
<p>H(2) = H(a) + 1</p>
<p>H(3) = H(a) + 2</p>
<p>H(d) = H(a)</p>
</blockquote>
<p>小左旋后有H(3)与H(d)之间的高度差仍为2(此时K3已经K1左子树的根节点)，这个时候LR型失衡已经转为LL型失衡，此时再进行大右旋后调整完毕。此时有如下管辖存在：</p>
<blockquote>
<p>H(d) = H(a) = max(H(b), H(c))</p>
<p>H(2) = H(a) + 1</p>
<p>H(1) = H(a) + 1</p>
</blockquote>
<p>站在K3节点处看，左右子树高度相等，则平衡。</p>
<p>RL型失衡与LR型失衡类似。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//注意，若root的左右孩子指向空地址，则下面两段代码非法</span></span><br><span class="line"><span class="comment">//有两种解决方案，第一种特殊判断一下</span></span><br><span class="line"><span class="comment">//第二种采取虚拟空地址节点NIL的方法</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LH(root) (root-&gt;lchild-&gt;h)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RH(root) (root-&gt;rchild-&gt;h)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> VAL(root) (root-&gt;key)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX(a, b) (&#123; \</span></span><br><span class="line">    __typeof(a) __a = (a), __b = (b); \</span><br><span class="line">    __a &gt; __b ? __a : __b; \</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">    <span class="comment">//节点值和高度信息</span></span><br><span class="line">    <span class="keyword">int</span> key, h;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">lchild</span>, *<span class="title">rchild</span>;</span></span><br><span class="line">&#125; Node, *pNode;</span><br><span class="line"></span><br><span class="line">Node __NIL;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NIL (&amp;__NIL)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//主程序运行前先初始化虚拟空地址节点</span></span><br><span class="line">__attribute__((constructor))</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init_NIL</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    NIL-&gt;key = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//保证若某个节点的孩子为空节点，再往下访问均是合法访问</span></span><br><span class="line">    NIL-&gt;lchild = NIL-&gt;rchild = NIL;</span><br><span class="line">    NIL-&gt;h = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">pNode <span class="title">getNewNode</span><span class="params">(<span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">    pNode p = (pNode)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    p-&gt;key = key;</span><br><span class="line">    p-&gt;lchild = p-&gt;rchild = NIL;</span><br><span class="line">    <span class="comment">//默认情况下单独节点高度为1</span></span><br><span class="line">    p-&gt;h = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//更新节点高度</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update_height</span><span class="params">(pNode root)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//某节点的高度为左右子树中节点最高的高度加一</span></span><br><span class="line">    root-&gt;h = MAX(LH(root), RH(root)) + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//左旋操作</span></span><br><span class="line"><span class="function">pNode <span class="title">left_rotate</span><span class="params">(pNode root)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"left rotate\n"</span>);</span><br><span class="line">    pNode temp = root-&gt;rchild;</span><br><span class="line">    root-&gt;rchild = temp-&gt;lchild;</span><br><span class="line">    temp-&gt;lchild = root;</span><br><span class="line">    <span class="comment">//调整完之后需要更新高度</span></span><br><span class="line">    <span class="comment">//一定先更新原有根节点的高度，再更新新节点的高度</span></span><br><span class="line">    update_height(root);</span><br><span class="line">    update_height(temp);</span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//右旋操作</span></span><br><span class="line"><span class="function">pNode <span class="title">right_rotate</span><span class="params">(pNode root)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"right rotate\n"</span>);</span><br><span class="line">    pNode temp = root-&gt;lchild;</span><br><span class="line">    root-&gt;lchild = temp-&gt;rchild;</span><br><span class="line">    temp-&gt;rchild = root;</span><br><span class="line">    update_height(root);</span><br><span class="line">    update_height(temp);</span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">pNode <span class="title">maintain</span><span class="params">(pNode root)</span> </span>&#123;</span><br><span class="line">    update_height(root);</span><br><span class="line">    <span class="comment">//若高度差小于等于1，则说明是平衡的，直接返回根节点</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">abs</span>(LH(root) - RH(root)) &lt;= <span class="number">1</span>) <span class="keyword">return</span> root;</span><br><span class="line">    <span class="comment">//确定是哪种失衡</span></span><br><span class="line">    <span class="comment">//若左子树高度大于右子树高度，确定为L?型失衡，否则是R?型失衡</span></span><br><span class="line">    <span class="keyword">if</span> (LH(root) &gt; RH(root)) &#123;</span><br><span class="line">        <span class="comment">//LR型</span></span><br><span class="line">        <span class="keyword">if</span> (RH(root-&gt;lchild) &gt; LH(root-&gt;lchild)) &#123;</span><br><span class="line">            root-&gt;lchild = left_rotate(root-&gt;lchild);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//不管LR型还是LL型最后都会进行大右旋</span></span><br><span class="line">        root = right_rotate(root);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//RL型</span></span><br><span class="line">        <span class="keyword">if</span> (LH(root-&gt;rchild) &gt; RH(root-&gt;rchild)) &#123;</span><br><span class="line">            root-&gt;rchild = right_rotate(root-&gt;rchild);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//不管RL型还是RR型最后都会进行大左旋</span></span><br><span class="line">        root = left_rotate(root);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//插入操作</span></span><br><span class="line"><span class="function">pNode <span class="title">insert</span><span class="params">(pNode root, <span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == NIL) <span class="keyword">return</span> getNewNode(key);</span><br><span class="line">    <span class="keyword">if</span> (root-&gt;key == key) <span class="keyword">return</span> root;</span><br><span class="line">    <span class="keyword">if</span> (root-&gt;key &gt; key) root-&gt;lchild = insert(root-&gt;lchild, key);</span><br><span class="line">    <span class="keyword">else</span> root-&gt;rchild = insert(root-&gt;rchild, key);</span><br><span class="line">    <span class="keyword">return</span> maintain(root);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//销毁操作</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">(pNode root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == NIL) <span class="keyword">return</span> ;</span><br><span class="line">    clear(root-&gt;lchild);</span><br><span class="line">    clear(root-&gt;rchild);</span><br><span class="line">    <span class="built_in">free</span>(root);</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> __output(pNode root) &#123;</span><br><span class="line">    <span class="keyword">if</span> (root == NIL) <span class="keyword">return</span> ;</span><br><span class="line">    __output(root-&gt;lchild);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"(%d, %d, %d)\n"</span>, VAL(root), VAL(root-&gt;lchild), VAL(root-&gt;rchild));</span><br><span class="line">    __output(root-&gt;rchild);</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">(pNode root)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"AVL tree : ======\n"</span>);</span><br><span class="line">    __output(root);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"-----------------\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    srand(time(<span class="number">0</span>));</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> MAX_OP 20</span></span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    pNode root = NIL;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; MAX_OP; i ++) &#123;</span><br><span class="line">        val = rand() % <span class="number">100</span>;</span><br><span class="line">        root = insert(root, val);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"insert %d to tree\n"</span>, val);</span><br><span class="line">        output(root);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>二叉排序树</tag>
      </tags>
  </entry>
  <entry>
    <title>顺序表与链表</title>
    <url>/2020/02/02/%E9%A1%BA%E5%BA%8F%E8%A1%A8%E4%B8%8E%E9%93%BE%E8%A1%A8/</url>
    <content><![CDATA[<p>顺序表与链表的基本操作。<a id="more"></a></p>
<h1 id="顺序表与链表"><a href="#顺序表与链表" class="headerlink" title="顺序表与链表"></a>顺序表与链表</h1><h2 id="顺序表"><a href="#顺序表" class="headerlink" title="顺序表"></a>顺序表</h2><p>自动扩容，模仿C++ STL中Vector。<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * data  -&gt; 数据域</span></span><br><span class="line"><span class="comment"> * size  -&gt; 顺序表大小</span></span><br><span class="line"><span class="comment"> * length-&gt; 已有元素</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> *data;</span><br><span class="line">    <span class="keyword">int</span> size, length;</span><br><span class="line">&#125;Vector;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化大小为n的顺序表</span></span><br><span class="line"><span class="function">Vector *<span class="title">init</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    Vector *v = (Vector *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Vector));</span><br><span class="line">    v-&gt;data = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>(n * <span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">    v-&gt;size = n;</span><br><span class="line">    v-&gt;length = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> v;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 扩容操作</span></span><br><span class="line"><span class="comment"> * malloc -&gt; 开辟连续存储空间，并返回首地址</span></span><br><span class="line"><span class="comment"> * calloc -&gt; 动态分配内存，并将每块空间赋值为0</span></span><br><span class="line"><span class="comment"> * realloc-&gt; 重新分配内存，并将原来的内容拷贝进去，其返回值有两种：</span></span><br><span class="line"><span class="comment"> * 1.返回空，2.返回这片空间的首地址</span></span><br><span class="line"><span class="comment"> * 但是realloc实际很危险，当成功获得原空间n倍大小的空间后，此种情况均无问题</span></span><br><span class="line"><span class="comment"> * 若新开辟的空间正好在原空间之后，加上原空间正好是n倍大小，</span></span><br><span class="line"><span class="comment"> * 若原空间后面的空间不足，则需要重新开辟一片n倍大小的空间，</span></span><br><span class="line"><span class="comment"> * 将原空间的数据拷贝进去，并会将原空间释放掉，</span></span><br><span class="line"><span class="comment"> * 但若是分配空间失败，则会返回空地址</span></span><br><span class="line"><span class="comment"> * 在这种情况下若v-&gt;data获取到空地址，则后面一段有数据的区域则会丢失，会出现严重bug</span></span><br><span class="line"><span class="comment"> * 需要注意</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">expand</span><span class="params">(Vector *v)</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 危险的写法</span></span><br><span class="line"><span class="comment">     * v-&gt;size *= 2;</span></span><br><span class="line"><span class="comment">     * v-&gt;data = (int *)realloc(v-&gt;data, v-&gt;size * sizeof(int));</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">int</span> extr_size = v-&gt;size;</span><br><span class="line">    <span class="keyword">int</span> *p;</span><br><span class="line">    <span class="keyword">while</span> (extr_size) &#123;</span><br><span class="line">        p = (<span class="keyword">int</span> *)<span class="built_in">realloc</span>(v-&gt;data, (v-&gt;size + extr_size) * <span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">        <span class="comment">//开辟成功，返回值不为空则退出，否则空间减半进行重新开辟空间的尝试</span></span><br><span class="line">        <span class="keyword">if</span> (p) <span class="keyword">break</span>;</span><br><span class="line">        extr_size /= <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//若尝试后都开辟不了则退出</span></span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    v-&gt;size += extr_size;</span><br><span class="line">    v-&gt;data = p;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在ind处往v插入值为val的元素</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(Vector *v, <span class="keyword">int</span> ind, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (v == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (ind &lt; <span class="number">0</span> || ind &gt; v-&gt;length) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//若已达到上线，则进行扩容操作</span></span><br><span class="line">    <span class="keyword">if</span> (v-&gt;size == v-&gt;length) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!expand(v)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Expand Vector size = (%d)\n"</span>, v-&gt;size);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = v-&gt;length + <span class="number">1</span>; i &gt; ind; i --) &#123;</span><br><span class="line">        v-&gt;data[i] = v-&gt;data[i - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    v-&gt;data[ind] = val;</span><br><span class="line">    v-&gt;length ++;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除位于ind处的元素</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">erase</span><span class="params">(Vector *v, <span class="keyword">int</span> ind)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (v == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (ind &lt; <span class="number">0</span> || ind &gt;= v-&gt;length) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = ind + <span class="number">1</span>; i &lt; v-&gt;length; i ++) &#123;</span><br><span class="line">        v-&gt;data[i - <span class="number">1</span>] = v-&gt;data[i];</span><br><span class="line">    &#125;</span><br><span class="line">    v-&gt;length --;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">(Vector *v)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Vector(%d) = ["</span>, v-&gt;length);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; v-&gt;length; i ++) &#123;</span><br><span class="line">        <span class="function">i &amp;&amp; <span class="title">printf</span><span class="params">(<span class="string">","</span>)</span></span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d"</span>, v-&gt;data[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"]\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//释放顺序表</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">(Vector *v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (v == <span class="literal">NULL</span>) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="built_in">free</span>(v-&gt;data);</span><br><span class="line">    <span class="built_in">free</span>(v);</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//随机化测试</span></span><br><span class="line">    srand(time(<span class="number">0</span>));</span><br><span class="line">    Vector *v = init(<span class="number">1</span>);</span><br><span class="line">    <span class="comment">//最大操作次数</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> MAX_OP 20</span></span><br><span class="line">    <span class="keyword">int</span> op, ind, val;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; MAX_OP; i ++) &#123;</span><br><span class="line">        op = rand() % <span class="number">4</span>;</span><br><span class="line">        <span class="comment">//使其出现不合法的下标进行随机测试</span></span><br><span class="line">        ind = rand() % (v-&gt;length + <span class="number">3</span>) - <span class="number">1</span>;</span><br><span class="line">        val = rand() % <span class="number">100</span>;</span><br><span class="line">        <span class="keyword">switch</span>(op) &#123;</span><br><span class="line">            <span class="comment">//使插入的概率比删除的概率大</span></span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>: &#123;</span><br><span class="line">                <span class="keyword">int</span> check = insert(v, ind, val);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"Insert val: %d at ind: %d into Vector %s\n"</span>, val, ind, check ? <span class="string">"successfully!"</span> : <span class="string">"failed!"</span>);</span><br><span class="line">                output(v);</span><br><span class="line">            &#125; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>: &#123;</span><br><span class="line">                <span class="keyword">int</span> check = erase(v, ind);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"Erase element at %d from Vector %s\n"</span>, ind, check ? <span class="string">"successfully!"</span> : <span class="string">"failed!"</span>);</span><br><span class="line">                output(v);</span><br><span class="line">            &#125; <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><h3 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h3><h3 id="循环链表"><a href="#循环链表" class="headerlink" title="循环链表"></a>循环链表</h3>]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>链表</tag>
        <tag>顺序表</tag>
      </tags>
  </entry>
  <entry>
    <title>关于学习爬虫过程中的理解和注意事项</title>
    <url>/2019/05/11/%E5%85%B3%E4%BA%8E%E5%AD%A6%E4%B9%A0%E7%88%AC%E8%99%AB%E8%BF%87%E7%A8%8B%E4%B8%AD%E7%9A%84%E7%90%86%E8%A7%A3%E5%92%8C%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</url>
    <content><![CDATA[<h1 id="HTTPError和URLError"><a href="#HTTPError和URLError" class="headerlink" title="HTTPError和URLError"></a>HTTPError和URLError</h1><p>在运行以下代码时，在我原先的理解中最后应该打印”ASDASD”和”Title could not be found”。<a id="more"></a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen</span><br><span class="line"><span class="keyword">from</span> urllib.error <span class="keyword">import</span> HTTPError</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getTitle</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        html = urlopen(url)</span><br><span class="line">    <span class="keyword">except</span> HTTPError <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">"ASDASD"</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        bsObj = BeautifulSoup(html.read() , <span class="string">'lxml'</span>)</span><br><span class="line">        title = bsObj.body.h1</span><br><span class="line">    <span class="keyword">except</span> AttributeError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">    <span class="keyword">return</span> title</span><br><span class="line"></span><br><span class="line">title = getTitle(<span class="string">"http://www.apythonscraping.com/pages/page1.html"</span>)</span><br><span class="line"><span class="comment"># title = getTitle("http://asd.com")</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> title == <span class="keyword">None</span>:</span><br><span class="line">    print(<span class="string">"Title could not be found"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(title)</span><br></pre></td></tr></table></figure>
<p>因为为了测试捕捉HTTPError异常将正确网址”<a href="http://www.pythonscraping.com/pages/page1.html&quot;修改成&quot;http://www.apythonscraping.com/pages/page1.html&quot;，即添加了一个a。可是运行后并没有出现想象中的情况，而是直接打印了错误信息。" target="_blank" rel="noopener">http://www.pythonscraping.com/pages/page1.html&quot;修改成&quot;http://www.apythonscraping.com/pages/page1.html&quot;，即添加了一个a。可是运行后并没有出现想象中的情况，而是直接打印了错误信息。</a></p>
<p>网上搜寻文档和阅读别人的博客<a href="https://www.polarxiong.com/archives/Python-URLError%E4%B8%8EHTTPError%E7%9A%84%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86.html" target="_blank" rel="noopener">Penguin</a>后才意识到其实是自己对HTTPError和URLError理解不深刻。</p>
<p>实际上HTTPError错误会在以下情况发生：  </p>
<ol>
<li>网页在服务器上不存在(或者获取页面的时候出现错误)  </li>
<li>服务器不存在  </li>
<li>没有网络连接  </li>
</ol>
<p>当和一个服务器进行请求时，服务器会作出相应的应答，返回相应的状态码，如200，404等，HTTPError正是根据这个状态码来作出反应。我仅仅是将网站改成一个错误的网站并没有触发以上错误，也就没有相应状态码交给HTTPError进行判断，所以无法捕捉到HTTPError异常也就无法出现我想象的结果。</p>
<p>而HTTPError是URLError的子类，出现HTTPError错误一定会出现URLError错误，反之不一定。URLError错误正是处理类似<strong>网址错误</strong>、<strong>传输数据不完整</strong>等的错误，而这些错误不会导致HTTPError的触发。</p>
<p>所以修改以上代码为即可出现我想要的结果：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen</span><br><span class="line"><span class="keyword">from</span> urllib.error <span class="keyword">import</span> HTTPError</span><br><span class="line"><span class="keyword">from</span> urllib.error <span class="keyword">import</span> URLError</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getTitle</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        html = urlopen(url)</span><br><span class="line">    <span class="keyword">except</span> HTTPError <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">'asd'</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">    <span class="keyword">except</span> URLError <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">'der'</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        bsObj = BeautifulSoup(html.read() , <span class="string">'lxml'</span>)</span><br><span class="line">        title = bsObj.body.h1</span><br><span class="line">    <span class="keyword">except</span> AttributeError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">    <span class="keyword">return</span> title</span><br><span class="line"></span><br><span class="line">title = getTitle(<span class="string">"http://www.apythonscraping.com/pages/page1.html"</span>)</span><br><span class="line"><span class="comment"># title = getTitle("http://asd.com")</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> title == <span class="keyword">None</span>:</span><br><span class="line">    print(<span class="string">"Title could not be found"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(title)</span><br></pre></td></tr></table></figure></p>
]]></content>
  </entry>
  <entry>
    <title>Python学习笔记</title>
    <url>/2019/05/05/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>学习自<a href="https://www.liaoxuefeng.com" target="_blank" rel="noopener">廖雪峰的官方网站</a>，加入了一些自己的理解，或许会有错误。</p>
<h1 id="编码和字符串问题"><a href="#编码和字符串问题" class="headerlink" title="编码和字符串问题"></a>编码和字符串问题</h1><h2 id="Asicc"><a href="#Asicc" class="headerlink" title="Asicc"></a>Asicc</h2><p>将大小写英文字母、数字和一些符号进行编码得到Asicc码表。  </p>
<p>由于1Byte为8bit，即1字节等于8位，而8bit所能表示的最大无符号数为 (11111111)<sub>2</sub> = (255) <sub>10</sub>，所以Asicc的编码大多用 1Byte 即可表示。<br>而汉字多达几万个，Asicc码无法表示这么多汉字，所以(猜测)中国制定了 GB2312编码，使用两个字节对中文进行编码。<br>每个国家语言不同，制定的编码规则也不相同，所以在某些情况下会出现编码冲突，导致乱码的出现。于是为了解决这个问题，Unicode编码应运而生。</p>
<h2 id="Unicode"><a href="#Unicode" class="headerlink" title="Unicode"></a>Unicode</h2><p>Unicode码统一了所有语言的编码，通常情况下用两个字节表示一个字符，特殊情况下会增加字节的使用来表示一个字符。而原先由一个字节表示的 Asicc码到了Unicode码中更改为两个字节表示，其中高位添0。如’A’的 Asicc码为 (65)<sub>10</sub> = (01000001)<sub>2</sub>，到了 Unicode码则表示为 (65)<sub>10</sub> = (00000000 01000001)<sub>2</sub>。</p>
<p>由于Asicc码少一个字节，在大量英文文本的传输或保存中若使用 Unicode 码进行编码，则会使存储空间比用Asicc码多出一倍，大大浪费时间和空间。为了解决这个问题，又出现了”可变长编码”的UTF-8编码。</p>
<h2 id="UTF-8"><a href="#UTF-8" class="headerlink" title="UTF-8"></a>UTF-8</h2><p>UTF-8编码将Unicode码编成1-6个字节，常用英文字母还是一个字节，而汉字在UTF-8编码中通常是3个字节。在大量英文文本的传输或保存中可大大节约空间，且UTF-8编码对只支持Acicc编码的软件具有很好的兼容性。</p>
<h2 id="字符串和编码的转换"><a href="#字符串和编码的转换" class="headerlink" title="字符串和编码的转换"></a>字符串和编码的转换</h2><p>计算机内存里面，使用的是Unicode编码，当需要进行保存或者传输的时候需要转换成UTF-8编码。</p>
<p>Python提供了两个与编码相关的函数，ord()与chr()。前者可将对应字符的编码以十进制形式给出，如字符ord(‘A’)执行结果是65；后者可将对应十进制数转换为相应编码所对应的字符，如chr(65)执行结果是’A’。</p>
<p>Python字符串类型为str，在内存中以Unicode编码，所以在进行传输和保存的时候需要将其转换成字节形式。Python提供了encode()方法将对应字符转换成需要的字节编码形式。如’ABC’.encode(‘ascii’)即将str类型的’ABC’转换成ascii码的字节形式，执行结果即为b’ABC’，b表示bytes。纯英文的字符串可用Ascii将其编码为bytes，也可以用UTF-8将其<br>编码为bytes，但由于中文无法用Ascii码表示，所以中文不能用Ascii对其进行编码。</p>
<p>相反，若在网络或者磁盘上读取字节流，这个时候的数据就是bytes，如何将其转换成str类型？Python也提供了decode()方法将bytes类型的数据转换为str类型。如b’ABC’.decode()，执行结果为’ABC’。</p>
<p>在对字符串进行操作时，经常会对bytes和str进行转换(爬虫…？),所以一般情况下均使用UTF-8进行转换以避免麻烦的产生。</p>
<h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><p>(试一试…)<br>小明的成绩从去年的72分提升到了今年的85分，请计算小明成绩提升的百分点，并用字符串格式化显示出’xx.x%’，只保留小数点后1位：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1</span></span><br><span class="line">print(<span class="string">'&#123;:.1%&#125;'</span>.format((<span class="number">85</span> - <span class="number">72</span>) / <span class="number">72</span>))</span><br><span class="line"><span class="comment"># 2</span></span><br><span class="line">print(<span class="string">'&#123;:.1f&#125;'</span>.format((<span class="number">85</span> - <span class="number">72</span>) / <span class="number">72</span> * <span class="number">100</span>))</span><br><span class="line"><span class="comment"># 3</span></span><br><span class="line"><span class="comment"># '%%'显示%号</span></span><br><span class="line">print(<span class="string">'%.1f%%'</span> % ((<span class="number">85</span> - <span class="number">72</span>) / <span class="number">72</span> * <span class="number">100</span>))</span><br></pre></td></tr></table></figure></p>
<h1 id="列表、元组、字典和集合"><a href="#列表、元组、字典和集合" class="headerlink" title="列表、元组、字典和集合"></a>列表、元组、字典和集合</h1><p>简单的例子：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 列表</span></span><br><span class="line">lists = [<span class="number">1</span>, <span class="string">'2'</span>, <span class="string">'ASD'</span>, <span class="number">4</span>]</span><br><span class="line"><span class="comment"># 元组</span></span><br><span class="line">tuples = (<span class="number">1</span>, <span class="string">'A'</span>, <span class="string">'#'</span>)</span><br><span class="line"><span class="comment"># 字典</span></span><br><span class="line">dicts = &#123;<span class="string">'1'</span>: <span class="number">123</span>, <span class="string">'2'</span>: <span class="number">234</span>&#125;</span><br><span class="line"><span class="comment"># 集合</span></span><br><span class="line">sets = set([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">'a'</span>])</span><br><span class="line"></span><br><span class="line">print(lists, tuples, dicts, sets, sep=<span class="string">'\n'</span>)</span><br></pre></td></tr></table></figure></p>
<p>当然列表、元组、字典和集合在一定条件下可自身嵌套或相互嵌套。</p>
<h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>类似于数组，可用下标即索引(由0开始)来进行访问，在Python也可进行”逆向”访问，即lists列表的最后一个元素可以用lists[-1]进行访问，倒数第二个，倒数第三个以此类推。  </p>
<p>lists是一个可变的有序表(<strong>可变且有序</strong>，有序指定义lists时的元素顺序)。  </p>
<p>添加元素的方法有append(‘element’)方法，如lists.append(‘A’)，即可向列表lists中添加元素到末尾。若想插入到指定位置，则可使用insert(‘postion’ , ‘elem’)方法，如lists.insert(0 , ‘C’)，即可向索引为0的位置插入’C’这个元素。</p>
<p>若想删除末尾元素，直接调用pop()方法即可，如lists.pop()，直接将末尾元素删除，若想删除指定位置的元素，使用pop(pos)方法即可，如lists.pop(0)，将删除索引为0位置的元素。</p>
<p>若想更改某个元素，直接找到索引赋值即可，如lists[0] = ‘Q’。</p>
<h2 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h2><p>与列表相似，但不同的地方在于，列表初始化后可以任意修改，但元组初始化后不能修改(<strong>有序但不可变</strong>)。这在一定程度上提高了元组相对于列表的安全性。</p>
<p>元组也可通过索引进行访问，但由于不可变，所以元组本身并没有添加和删除元素的方法。</p>
<p>注意，定义一个空的元组使用tuples = ()语句，但定义拥有一个元素的元组则需要使用tuples = (1,)语句而非tuples = (1)。这是因为若使用后者，则会与小括号()产生歧义，为了避免此种情况的发生，则在只有一个元素的元组的情况下，需要在其后面加上一个逗号消除歧义。</p>
<p>对于以下这个例子：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t = (<span class="string">'a'</span>, <span class="string">'b'</span>, [<span class="string">'A'</span>, <span class="string">'B'</span>])</span><br><span class="line">print(t)</span><br><span class="line">t[<span class="number">2</span>][<span class="number">0</span>] = <span class="string">'X'</span></span><br><span class="line">t[<span class="number">2</span>][<span class="number">1</span>] = <span class="string">'Y'</span></span><br><span class="line">print(t)</span><br></pre></td></tr></table></figure></p>
<p>执行结果是:<br>(‘a’, ‘b’, [‘A’, ‘B’])<br>(‘a’, ‘b’, [‘X’, ‘Y’])</p>
<p>元组的定义中有提到元组相对于列表是不可变的，但在此处为何更改了值？我的理解则是列表[‘A’ , ‘B’]内的元素是可变的，与列表定义不冲突，但这个列表是作为元组的一个元组存在的，所以元组的第3个位置指向了这个列表，改变的是列表的值而并非更改了指向这个列表的指针(用C语言理解或许是这样？)，所以可以更改，而指向这个列表的指针在定义这个元组的时候就已经确定，所以与元组不可变的定义并不冲突。</p>
<h2 id="练习-1"><a href="#练习-1" class="headerlink" title="练习"></a>练习</h2><p>请用索引取出下面list的指定元素：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">L = [  </span><br><span class="line">    [<span class="string">'Apple'</span>, <span class="string">'Google'</span>, <span class="string">'Microsoft'</span>],  </span><br><span class="line">    [<span class="string">'Java'</span>, <span class="string">'Python'</span>, <span class="string">'Ruby'</span>, <span class="string">'PHP'</span>],  </span><br><span class="line">    [<span class="string">'Adam'</span>, <span class="string">'Bart'</span>, <span class="string">'Lisa'</span>]  </span><br><span class="line">]</span><br><span class="line">打印Apple，Python，Lisa</span><br></pre></td></tr></table></figure></p>
<p>其实可以用二维数组的方式来理解这个列表，L[0][0]即是Apple，代码如下：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">L = [</span><br><span class="line">    [<span class="string">'Apple'</span>, <span class="string">'Google'</span>, <span class="string">'Microsoft'</span>],</span><br><span class="line">    [<span class="string">'Java'</span>, <span class="string">'Python'</span>, <span class="string">'Ruby'</span>, <span class="string">'PHP'</span>],</span><br><span class="line">    [<span class="string">'Adam'</span>, <span class="string">'Bart'</span>, <span class="string">'Lisa'</span>]</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">print(L[<span class="number">0</span>][<span class="number">0</span>], L[<span class="number">1</span>][<span class="number">1</span>], L[<span class="number">2</span>][<span class="number">2</span>], sep=<span class="string">"\n"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 若打印Apple的第二个字符p</span></span><br><span class="line">print(L[<span class="number">0</span>][<span class="number">0</span>][<span class="number">1</span>])</span><br></pre></td></tr></table></figure></p>
<h2 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h2><p>与C++ STL容器中的map容器类似(或许实现方式也差不多？)，指示了键值之间的关系。</p>
<p>若想判断某个键是否存在，则可使用in判断。如’1’ in dicts，执行结果是True(最开始的定义语句)。还可以使用get()方法，如dicts.get(‘1’ , -1)，若1不存在则返回-1，后一项指示键不存在的时候用哪个数字作为返回值，不传入则返回None。</p>
<p>若想删除某个键，则可以使用pop(key)方法，对应的值也会删除，如dicts.pop(‘1’)。</p>
<p>若想添加某个键值之间的关系，也可以使用dicts[‘3’] = 789，这样的语句。</p>
<p><strong>字典的键必须是不可变对象</strong>，如字符串、整数等。如果是可变的对象如列表就不能作为键，如果使用列表作为键会导致哈希算法的出错，导致整个字典的出错。</p>
<p>字典的内部存放顺序并不一定与定义的时候所采用的顺序相同。(<strong>无序</strong>)</p>
<h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><p>与C++ STL容器中的set容器类似，可以达到去重的效果。Python中set是一组键的集合，但并没有所对应的值。</p>
<p>与字典类似，集合的内部存放顺序也不一定与定义的时候所采用的顺序相同(<strong>无序</strong>)。</p>
<p>若想要往集合中添加元素，则可使用add(key)方法，如sets.add(9)。</p>
<p>若想要删除集合中的元素，则可使用remove(key)方法，如sets.remove(9)。</p>
<p>set集合也可以理解成数学上的集合，可以进行交集并集的运算，运算符采用&amp;,和|。</p>
<p>如：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1 = set([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line"><span class="comment"># s1 = &#123;1 , 2 , 3&#125;</span></span><br><span class="line">s2 = set([<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line">print(s1 &amp; s2, s1 | s2, sep=<span class="string">"\n"</span>)</span><br></pre></td></tr></table></figure></p>
<p>执行结果是：<br>{2, 3}<br>{1, 2, 3, 4}</p>
<p>集合与字典的原理一样，因此同样也不可放入可变对象。</p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Pyton</tag>
      </tags>
  </entry>
  <entry>
    <title>学生信息管理系统</title>
    <url>/2019/03/27/%E5%AD%A6%E7%94%9F%E4%BF%A1%E6%81%AF%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>学生信息管理系统（限1人完成）<br>要求每条学生信息至包含学号(xh)、姓名(xm)、性别(xb)、年龄(nl)、专业(zy)等，完成如下功能：<br>（1）输入学生基本信息记录——enter()<br>（2）增加一名学生记录（可和功能1合并）——insert()<br>（3）删除指定（按姓名）学生的信息——delete()<br>（4）修改指定（按姓名）学生的信息）——modify()<br>（5）查询符合条件的学生（按专业）——search()<br>（6）显示学生管理库中的信息——display()  </p>
<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><p>(1)限制学号唯一，当插入相同学号时提示错误。<br>(2)可实时显示当前学生信息管理库中的人数，可输入“Esc”返回上一层菜单<br>(3)按姓名删除指定学生信息时考虑同名情况，由于学号唯一，可根据实际情况选择是删除对应学号的学生信息还是删除所有同名的学生信息。若在使用过程中遗忘此姓名的学生信息，可选择“显示同名学生的信息”以方便进行删除操作。删除信息时，若此专业人数归0，则在按专业查询符合条件的学生时，不会出现错误输出。<br>(4)按姓名修改指定学生的信息时，首先给出此人信息，可按属性进行选择性修改，修改完成后考虑同名学生情况，可以根据选择进行继续修改。<br>(5)按专业查询符合条件的学生时，若遗忘当前管理库中所拥有的专业，可根据提示展示所有已拥有的专业信息，再以此选择展示某一专业的所有学生信息。<br>(6)拓展功能，不局限于题目增加部分简单的新功能。</p>
<h3 id="不足"><a href="#不足" class="headerlink" title="不足"></a>不足</h3><p>(1)虽有一定的检测非法输入的功能如限制学号唯一，检测未提供选项的输入等，但仍无法检测一些刁钻的输入，如性别未限制男和女，年龄未限制范围和非法输入等等(标记：可对每个输入进行检测)。<br>(2)在按姓名修改指定学生的信息时，从逻辑上来说，应首先给出同名学生列表，再由学号唯一的特点进行修改指定学生的信息，或者由之前的操作应增加“下一个同名学生”选项进行修改，为了题目进行了妥协。<br>(3)菜单界面设计不友好。（参考了网上别人的菜单设计界面）<br>(4)代码冗余，实现不够简洁，程序运行效率较低，逻辑不清晰，有许多功能类似的代码可合成一个适用性较广的函数可并未实现。<br>(5)程序测试并不仔细，仍可能存在未知BUG。  </p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>有点多，仍需更新迭代<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span> ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxNumberOfStudent = <span class="number">100005</span> ;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">studentMeassage</span>&#123;</span></span><br><span class="line">	<span class="built_in">string</span> m_id ;</span><br><span class="line">    <span class="built_in">string</span> m_name ;</span><br><span class="line">    <span class="built_in">string</span> m_sex ;</span><br><span class="line">    <span class="built_in">string</span> m_age ;</span><br><span class="line">    <span class="built_in">string</span> m_profession ;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmpByID</span><span class="params">(studentMeassage data_one , studentMeassage data_two)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (data_one.m_id.length() == data_two.m_id.length())&#123;</span><br><span class="line">		<span class="keyword">return</span> data_one.m_id &lt; data_two.m_id ;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> data_one.m_id.length() &lt; data_two.m_id.length() ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmpByAge</span><span class="params">(studentMeassage data_one , studentMeassage data_two)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (data_one.m_age.length() == data_two.m_age.length())&#123;</span><br><span class="line">		<span class="keyword">return</span> data_one.m_age &lt; data_two.m_age ;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> data_one.m_age.length() &lt; data_two.m_age.length() ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmpByFirstLetterOfName</span><span class="params">(studentMeassage data_one , studentMeassage data_two)</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> data_one.m_name &lt; data_two.m_name ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmpByFirstLetterOfProfession</span><span class="params">(studentMeassage data_one , studentMeassage data_two)</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> data_one.m_profession &lt; data_two.m_profession ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="keyword">int</span> m_count ;</span><br><span class="line">	<span class="built_in">map</span>&lt;<span class="built_in">string</span> , <span class="keyword">bool</span>&gt; checkMeassage ;</span><br><span class="line">	<span class="built_in">map</span>&lt;<span class="built_in">string</span> , <span class="keyword">int</span>&gt; checkProfession ;</span><br><span class="line">	<span class="comment">// set&lt;string&gt; checkProfession ;</span></span><br><span class="line">	studentMeassage data[maxNumberOfStudent] ;</span><br><span class="line">	<span class="comment">// vector&lt;studentMeassage&gt; data;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	Student();</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">enterAndInsertMeassage</span><span class="params">(studentMeassage newinfo)</span> </span>;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">deleteMeassageByName</span><span class="params">(<span class="built_in">string</span> name)</span> </span>;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">modifyMeassageByName</span><span class="params">(<span class="built_in">string</span> name)</span> </span>;</span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">searchMeassageByProfession</span><span class="params">(<span class="built_in">string</span> profession)</span> </span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">searchMeassageByName</span><span class="params">(<span class="built_in">string</span> name)</span> </span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">displayMenu</span><span class="params">(<span class="keyword">int</span> menu)</span> </span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">displayMeassage</span><span class="params">(<span class="keyword">int</span> index)</span> </span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">displayAllMeassage</span><span class="params">()</span> </span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">displayAllProfession</span><span class="params">()</span> </span>;</span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">displayMeassageByID</span><span class="params">(<span class="built_in">string</span> id)</span> </span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">sortByID</span><span class="params">()</span> </span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">saveInsideTxt</span><span class="params">()</span> </span>;</span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">isContinue</span><span class="params">()</span> </span>;</span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">checkMcount</span><span class="params">()</span> </span>;</span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">checkIsEsc</span><span class="params">(<span class="built_in">string</span> instr)</span> </span>;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">extendedSort</span><span class="params">(<span class="keyword">int</span> way)</span> </span>;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">extendedDelete</span><span class="params">(<span class="keyword">int</span> way)</span> </span>;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">extendedQuery</span><span class="params">(<span class="keyword">int</span> way)</span> </span>;</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	extended function</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Student::Student()&#123;</span><br><span class="line">	m_count = <span class="number">0</span> ;</span><br><span class="line">	<span class="function">ifstream <span class="title">fin</span><span class="params">(<span class="string">"StudentRead.txt"</span>)</span> </span>;</span><br><span class="line">	<span class="keyword">if</span> (fin)&#123;</span><br><span class="line">		<span class="keyword">int</span> tot_student ;</span><br><span class="line">		fin &gt;&gt; tot_student ;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; tot_student ; i ++)&#123;</span><br><span class="line">			fin &gt;&gt; data[m_count].m_id &gt;&gt; data[m_count].m_name &gt;&gt; data[m_count].m_sex &gt;&gt; data[m_count].m_age &gt;&gt; data[m_count].m_profession ;</span><br><span class="line">			checkMeassage[data[m_count].m_id] = <span class="literal">true</span> ;</span><br><span class="line">			checkProfession[data[m_count].m_profession] ++ ;</span><br><span class="line">			m_count ++ ;</span><br><span class="line">		&#125;</span><br><span class="line">		fin.close() ;</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"failed"</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Student::saveInsideTxt()&#123;</span><br><span class="line">	<span class="function">ofstream <span class="title">fout</span><span class="params">(<span class="string">"StudentWrite.txt"</span>)</span> </span>;</span><br><span class="line">	<span class="keyword">if</span> (fout)&#123;</span><br><span class="line">		fout &lt;&lt; m_count &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">		fout &lt;&lt; <span class="string">"学号\t\t姓名\t\t性别\t\t年龄\t\t专业"</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; m_count ; i ++)&#123;</span><br><span class="line">			fout &lt;&lt; data[i].m_id &lt;&lt; <span class="string">"\t"</span> &lt;&lt; data[i].m_name &lt;&lt; <span class="string">"\t\t"</span> &lt;&lt; data[i].m_sex &lt;&lt; <span class="string">"\t\t"</span> &lt;&lt; data[i].m_age &lt;&lt; <span class="string">"\t\t"</span> &lt;&lt; data[i].m_profession &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">		&#125;</span><br><span class="line">		fout.close() ;</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"failed"</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> Student::checkMcount()&#123;</span><br><span class="line">	<span class="keyword">if</span> (m_count == <span class="number">0</span>)&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span> ;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">false</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Student::displayMeassage(<span class="keyword">int</span> index)&#123;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; data[index].m_id &lt;&lt; <span class="string">"\t"</span> &lt;&lt; data[index].m_name &lt;&lt; <span class="string">"\t\t"</span> &lt;&lt; data[index].m_sex &lt;&lt; <span class="string">"\t\t"</span> &lt;&lt; data[index].m_age &lt;&lt; <span class="string">"\t\t"</span> &lt;&lt; data[index].m_profession &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">	<span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> Student::enterAndInsertMeassage(studentMeassage newinfo)&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	if (m_count &gt;  maxNumberOfStudent)&#123; -&gt; OK</span></span><br><span class="line"><span class="comment">		cout &lt;&lt; "enter failure,error: full!" &lt;&lt; endl ;</span></span><br><span class="line"><span class="comment">		return ;</span></span><br><span class="line"><span class="comment">	&#125;</span></span><br><span class="line"><span class="comment">	check if the ID is duplicated -&gt; OK</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (m_count &gt; maxNumberOfStudent)&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"输入失败,学生信息管理库已满!"</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span> ;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// for (int i = 0 ; i &lt; m_count ; i ++)&#123;</span></span><br><span class="line">	<span class="comment">// 	if (newinfo.m_id == data[i].m_id)&#123;</span></span><br><span class="line">	<span class="comment">// 		return false ;</span></span><br><span class="line">	<span class="comment">// 	&#125;</span></span><br><span class="line">	<span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (checkMeassage[newinfo.m_id] == <span class="literal">true</span>)&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"输入失败,此学号已存在,请检查后重新输入!"</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">2</span> ;</span><br><span class="line">	&#125;</span><br><span class="line">	checkMeassage[newinfo.m_id] = <span class="literal">true</span> ;</span><br><span class="line">	checkProfession[newinfo.m_profession] ++ ;</span><br><span class="line">	data[m_count ++] = newinfo ;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// vector</span></span><br><span class="line">	<span class="comment">// data.push_back(newinfo) ;</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Student::searchMeassageByName(<span class="built_in">string</span> name)&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; m_count ; i ++)&#123;</span><br><span class="line">		<span class="keyword">if</span> (data[i].m_name.compare(name) == <span class="number">0</span>)&#123;</span><br><span class="line">			displayMeassage(i) ;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> Student::checkIsEsc(<span class="built_in">string</span> instr)&#123;</span><br><span class="line">	transform(instr.begin() , instr.end() , instr.begin() , ::<span class="built_in">toupper</span>) ;</span><br><span class="line">	<span class="keyword">if</span> (instr.compare(<span class="string">"ESC"</span>) == <span class="number">0</span>)&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span> ;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">false</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">考虑按名字搜寻信息，然后此处更改为按 ID 和 name 删除，避免重名的情况，或者进行选择</span></span><br><span class="line"><span class="comment">1-&gt;以前述方式只删掉一个，2-&gt;删掉所有同名的 , 3-&gt;显示同名人的信息 , 4-&gt;quit</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">int</span> Student::deleteMeassageByName(<span class="built_in">string</span> name)&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	if (m_count == 0)&#123;</span></span><br><span class="line"><span class="comment">		cout &lt;&lt; "deleteMeassage failure,error: empty!" &lt;&lt; endl ;</span></span><br><span class="line"><span class="comment">		return ;</span></span><br><span class="line"><span class="comment">	&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	consider the same name</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (checkMcount() == <span class="literal">true</span>)&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"删除失败,学生信息管理库已空!"</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span> ;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">bool</span> check_name = <span class="literal">false</span> ;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; m_count ; i ++)&#123;</span><br><span class="line">		<span class="keyword">if</span> (data[i].m_name == name)&#123;</span><br><span class="line">			check_name = <span class="literal">true</span> ;</span><br><span class="line">			<span class="keyword">break</span> ;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (check_name == <span class="literal">false</span>)&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"未找到姓名为 "</span> &lt;&lt; name &lt;&lt; <span class="string">" 的同学信息,请检查后重新输入(输入 \"Esc\" 返回主菜单)"</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">2</span> ;</span><br><span class="line">	&#125;</span><br><span class="line">	displayMenu(<span class="number">2</span>) ;</span><br><span class="line">	<span class="keyword">int</span> selectWay ;</span><br><span class="line">	<span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; selectWay)&#123;</span><br><span class="line">		<span class="keyword">bool</span> checkReturnPreviousMenu = <span class="literal">false</span> ;</span><br><span class="line">		<span class="keyword">if</span> (selectWay == <span class="number">1</span>)&#123;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入学号(输入 \"Esc\" 返回上一层菜单):"</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">			<span class="built_in">string</span> id ;</span><br><span class="line">			<span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; id)&#123;</span><br><span class="line">				<span class="keyword">if</span> (checkIsEsc(id) == <span class="literal">true</span>)&#123;</span><br><span class="line">					checkReturnPreviousMenu = <span class="literal">true</span> ;</span><br><span class="line">					<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">					<span class="keyword">break</span> ;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">bool</span> check_id = <span class="literal">false</span> ;</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; m_count ; i ++)&#123;</span><br><span class="line">					<span class="keyword">if</span> (data[i].m_id.compare(id) == <span class="number">0</span>)&#123;</span><br><span class="line">						check_id = <span class="literal">true</span> ;</span><br><span class="line">						<span class="keyword">break</span> ;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">if</span> (check_id == <span class="literal">false</span>)&#123;</span><br><span class="line">					<span class="built_in">cout</span> &lt;&lt; <span class="string">"此学号不存在请检查后重新输入(输入 \"Esc\" 返回上一层菜单):"</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">					<span class="keyword">continue</span> ;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">bool</span> check_idIsMatch = <span class="literal">false</span> ;</span><br><span class="line">				<span class="keyword">int</span> index = <span class="number">-1</span> ;</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; m_count ; i ++)&#123;</span><br><span class="line">					<span class="keyword">if</span> (data[i].m_id.compare(id) == <span class="number">0</span> &amp;&amp; data[i].m_name.compare(name) == <span class="number">0</span>)&#123;</span><br><span class="line">						index = i ;</span><br><span class="line">						check_idIsMatch = <span class="literal">true</span> ;</span><br><span class="line">						<span class="keyword">break</span> ;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">if</span> (check_idIsMatch == <span class="literal">true</span>)&#123;</span><br><span class="line">					checkProfession[data[index].m_profession] -- ;</span><br><span class="line">					<span class="keyword">for</span> (<span class="keyword">int</span> i = index ; i &lt; m_count - <span class="number">1</span> ; i ++)&#123;</span><br><span class="line">						data[i] = data[i + <span class="number">1</span>] ;</span><br><span class="line">					&#125;</span><br><span class="line">					m_count -- ;</span><br><span class="line">					<span class="keyword">break</span> ;</span><br><span class="line">				&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">					<span class="built_in">cout</span> &lt;&lt; <span class="string">"学号和姓名不匹配,请检查后重新输入(输入 \"Esc\" 返回上一层菜单):"</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">					<span class="keyword">continue</span> ;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span> (selectWay == <span class="number">2</span>)&#123;</span><br><span class="line">			<span class="keyword">int</span> index = <span class="number">-1</span> ;</span><br><span class="line">			<span class="keyword">int</span> index_pre = <span class="number">0</span> ;</span><br><span class="line">			<span class="keyword">while</span> (m_count &gt; <span class="number">0</span>)&#123;</span><br><span class="line">				<span class="keyword">bool</span> end_while = <span class="literal">true</span> ;</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> i = index_pre ; i &lt; m_count ; i ++)&#123;</span><br><span class="line">					<span class="keyword">if</span> (data[i].m_name == name)&#123;</span><br><span class="line">						index = i ;</span><br><span class="line">						end_while = <span class="literal">false</span> ;</span><br><span class="line">						<span class="keyword">break</span> ;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">if</span> (end_while == <span class="literal">true</span>)&#123;</span><br><span class="line">					<span class="keyword">break</span> ;</span><br><span class="line">				&#125;</span><br><span class="line">				index_pre = index - <span class="number">1</span> ;</span><br><span class="line">				checkProfession[data[index].m_profession] -- ;</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> i = index ; i &lt; m_count - <span class="number">1</span> ; i ++)&#123;</span><br><span class="line">					data[i] = data[i + <span class="number">1</span>] ;</span><br><span class="line">				&#125;</span><br><span class="line">				m_count -- ;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span> (selectWay == <span class="number">3</span>)&#123;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">"同名学生信息如下:"</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">			displayMenu(<span class="number">4</span>) ;</span><br><span class="line">			searchMeassageByName(name) ;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span> (selectWay == <span class="number">4</span>)&#123;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="string">"即将返回主菜单"</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">			Sleep(<span class="number">1000</span>) ;</span><br><span class="line">			<span class="comment">// system("cls") ;</span></span><br><span class="line">			displayMenu(<span class="number">1</span>) ;</span><br><span class="line">			<span class="keyword">return</span> <span class="number">1</span> ;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (checkReturnPreviousMenu == <span class="literal">true</span>)&#123;</span><br><span class="line">			displayMenu(<span class="number">2</span>) ;</span><br><span class="line">			<span class="keyword">continue</span> ;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (selectWay == <span class="number">3</span>)&#123;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">			system(<span class="string">"pause"</span>) ;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">			displayMenu(<span class="number">2</span>) ;</span><br><span class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span> (selectWay == <span class="number">1</span> || selectWay == <span class="number">2</span>)&#123;</span><br><span class="line">			<span class="keyword">break</span> ;</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">"输入错误，请重新输入:"</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> Student::modifyMeassageByName(<span class="built_in">string</span> cur_name)&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	consider the same name -&gt; OK</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	<span class="keyword">if</span> (checkMcount() == <span class="literal">true</span>)&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"修改失败,学生信息管理库已空"</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span> ;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> index = <span class="number">-1</span> ;</span><br><span class="line">	<span class="keyword">bool</span> check_name = <span class="literal">false</span> ;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; m_count ; i ++)&#123;</span><br><span class="line">		<span class="keyword">if</span> (data[i].m_name.compare(cur_name) == <span class="number">0</span>)&#123;</span><br><span class="line">			check_name = <span class="literal">true</span> ;</span><br><span class="line">			index = i ;</span><br><span class="line">			<span class="keyword">break</span> ;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (check_name == <span class="literal">false</span>)&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"未找到姓名为 "</span> &lt;&lt; cur_name &lt;&lt; <span class="string">" 的同学信息,请检查后重新输入"</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">2</span> ;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">"找到姓名为"</span> &lt;&lt; cur_name &lt;&lt; <span class="string">"的信息"</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">	displayMenu(<span class="number">4</span>) ;</span><br><span class="line">	displayMeassage(index) ;</span><br><span class="line">	system(<span class="string">"pause"</span>) ;</span><br><span class="line">	displayMenu(<span class="number">3</span>) ;</span><br><span class="line">	<span class="keyword">int</span> choice ;</span><br><span class="line">	<span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; choice)&#123;</span><br><span class="line">		<span class="keyword">bool</span> checkReturnPreviousMenu = <span class="literal">false</span> ;</span><br><span class="line">		<span class="built_in">string</span> id , name , sex , profession , age ;</span><br><span class="line">		<span class="keyword">switch</span> (choice)&#123;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">				<span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入修改后的学号(输入 \"Esc\" 返回上一层菜单):"</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">				<span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; id)&#123;</span><br><span class="line">					<span class="keyword">if</span> (checkIsEsc(id) == <span class="literal">true</span>)&#123;</span><br><span class="line">						checkReturnPreviousMenu = <span class="literal">true</span> ;</span><br><span class="line">						<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">						<span class="keyword">break</span> ;</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">if</span> (checkMeassage[id] == <span class="literal">true</span>)&#123;</span><br><span class="line">						<span class="built_in">cout</span> &lt;&lt; <span class="string">"此学号已存在，请重新输入:"</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">						<span class="keyword">continue</span> ;</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">break</span> ;</span><br><span class="line">				&#125;</span><br><span class="line">				checkMeassage[data[index].m_id] = <span class="literal">false</span> ;</span><br><span class="line">				data[index].m_id = id ;</span><br><span class="line">				checkMeassage[data[index].m_id] = <span class="literal">true</span> ;</span><br><span class="line">				<span class="keyword">break</span> ;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">				<span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入修改后的姓名(输入 \"Esc\" 返回上一层菜单):"</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">				<span class="built_in">cin</span> &gt;&gt; name ;</span><br><span class="line">				<span class="keyword">if</span> (checkIsEsc(name) == <span class="literal">true</span>)&#123;</span><br><span class="line">					checkReturnPreviousMenu = <span class="literal">true</span> ;</span><br><span class="line">					<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">					<span class="keyword">break</span> ;</span><br><span class="line">				&#125;</span><br><span class="line">				data[index].m_name = name ;</span><br><span class="line">				<span class="keyword">break</span> ;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">				<span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入修改后的性别(输入 \"Esc\" 返回上一层菜单):"</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">				<span class="built_in">cin</span> &gt;&gt; sex ;</span><br><span class="line">				<span class="keyword">if</span> (checkIsEsc(sex) == <span class="literal">true</span>)&#123;</span><br><span class="line">					checkReturnPreviousMenu = <span class="literal">true</span> ;</span><br><span class="line">					<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">					<span class="keyword">break</span> ;</span><br><span class="line">				&#125;</span><br><span class="line">				data[index].m_sex = sex ;</span><br><span class="line">				<span class="keyword">break</span> ;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">				<span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入修改后的年龄(输入 \"Esc\" 返回上一层菜单):"</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">				<span class="built_in">cin</span> &gt;&gt; age ;</span><br><span class="line">				<span class="keyword">if</span> (checkIsEsc(age) == <span class="literal">true</span>)&#123;</span><br><span class="line">					checkReturnPreviousMenu = <span class="literal">true</span> ;</span><br><span class="line">					<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">					<span class="keyword">break</span> ;</span><br><span class="line">				&#125;</span><br><span class="line">				data[index].m_age = age ;</span><br><span class="line">				<span class="keyword">break</span> ;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">				<span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入修改后的专业(输入 \"Esc\" 返回上一层菜单):"</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">				<span class="built_in">cin</span> &gt;&gt; profession ;</span><br><span class="line">				<span class="keyword">if</span> (checkIsEsc(profession) == <span class="literal">true</span>)&#123;</span><br><span class="line">					checkReturnPreviousMenu = <span class="literal">true</span> ;</span><br><span class="line">					<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">					<span class="keyword">break</span> ;</span><br><span class="line">				&#125;</span><br><span class="line">				data[index].m_profession = profession ;</span><br><span class="line">				<span class="keyword">break</span> ;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">				<span class="built_in">cout</span> &lt;&lt; <span class="string">"请按学号、姓名、性别、年龄、专业的顺序进行输入，以空格分隔(输入 \"Esc\" 返回上一层菜单):"</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">				<span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; id)&#123;</span><br><span class="line">					<span class="built_in">cin</span> &gt;&gt; name &gt;&gt; sex &gt;&gt; age &gt;&gt; profession ;</span><br><span class="line">					<span class="keyword">if</span> (checkIsEsc(id) == <span class="literal">true</span>)&#123;</span><br><span class="line">						checkReturnPreviousMenu = <span class="literal">true</span> ;</span><br><span class="line">						<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">						<span class="keyword">break</span> ;</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">if</span> (checkMeassage[id] == <span class="literal">true</span>)&#123;</span><br><span class="line">						<span class="built_in">cout</span> &lt;&lt; <span class="string">"学号已存在，请重新输入:"</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">						<span class="keyword">continue</span> ;</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">break</span> ;</span><br><span class="line">				&#125;</span><br><span class="line">				data[index].m_id = id ;</span><br><span class="line">				data[index].m_name = name ;</span><br><span class="line">				data[index].m_sex = sex ;</span><br><span class="line">				data[index].m_age = age ;</span><br><span class="line">				data[index].m_profession = profession ;</span><br><span class="line">				<span class="keyword">break</span> ;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">				<span class="comment">// cout &lt;&lt; "即将返回主菜单" &lt;&lt; endl ;</span></span><br><span class="line">				<span class="comment">// Sleep(1000) ;</span></span><br><span class="line">				<span class="comment">// system("cls") ;</span></span><br><span class="line">				<span class="comment">// displayMenu(1) ;</span></span><br><span class="line">				<span class="comment">// break ;</span></span><br><span class="line">				<span class="keyword">return</span> <span class="number">1</span> ;</span><br><span class="line">			<span class="keyword">default</span>:</span><br><span class="line">				<span class="built_in">cout</span> &lt;&lt; <span class="string">"输入错误，请重新输入"</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (checkReturnPreviousMenu == <span class="literal">true</span>)&#123;</span><br><span class="line">			displayMenu(<span class="number">3</span>) ;</span><br><span class="line">			<span class="keyword">continue</span> ;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"修改成功,修改后的信息为:"</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">		displayMeassage(index) ;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">		system(<span class="string">"pause"</span>) ;</span><br><span class="line">		<span class="keyword">bool</span> check_samename = <span class="literal">false</span> ;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = index + <span class="number">1</span> ; i &lt; m_count ; i ++)&#123;</span><br><span class="line">			<span class="keyword">if</span> (data[i].m_name.compare(cur_name) == <span class="number">0</span>)&#123;</span><br><span class="line">				index = i ;</span><br><span class="line">				check_samename = <span class="literal">true</span> ;</span><br><span class="line">				<span class="keyword">break</span> ;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> select = <span class="number">0</span> ;</span><br><span class="line">		<span class="keyword">if</span> (check_samename == <span class="literal">true</span>)&#123;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="string">"检测到同名，信息为:"</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">			displayMeassage(index) ;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="string">"是否继续更改此同学的信息？(Yes/No)"</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">			<span class="built_in">string</span> selectAnwser ;</span><br><span class="line">			<span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; selectAnwser)&#123;</span><br><span class="line">				<span class="keyword">if</span> (selectAnwser.compare(<span class="string">"Yes"</span>) == <span class="number">0</span>)&#123;</span><br><span class="line">					displayMenu(<span class="number">3</span>) ;</span><br><span class="line">					select = <span class="number">1</span> ;</span><br><span class="line">					<span class="keyword">break</span> ;</span><br><span class="line">				&#125;<span class="keyword">else</span> <span class="keyword">if</span> (selectAnwser.compare(<span class="string">"No"</span>) == <span class="number">0</span>)&#123;</span><br><span class="line">					select = <span class="number">2</span> ;</span><br><span class="line">					<span class="keyword">break</span> ;</span><br><span class="line">				&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">					<span class="built_in">cout</span> &lt;&lt; <span class="string">"输入错误，请重新输入"</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">					<span class="keyword">continue</span> ;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (select == <span class="number">1</span>)&#123;</span><br><span class="line">			<span class="keyword">continue</span> ;</span><br><span class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span> (select == <span class="number">2</span>)&#123;</span><br><span class="line">			<span class="keyword">break</span> ;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (choice &gt;= <span class="number">1</span> &amp;&amp; choice &lt;= <span class="number">7</span>)&#123;</span><br><span class="line">			<span class="keyword">break</span> ;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> Student::displayMeassageByID(<span class="built_in">string</span> id)&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">    check id</span></span><br><span class="line"><span class="comment">    id is unique</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; m_count ; i ++)&#123;</span><br><span class="line">		<span class="keyword">if</span> (data[i].m_id == id)&#123;</span><br><span class="line">			displayMeassage(i) ;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">true</span> ;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">false</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Student::displayAllProfession()&#123;</span><br><span class="line">	<span class="built_in">map</span>&lt;<span class="built_in">string</span> , <span class="keyword">int</span>&gt;::iterator it ;</span><br><span class="line">	<span class="keyword">for</span> (it = checkProfession.begin() ; it != checkProfession.end() ; it ++)&#123;</span><br><span class="line">		<span class="keyword">if</span> (it-&gt;second &gt; <span class="number">0</span>)&#123;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; it-&gt;first &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> Student::searchMeassageByProfession(<span class="built_in">string</span> profession)&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	check profession</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">bool</span> first = <span class="literal">true</span> ;</span><br><span class="line">	<span class="keyword">bool</span> check_profession = <span class="literal">false</span> ;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; m_count ; i ++)&#123;</span><br><span class="line">		<span class="keyword">if</span> (data[i].m_profession == profession)&#123;</span><br><span class="line">			<span class="keyword">if</span> (first == <span class="literal">true</span>)&#123;</span><br><span class="line">				displayMenu(<span class="number">4</span>) ;</span><br><span class="line">				first = <span class="literal">false</span> ;</span><br><span class="line">			&#125;</span><br><span class="line">			displayMeassage(i) ;</span><br><span class="line">			check_profession = <span class="literal">true</span> ;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (check_profession == <span class="literal">false</span>)&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span> ;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	return menu</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Student::displayAllMeassage()&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; m_count ; i ++)&#123;</span><br><span class="line">		displayMeassage(i) ;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Student::sortByID()&#123;</span><br><span class="line">	sort(data , data + m_count , cmpByID) ;</span><br><span class="line">	<span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> Student::extendedSort(<span class="keyword">int</span> way)&#123;</span><br><span class="line">	<span class="keyword">switch</span> (way)&#123;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">1</span>:&#123;</span><br><span class="line">			sort(data , data + m_count , cmpByID) ;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">"学号\t\t姓名\t\t性别\t\t年龄\t\t专业"</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">			displayAllMeassage() ;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">			system(<span class="string">"pause"</span>) ;</span><br><span class="line">			<span class="keyword">break</span> ;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">2</span>:&#123;</span><br><span class="line">			sort(data , data + m_count , cmpByAge) ;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">"学号\t\t姓名\t\t性别\t\t年龄\t\t专业"</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">			displayAllMeassage() ;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">			system(<span class="string">"pause"</span>) ;</span><br><span class="line">			<span class="keyword">break</span> ;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">3</span>:&#123;</span><br><span class="line">			sort(data , data + m_count , cmpByFirstLetterOfName) ;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">"学号\t\t姓名\t\t性别\t\t年龄\t\t专业"</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">			displayAllMeassage() ;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">			system(<span class="string">"pause"</span>) ;</span><br><span class="line">			<span class="keyword">break</span> ;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">4</span>:&#123;</span><br><span class="line">			sort(data , data + m_count , cmpByFirstLetterOfProfession) ;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">"学号\t\t姓名\t\t性别\t\t年龄\t\t专业"</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">			displayAllMeassage() ;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">			system(<span class="string">"pause"</span>) ;</span><br><span class="line">			<span class="keyword">break</span> ;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">5</span>:&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="number">1</span> ;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">default</span>:&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="number">2</span> ;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> Student::extendedDelete(<span class="keyword">int</span> way)&#123;</span><br><span class="line">	<span class="keyword">switch</span> (way)&#123;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">1</span>:&#123;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入专业(输入 \"Esc\" 返回上一层菜单)"</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">			<span class="built_in">string</span> delete_profession ;</span><br><span class="line">			<span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; delete_profession)&#123;</span><br><span class="line">				<span class="keyword">if</span> (checkIsEsc(delete_profession) == <span class="literal">true</span>)&#123;</span><br><span class="line">					<span class="keyword">return</span> <span class="number">1</span> ;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">bool</span> check_profession_exist = <span class="literal">false</span> ;</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; m_count ; i ++)&#123;</span><br><span class="line">					<span class="keyword">if</span> (delete_profession.compare(data[i].m_profession) == <span class="number">0</span>)&#123;</span><br><span class="line">						check_profession_exist = <span class="literal">true</span> ;</span><br><span class="line">						<span class="keyword">break</span> ;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">if</span> (check_profession_exist == <span class="literal">false</span>)&#123;</span><br><span class="line">					<span class="built_in">cout</span> &lt;&lt; <span class="string">"不存在此专业,请检查后重新输入(输入 \"Esc\" 返回上一层菜单):"</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">					<span class="keyword">continue</span> ;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">int</span> index = <span class="number">-1</span> ;</span><br><span class="line">				<span class="keyword">bool</span> end_out_while = <span class="literal">false</span> ;</span><br><span class="line">				<span class="keyword">while</span> (m_count &gt; <span class="number">0</span>)&#123;</span><br><span class="line">					<span class="keyword">bool</span> end_while = <span class="literal">true</span> ;</span><br><span class="line">					<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; m_count ; i ++)&#123;</span><br><span class="line">						<span class="keyword">if</span> (data[i].m_profession.compare(delete_profession) == <span class="number">0</span>)&#123;</span><br><span class="line">							index = i ;</span><br><span class="line">							end_while = <span class="literal">false</span> ;</span><br><span class="line">							<span class="keyword">break</span> ;</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">if</span> (end_while == <span class="literal">true</span>)&#123;</span><br><span class="line">						end_out_while = <span class="literal">true</span> ;</span><br><span class="line">						<span class="keyword">break</span> ;</span><br><span class="line">					&#125;</span><br><span class="line">					checkProfession[data[index].m_profession] -- ;</span><br><span class="line">					<span class="keyword">for</span> (<span class="keyword">int</span> i = index ; i &lt; m_count - <span class="number">1</span> ; i ++)&#123;</span><br><span class="line">						data[i] = data[i + <span class="number">1</span>] ;</span><br><span class="line">					&#125;</span><br><span class="line">					m_count -- ;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">if</span> (end_out_while == <span class="literal">true</span>)&#123;</span><br><span class="line">					<span class="keyword">break</span> ;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">break</span> ;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">2</span>:&#123;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入年龄(输入 \"Esc\" 返回上一层菜单)"</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">			<span class="built_in">string</span> delete_age ;</span><br><span class="line">			<span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; delete_age)&#123;</span><br><span class="line">				<span class="keyword">if</span> (checkIsEsc(delete_age) == <span class="literal">true</span>)&#123;</span><br><span class="line">					<span class="keyword">return</span> <span class="number">1</span> ;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">bool</span> check_age_exist = <span class="literal">false</span> ;</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; m_count ; i ++)&#123;</span><br><span class="line">					<span class="keyword">if</span> (delete_age.compare(data[i].m_age) == <span class="number">0</span>)&#123;</span><br><span class="line">						check_age_exist = <span class="literal">true</span> ;</span><br><span class="line">						<span class="keyword">break</span> ;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">if</span> (check_age_exist == <span class="literal">false</span>)&#123;</span><br><span class="line">					<span class="built_in">cout</span> &lt;&lt; <span class="string">"不存在此年龄的同学,请检查后重新输入(输入 \"Esc\" 返回上一层菜单):"</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">					<span class="keyword">continue</span> ;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">int</span> index = <span class="number">-1</span> ;</span><br><span class="line">				<span class="keyword">bool</span> end_out_while = <span class="literal">false</span> ;</span><br><span class="line">				<span class="keyword">while</span> (m_count &gt; <span class="number">0</span>)&#123;</span><br><span class="line">					<span class="keyword">bool</span> end_while = <span class="literal">true</span> ;</span><br><span class="line">					<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; m_count ; i ++)&#123;</span><br><span class="line">						<span class="keyword">if</span> (data[i].m_age.compare(delete_age) == <span class="number">0</span>)&#123;</span><br><span class="line">							index = i ;</span><br><span class="line">							end_while = <span class="literal">false</span> ;</span><br><span class="line">							<span class="keyword">break</span> ;</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">if</span> (end_while == <span class="literal">true</span>)&#123;</span><br><span class="line">						end_out_while = <span class="literal">true</span> ;</span><br><span class="line">						<span class="keyword">break</span> ;</span><br><span class="line">					&#125;</span><br><span class="line">					checkProfession[data[index].m_age] -- ;</span><br><span class="line">					<span class="keyword">for</span> (<span class="keyword">int</span> i = index ; i &lt; m_count - <span class="number">1</span> ; i ++)&#123;</span><br><span class="line">						data[i] = data[i + <span class="number">1</span>] ;</span><br><span class="line">					&#125;</span><br><span class="line">					m_count -- ;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">if</span> (end_out_while == <span class="literal">true</span>)&#123;</span><br><span class="line">					<span class="keyword">break</span> ;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">break</span> ;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">3</span>:&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="number">1</span> ;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">default</span>:&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="number">2</span> ;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> Student::extendedQuery(<span class="keyword">int</span> way)&#123;</span><br><span class="line">	<span class="keyword">switch</span> (way)&#123;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">1</span>:&#123;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入性别(输入 \"Esc\" 返回上一层菜单)"</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">			<span class="built_in">string</span> query_sex ;</span><br><span class="line">			<span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; query_sex)&#123;</span><br><span class="line">				<span class="keyword">if</span> (checkIsEsc(query_sex) == <span class="literal">true</span>)&#123;</span><br><span class="line">					<span class="keyword">return</span> <span class="number">1</span> ;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">bool</span> check_sex_exist = <span class="literal">false</span> ;</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; m_count ; i ++)&#123;</span><br><span class="line">					<span class="keyword">if</span> (data[i].m_sex.compare(query_sex) == <span class="number">0</span>)&#123;</span><br><span class="line">						check_sex_exist = <span class="literal">true</span> ;</span><br><span class="line">						<span class="keyword">break</span> ;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">if</span> (check_sex_exist == <span class="literal">false</span>)&#123;</span><br><span class="line">					<span class="built_in">cout</span> &lt;&lt; <span class="string">"不存在此性别的同学,请检查后重新输入(输入 \"Esc\" 返回上一层菜单):"</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">					<span class="keyword">continue</span> ;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="string">"结果如下:"</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">				displayMenu(<span class="number">4</span>) ;</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; m_count ; i ++)&#123;</span><br><span class="line">					<span class="keyword">if</span> (data[i].m_sex.compare(query_sex) == <span class="number">0</span>)&#123;</span><br><span class="line">						displayMeassage(i) ;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">break</span> ;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">break</span> ;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">2</span>:&#123;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入年龄(输入 \"Esc\" 返回上一层菜单)"</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">			<span class="built_in">string</span> query_age ;</span><br><span class="line">			<span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; query_age)&#123;</span><br><span class="line">				<span class="keyword">if</span> (checkIsEsc(query_age) == <span class="literal">true</span>)&#123;</span><br><span class="line">					<span class="keyword">return</span> <span class="number">1</span> ;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">bool</span> check_age_exist = <span class="literal">false</span> ;</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; m_count ; i ++)&#123;</span><br><span class="line">					<span class="keyword">if</span> (data[i].m_age.compare(query_age) == <span class="number">0</span>)&#123;</span><br><span class="line">						check_age_exist = <span class="literal">true</span> ;</span><br><span class="line">						<span class="keyword">break</span> ;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">if</span> (check_age_exist == <span class="literal">false</span>)&#123;</span><br><span class="line">					<span class="built_in">cout</span> &lt;&lt; <span class="string">"不存在此年龄的同学,请检查后重新输入(输入 \"Esc\" 返回上一层菜单):"</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">					<span class="keyword">continue</span> ;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="string">"结果如下:"</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">				displayMenu(<span class="number">4</span>) ;</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; m_count ; i ++)&#123;</span><br><span class="line">					<span class="keyword">if</span> (data[i].m_age.compare(query_age) == <span class="number">0</span>)&#123;</span><br><span class="line">						displayMeassage(i) ;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">break</span> ;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">break</span> ;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">3</span>:&#123;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入姓氏(输入 \"Esc\" 返回上一层菜单)"</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">			<span class="built_in">string</span> query_firstName ;</span><br><span class="line">			<span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; query_firstName)&#123;</span><br><span class="line">				<span class="keyword">if</span> (checkIsEsc(query_firstName) == <span class="literal">true</span>)&#123;</span><br><span class="line">					<span class="keyword">return</span> <span class="number">1</span> ;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="built_in">string</span> str_first_name ;</span><br><span class="line">				<span class="keyword">bool</span> check_first_name_exist = <span class="literal">false</span> ;</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; m_count ; i ++)&#123;</span><br><span class="line">					str_first_name = data[i].m_name.substr(<span class="number">0</span> , <span class="number">2</span>) ;</span><br><span class="line">					<span class="keyword">if</span> (str_first_name.compare(query_firstName) == <span class="number">0</span>)&#123;</span><br><span class="line">						check_first_name_exist = <span class="literal">true</span> ;</span><br><span class="line">						<span class="keyword">break</span> ;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">if</span> (check_first_name_exist == <span class="literal">false</span>)&#123;</span><br><span class="line">					<span class="built_in">cout</span> &lt;&lt; <span class="string">"不存在此姓氏的同学,请检查后重新输入(输入 \"Esc\" 返回上一层菜单):"</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">					<span class="keyword">continue</span> ;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="string">"结果如下:"</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">				displayMenu(<span class="number">4</span>) ;</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; m_count ; i ++)&#123;</span><br><span class="line">					str_first_name = data[i].m_name.substr(<span class="number">0</span> , <span class="number">2</span>) ;</span><br><span class="line">					<span class="keyword">if</span> (str_first_name.compare(query_firstName) == <span class="number">0</span>)&#123;</span><br><span class="line">						displayMeassage(i) ;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">break</span> ;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">break</span> ;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">4</span>:&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="number">1</span> ;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">default</span>:&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="number">2</span> ;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> Student::isContinue()&#123;</span><br><span class="line">	<span class="built_in">string</span> str_select ;</span><br><span class="line">	<span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; str_select)&#123;</span><br><span class="line">		<span class="keyword">if</span> (str_select.compare(<span class="string">"Yes"</span>) == <span class="number">0</span>)&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">true</span> ;</span><br><span class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span> (str_select.compare(<span class="string">"No"</span>) == <span class="number">0</span>)&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span> ;</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">"输入错误,请重新输入(Yes/No):"</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">			<span class="keyword">continue</span> ;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">false</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Student::displayMenu(<span class="keyword">int</span> menu)&#123;</span><br><span class="line">	<span class="keyword">if</span> (menu == <span class="number">-1</span>)&#123;</span><br><span class="line">		sortByID() ;</span><br><span class="line">		saveInsideTxt() ;</span><br><span class="line">		system(<span class="string">"cls"</span>) ;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"\t\t\t\t\t信息已保存至\"StudentWrite.txt\"文件,请留意!"</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">		Sleep(<span class="number">1000</span>) ;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"\t\t\t\t\t系统正在关闭……"</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">		Sleep(<span class="number">1700</span>) ;</span><br><span class="line">		system(<span class="string">"cls"</span>) ;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"\t\t\t\t\t感谢使用学生信息管理系统,再见!"</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">		Sleep(<span class="number">1000</span>) ;</span><br><span class="line">		system(<span class="string">"cls"</span>) ;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (menu == <span class="number">0</span>)&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"\t\t\t\t\t\t首次加载,请稍候…………"</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">		Sleep(<span class="number">1700</span>) ;</span><br><span class="line">		system(<span class="string">"cls"</span>) ;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"\t\t\t\t\t\t加载成功！"</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">		Sleep(<span class="number">1000</span>) ;</span><br><span class="line">		system(<span class="string">"cls"</span>) ;</span><br><span class="line">	&#125;<span class="keyword">else</span> <span class="keyword">if</span> (menu == <span class="number">1</span>)&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"\t\t\t-------- ★\t欢迎来到学生信息管理系统!\t★ --------"</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">		Sleep(<span class="number">700</span>) ;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"\t\t\t-------- ★\t当前学生信息管理库共有"</span> &lt;&lt; m_count &lt;&lt; <span class="string">"人\t★ --------"</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">		Sleep(<span class="number">700</span>) ;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"========================================================================================================================"</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">		Sleep(<span class="number">700</span>) ;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"\t\t\t-------- ☆\t1.输入学生基本信息\t\t☆ --------"</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">		Sleep(<span class="number">700</span>) ;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"\t\t\t-------- ☆\t2.删除指定学生的信息(按姓名)\t☆ --------"</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">		Sleep(<span class="number">700</span>) ;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"\t\t\t-------- ☆\t3.修改指定学生的信息(按姓名)\t☆ --------"</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">		Sleep(<span class="number">700</span>) ;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"\t\t\t-------- ☆\t4.查询符合条件的学生(按专业)\t☆ --------"</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">		Sleep(<span class="number">700</span>) ;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"\t\t\t-------- ☆\t5.显示学生管理库中的所有信息\t☆ --------"</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">		Sleep(<span class="number">700</span>) ;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"\t\t\t-------- ☆\t6.拓展功能\t\t\t☆ --------"</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">		Sleep(<span class="number">700</span>) ;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"\t\t\t-------- ☆\t7.退出程序\t\t\t☆ --------"</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">		Sleep(<span class="number">700</span>) ;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"========================================================================================================================"</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">		Sleep(<span class="number">700</span>) ;</span><br><span class="line">	&#125;<span class="keyword">else</span> <span class="keyword">if</span> (menu == <span class="number">2</span>)&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"\t\t\t-------- ★\t功能选项\t\t\t★ --------"</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">		Sleep(<span class="number">700</span>) ;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"========================================================================================================================"</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">		Sleep(<span class="number">700</span>) ;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"\t\t\t-------- ☆\t1.输入学号进行删除\t\t☆ --------"</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">		Sleep(<span class="number">700</span>) ;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"\t\t\t-------- ☆\t2.删除所有同名学生的信息\t☆ --------"</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">		Sleep(<span class="number">700</span>) ;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"\t\t\t-------- ☆\t3.显示同名学生的信息\t\t☆ --------"</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">		Sleep(<span class="number">700</span>) ;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"\t\t\t-------- ☆\t4.返回主菜单\t\t\t☆ --------"</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">		Sleep(<span class="number">700</span>) ;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"========================================================================================================================"</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">		Sleep(<span class="number">700</span>) ;</span><br><span class="line">	&#125;<span class="keyword">else</span> <span class="keyword">if</span> (menu == <span class="number">3</span>)&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"\t\t\t-------- ★\t功能选项\t★ --------"</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">		Sleep(<span class="number">700</span>) ;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"========================================================================================================================"</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">		Sleep(<span class="number">700</span>) ;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"\t\t\t-------- ☆\t1.修改学号\t☆ --------"</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">		Sleep(<span class="number">700</span>) ;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"\t\t\t-------- ☆\t2.修改姓名\t☆ --------"</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">		Sleep(<span class="number">700</span>) ;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"\t\t\t-------- ☆\t3.修改性别\t☆ --------"</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">		Sleep(<span class="number">700</span>) ;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"\t\t\t-------- ☆\t4.修改年龄\t☆ --------"</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">		Sleep(<span class="number">700</span>) ;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"\t\t\t-------- ☆\t5.修改专业\t☆ --------"</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">		Sleep(<span class="number">700</span>) ;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"\t\t\t-------- ☆\t6.全部修改\t☆ --------"</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">		Sleep(<span class="number">700</span>) ;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"\t\t\t-------- ☆\t7.返回主菜单\t☆ --------"</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">		Sleep(<span class="number">700</span>) ;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"========================================================================================================================"</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">		Sleep(<span class="number">700</span>) ;</span><br><span class="line">	&#125;<span class="keyword">else</span> <span class="keyword">if</span> (menu == <span class="number">4</span>)&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"学号\t\t姓名\t\t性别\t\t年龄\t\t专业"</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">		Sleep(<span class="number">500</span>) ;</span><br><span class="line">	&#125;<span class="keyword">else</span> <span class="keyword">if</span> (menu == <span class="number">5</span>)&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"\t\t\t-------- ☆\t新功能开发中,敬请期待……\t☆ --------"</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">		Sleep(<span class="number">700</span>) ;</span><br><span class="line">		<span class="keyword">return</span> ;</span><br><span class="line">	&#125;<span class="keyword">else</span> <span class="keyword">if</span> (menu == <span class="number">6</span>)&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"\t\t\t-------- ★\t功能选项\t★ --------"</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">		Sleep(<span class="number">700</span>) ;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"========================================================================================================================"</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">		Sleep(<span class="number">700</span>) ;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"\t\t\t-------- ☆\t1.拓展排序\t☆ --------"</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">		Sleep(<span class="number">700</span>) ;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"\t\t\t-------- ☆\t2.拓展删除\t☆ --------"</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">		Sleep(<span class="number">700</span>) ;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"\t\t\t-------- ☆\t3.拓展查询\t☆ --------"</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">		Sleep(<span class="number">700</span>) ;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"\t\t\t-------- ☆\t4.返回主菜单\t☆ --------"</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">		Sleep(<span class="number">700</span>) ;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"========================================================================================================================"</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">		Sleep(<span class="number">700</span>) ;</span><br><span class="line">	&#125;<span class="keyword">else</span> <span class="keyword">if</span> (menu == <span class="number">7</span>)&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"\t\t\t-------- ★\t拓展排序功能选项\t★ --------"</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">		Sleep(<span class="number">700</span>) ;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"========================================================================================================================"</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">		Sleep(<span class="number">700</span>) ;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"\t\t\t-------- ☆\t1.按学号升序排序\t☆ --------"</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">		Sleep(<span class="number">700</span>) ;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"\t\t\t-------- ☆\t2.按年龄升序排序\t☆ --------"</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">		Sleep(<span class="number">700</span>) ;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"\t\t\t-------- ☆\t3.按姓名首字母排序\t☆ --------"</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">		Sleep(<span class="number">700</span>) ;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"\t\t\t-------- ☆\t4.按专业首字母排序\t☆ --------"</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">		Sleep(<span class="number">700</span>) ;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"\t\t\t-------- ☆\t5.返回上一层菜单\t☆ --------"</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">		Sleep(<span class="number">700</span>) ;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"========================================================================================================================"</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">		Sleep(<span class="number">700</span>) ;</span><br><span class="line">	&#125;<span class="keyword">else</span> <span class="keyword">if</span> (menu == <span class="number">8</span>)&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"\t\t\t-------- ★\t拓展删除功能选项\t\t★ --------"</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">		Sleep(<span class="number">700</span>) ;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"========================================================================================================================"</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">		Sleep(<span class="number">700</span>) ;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"\t\t\t-------- ☆\t1.删除同一专业的所有学生\t☆ --------"</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">		Sleep(<span class="number">700</span>) ;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"\t\t\t-------- ☆\t2.删除同一年龄的所有学生\t☆ --------"</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">		Sleep(<span class="number">700</span>) ;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"\t\t\t-------- ☆\t3.返回上一层菜单\t\t☆ --------"</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">		Sleep(<span class="number">700</span>) ;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"========================================================================================================================"</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">		Sleep(<span class="number">700</span>) ;</span><br><span class="line">	&#125;<span class="keyword">else</span> <span class="keyword">if</span> (menu == <span class="number">9</span>)&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"\t\t\t-------- ★\t拓展查询功能选项\t\t★ --------"</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">		Sleep(<span class="number">700</span>) ;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"========================================================================================================================"</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">		Sleep(<span class="number">700</span>) ;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"\t\t\t-------- ☆\t1.查询某一性别的所有学生\t☆ --------"</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">		Sleep(<span class="number">700</span>) ;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"\t\t\t-------- ☆\t2.查询某一年龄的所有学生\t☆ --------"</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">		Sleep(<span class="number">700</span>) ;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"\t\t\t-------- ☆\t3.查询某一姓氏的所有学生\t☆ --------"</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">		Sleep(<span class="number">700</span>) ;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"\t\t\t-------- ☆\t4.返回上一层菜单\t\t☆ --------"</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">		Sleep(<span class="number">700</span>) ;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"========================================================================================================================"</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">		Sleep(<span class="number">700</span>) ;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (menu == <span class="number">4</span>) <span class="keyword">return</span> ;</span><br><span class="line">	<span class="keyword">if</span> (menu &lt; <span class="number">10</span> &amp;&amp; menu &gt; <span class="number">0</span>) <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="string">"请输入数字进行选择:"</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">	<span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="title">stud</span> ;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">studentMeassage</span> <span class="title">stu</span> ;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// stud.searchMeassageByProfession("5") ;</span></span><br><span class="line">	<span class="comment">// stud.displayAllMeassage() ;</span></span><br><span class="line">	<span class="comment">// stud.modifyMeassageByName("2") ;</span></span><br><span class="line">	<span class="comment">// stud.displayAllMeassage() ;</span></span><br><span class="line">	<span class="comment">// stud.saveInsideTxt() ;</span></span><br><span class="line">	stud.displayMenu(<span class="number">0</span>) ;</span><br><span class="line">	stud.displayMenu(<span class="number">1</span>) ;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	1-&gt;enter , 2-&gt;delete , 3-&gt;modify , 4-&gt;search ,</span></span><br><span class="line"><span class="comment"> 	5-&gt;display , 6-&gt;etc(extended function) , 7-&gt;quit program</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> choice ;</span><br><span class="line">	<span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; choice)&#123;</span><br><span class="line">		<span class="keyword">bool</span> checkReturnMenu = <span class="literal">false</span> ;</span><br><span class="line">		<span class="keyword">switch</span> (choice)&#123;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">1</span>:&#123;</span><br><span class="line">				<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">				<span class="built_in">cout</span> &lt;&lt; <span class="string">"请按学号、姓名、性别、年龄、专业的顺序进行输入，以空格分隔(输入 \"Esc\" 返回主菜单):"</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">				<span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; stu.m_id)&#123;</span><br><span class="line">					<span class="keyword">if</span> (stud.checkIsEsc(stu.m_id) == <span class="literal">true</span>)&#123;</span><br><span class="line">						checkReturnMenu = <span class="literal">true</span> ;</span><br><span class="line">						<span class="keyword">break</span> ;</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="built_in">cin</span> &gt;&gt; stu.m_name &gt;&gt; stu.m_sex &gt;&gt; stu.m_age &gt;&gt; stu.m_profession ;</span><br><span class="line">					<span class="keyword">int</span> check_succeed = stud.enterAndInsertMeassage(stu) ;</span><br><span class="line">					<span class="keyword">if</span> (check_succeed == <span class="number">1</span>)&#123;</span><br><span class="line">						<span class="keyword">break</span> ;</span><br><span class="line">					&#125;<span class="keyword">else</span> <span class="keyword">if</span> (check_succeed == <span class="number">2</span>)&#123;</span><br><span class="line">						<span class="keyword">continue</span> ;</span><br><span class="line">					&#125;<span class="keyword">else</span> <span class="keyword">if</span> (check_succeed == <span class="number">0</span>)&#123;</span><br><span class="line">						<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">						<span class="built_in">cout</span> &lt;&lt; <span class="string">"插入学生信息成功,是否继续输入?(Yes/No)"</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">						<span class="keyword">bool</span> check_continue = stud.isContinue() ;</span><br><span class="line">						<span class="keyword">if</span> (check_continue == <span class="literal">true</span>)&#123;</span><br><span class="line">							<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">							<span class="built_in">cout</span> &lt;&lt; <span class="string">"请按学号、姓名、性别、年龄、专业的顺序进行输入，以空格分隔(输入 \"Esc\" 返回主菜单):"</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">							<span class="keyword">continue</span> ;</span><br><span class="line">						&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">							checkReturnMenu = <span class="literal">true</span> ;</span><br><span class="line">							<span class="keyword">break</span> ;</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">break</span> ;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">2</span>:&#123;</span><br><span class="line">				<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">				<span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入姓名(输入 \"Esc\" 返回主菜单):"</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">				<span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; stu.m_name)&#123;</span><br><span class="line">					<span class="keyword">if</span> (stud.checkIsEsc(stu.m_name) == <span class="literal">true</span>)&#123;</span><br><span class="line">						checkReturnMenu = <span class="literal">true</span> ;</span><br><span class="line">						<span class="keyword">break</span> ;</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">					<span class="keyword">int</span> check_succeed = stud.deleteMeassageByName(stu.m_name) ;</span><br><span class="line">					<span class="keyword">if</span> (check_succeed == <span class="number">1</span>)&#123;</span><br><span class="line">						<span class="keyword">break</span> ;</span><br><span class="line">					&#125;<span class="keyword">else</span> <span class="keyword">if</span> (check_succeed == <span class="number">2</span>)&#123;</span><br><span class="line">						<span class="keyword">continue</span> ;</span><br><span class="line">					&#125;<span class="keyword">else</span> <span class="keyword">if</span> (check_succeed == <span class="number">0</span>)&#123;</span><br><span class="line">						<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">						<span class="built_in">cout</span> &lt;&lt; <span class="string">"删除成功,是否继续删除?(Yes/No)"</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">						<span class="keyword">bool</span> check_continue = stud.isContinue() ;</span><br><span class="line">						<span class="keyword">if</span> (check_continue == <span class="literal">true</span>)&#123;</span><br><span class="line">							<span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入姓名(输入 \"Esc\" 返回主菜单):"</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">							<span class="keyword">continue</span> ;</span><br><span class="line">						&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">							checkReturnMenu = <span class="literal">true</span> ;</span><br><span class="line">							<span class="keyword">break</span> ;</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">break</span> ;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">3</span>:&#123;</span><br><span class="line">				<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">				<span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入姓名(输入 \"Esc\" 返回主菜单):"</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">				<span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; stu.m_name)&#123;</span><br><span class="line">					<span class="keyword">if</span> (stud.checkIsEsc(stu.m_name) == <span class="literal">true</span>)&#123;</span><br><span class="line">						checkReturnMenu = <span class="literal">true</span> ;</span><br><span class="line">						<span class="keyword">break</span> ;</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">					<span class="keyword">int</span> check_succeed = stud.modifyMeassageByName(stu.m_name) ;</span><br><span class="line">					<span class="keyword">if</span> (check_succeed == <span class="number">1</span>)&#123;</span><br><span class="line">						checkReturnMenu = <span class="literal">true</span> ;</span><br><span class="line">						<span class="keyword">break</span> ;</span><br><span class="line">					&#125;<span class="keyword">else</span> <span class="keyword">if</span> (check_succeed == <span class="number">2</span>)&#123;</span><br><span class="line">						<span class="keyword">continue</span> ;</span><br><span class="line">					&#125;<span class="keyword">else</span> <span class="keyword">if</span> (check_succeed == <span class="number">0</span>)&#123;</span><br><span class="line">						<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">						<span class="built_in">cout</span> &lt;&lt; <span class="string">"是否继续修改其余人的信息?(Yes/No)"</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">						<span class="keyword">bool</span> check_continue = stud.isContinue() ;</span><br><span class="line">						<span class="keyword">if</span> (check_continue == <span class="literal">true</span>)&#123;</span><br><span class="line">							<span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入姓名(输入 \"Esc\" 返回主菜单):"</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">							<span class="keyword">continue</span> ;</span><br><span class="line">						&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">							checkReturnMenu = <span class="literal">true</span> ;</span><br><span class="line">							<span class="keyword">break</span> ;</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">break</span> ;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">4</span>:&#123;</span><br><span class="line">				<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">				<span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入专业(若想查看已有专业,请输入 \"Display\",输入 \"Esc\" 返回主菜单):"</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">				<span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; stu.m_profession)&#123;</span><br><span class="line">					<span class="keyword">if</span> (stud.checkIsEsc(stu.m_profession) == <span class="literal">true</span>)&#123;</span><br><span class="line">						checkReturnMenu = <span class="literal">true</span> ;</span><br><span class="line">						<span class="keyword">break</span> ;</span><br><span class="line">					&#125;<span class="keyword">else</span> <span class="keyword">if</span> (stu.m_profession.compare(<span class="string">"Display"</span>) == <span class="number">0</span>)&#123;</span><br><span class="line">						<span class="built_in">cout</span> &lt;&lt; <span class="string">"已有专业信息如下:"</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">						stud.displayAllProfession() ;</span><br><span class="line">						<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="string">"请输入专业(若想查看已有专业,请输入 \"Display\",输入 \"Esc\" 返回主菜单)"</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">						<span class="keyword">continue</span> ;</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">					<span class="keyword">bool</span> check_succeed = stud.searchMeassageByProfession(stu.m_profession) ;</span><br><span class="line">					<span class="keyword">if</span> (check_succeed == <span class="literal">false</span>)&#123;</span><br><span class="line">						<span class="built_in">cout</span> &lt;&lt; <span class="string">"未找到此专业的信息,请检查后重新输入(若想查看已有专业,请输入 \"Display\",输入 \"Esc\" 返回主菜单)"</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">						<span class="keyword">continue</span> ;</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">					<span class="built_in">cout</span> &lt;&lt; <span class="string">"查询成功,是否继续查询?(Yes/No)"</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">					<span class="keyword">bool</span> check_continue = stud.isContinue() ;</span><br><span class="line">					<span class="keyword">if</span> (check_continue == <span class="literal">true</span>)&#123;</span><br><span class="line">						<span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入专业(若想查看已有专业,请输入 \"Display\",输入 \"Esc\" 返回主菜单):"</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">						<span class="keyword">continue</span> ;</span><br><span class="line">					&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">						checkReturnMenu = <span class="literal">true</span> ;</span><br><span class="line">						<span class="keyword">break</span> ;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">break</span> ;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">5</span>:&#123;</span><br><span class="line">				<span class="keyword">if</span> (stud.checkMcount() == <span class="literal">true</span>)&#123;</span><br><span class="line">					<span class="built_in">cout</span> &lt;&lt; <span class="string">"学生信息管理库已空!"</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">					<span class="keyword">break</span> ;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="built_in">cout</span> &lt;&lt; <span class="string">"信息如下:"</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">				stud.displayMenu(<span class="number">4</span>) ;</span><br><span class="line">				stud.sortByID() ;</span><br><span class="line">				stud.displayAllMeassage() ;</span><br><span class="line">				<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">				system(<span class="string">"pause"</span>) ;</span><br><span class="line">				checkReturnMenu = <span class="literal">true</span> ;</span><br><span class="line">				<span class="keyword">break</span> ;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">6</span>:&#123;</span><br><span class="line">				stud.displayMenu(<span class="number">6</span>) ;</span><br><span class="line">				<span class="keyword">int</span> select ;</span><br><span class="line">				<span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; select)&#123;</span><br><span class="line">					<span class="keyword">bool</span> checkReturnPreviousMenu = <span class="literal">false</span> ;</span><br><span class="line">					<span class="keyword">switch</span> (select)&#123;</span><br><span class="line">						<span class="keyword">case</span> <span class="number">1</span>:&#123;</span><br><span class="line">							stud.displayMenu(<span class="number">7</span>) ;</span><br><span class="line">							<span class="keyword">int</span> way ;</span><br><span class="line">							<span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; way)&#123;</span><br><span class="line">								<span class="keyword">int</span> check_sortSucceed = stud.extendedSort(way) ;</span><br><span class="line">								<span class="keyword">if</span> (check_sortSucceed == <span class="number">0</span>)&#123;</span><br><span class="line">									<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="string">"排序成功,是否继续选择其余排序方式?(Yes/No)"</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">									<span class="built_in">string</span> str_continue ;</span><br><span class="line">									<span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; str_continue)&#123;</span><br><span class="line">										<span class="keyword">if</span> (str_continue.compare(<span class="string">"Yes"</span>) == <span class="number">0</span>)&#123;</span><br><span class="line">											stud.displayMenu(<span class="number">7</span>) ;</span><br><span class="line">											<span class="keyword">break</span> ;</span><br><span class="line">										&#125;<span class="keyword">else</span> <span class="keyword">if</span> (str_continue.compare(<span class="string">"No"</span>) == <span class="number">0</span>)&#123;</span><br><span class="line">											checkReturnPreviousMenu = <span class="literal">true</span> ;</span><br><span class="line">											<span class="keyword">break</span> ;</span><br><span class="line">										&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">											<span class="built_in">cout</span> &lt;&lt; <span class="string">"输入错误，请重新输入(Yes/No)"</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">											<span class="keyword">continue</span> ;</span><br><span class="line">										&#125;</span><br><span class="line">									&#125;</span><br><span class="line">								&#125;<span class="keyword">else</span> <span class="keyword">if</span> (check_sortSucceed == <span class="number">2</span>)&#123;</span><br><span class="line">									<span class="built_in">cout</span> &lt;&lt; <span class="string">"输入错误，请重新输入"</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">									<span class="keyword">continue</span> ;</span><br><span class="line">								&#125;<span class="keyword">else</span> <span class="keyword">if</span> (check_sortSucceed == <span class="number">1</span>)&#123;</span><br><span class="line">									checkReturnPreviousMenu = <span class="literal">true</span> ;</span><br><span class="line">									<span class="keyword">break</span> ;</span><br><span class="line">								&#125;</span><br><span class="line">								<span class="keyword">if</span> (checkReturnPreviousMenu == <span class="literal">true</span>)&#123;</span><br><span class="line">									<span class="keyword">break</span> ;</span><br><span class="line">								&#125;</span><br><span class="line">							&#125;</span><br><span class="line">							stud.sortByID() ;</span><br><span class="line">							<span class="keyword">break</span> ;</span><br><span class="line">						&#125;</span><br><span class="line">						<span class="keyword">case</span> <span class="number">2</span>:&#123;</span><br><span class="line">							stud.displayMenu(<span class="number">8</span>) ;</span><br><span class="line">							<span class="keyword">int</span> way ;</span><br><span class="line">							<span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; way)&#123;</span><br><span class="line">								<span class="keyword">int</span> check_deleteSucceed = stud.extendedDelete(way) ;</span><br><span class="line">								<span class="keyword">if</span> (check_deleteSucceed == <span class="number">0</span>)&#123;</span><br><span class="line">									<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="string">"删除成功,是否继续选择其余删除方式?(Yes/No)"</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">									<span class="built_in">string</span> str_continue ;</span><br><span class="line">									<span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; str_continue)&#123;</span><br><span class="line">										<span class="keyword">if</span> (str_continue.compare(<span class="string">"Yes"</span>) == <span class="number">0</span>)&#123;</span><br><span class="line">											stud.displayMenu(<span class="number">8</span>) ;</span><br><span class="line">											<span class="keyword">break</span> ;</span><br><span class="line">										&#125;<span class="keyword">else</span> <span class="keyword">if</span> (str_continue.compare(<span class="string">"No"</span>) == <span class="number">0</span>)&#123;</span><br><span class="line">											checkReturnPreviousMenu = <span class="literal">true</span> ;</span><br><span class="line">											<span class="keyword">break</span> ;</span><br><span class="line">										&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">											<span class="built_in">cout</span> &lt;&lt; <span class="string">"输入错误，请重新输入(Yes/No)"</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">											<span class="keyword">continue</span> ;</span><br><span class="line">										&#125;</span><br><span class="line">									&#125;</span><br><span class="line">								&#125;<span class="keyword">else</span> <span class="keyword">if</span> (check_deleteSucceed == <span class="number">2</span>)&#123;</span><br><span class="line">									<span class="built_in">cout</span> &lt;&lt; <span class="string">"输入错误，请重新输入"</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">									<span class="keyword">continue</span> ;</span><br><span class="line">								&#125;<span class="keyword">else</span> <span class="keyword">if</span> (check_deleteSucceed == <span class="number">1</span>)&#123;</span><br><span class="line">									checkReturnPreviousMenu =  <span class="literal">true</span> ;</span><br><span class="line">									<span class="keyword">break</span> ;</span><br><span class="line">								&#125;</span><br><span class="line">								<span class="keyword">if</span> (checkReturnPreviousMenu == <span class="literal">true</span>)&#123;</span><br><span class="line">									<span class="keyword">break</span> ;</span><br><span class="line">								&#125;</span><br><span class="line">							&#125;</span><br><span class="line">							<span class="keyword">break</span> ;</span><br><span class="line">						&#125;</span><br><span class="line">						<span class="keyword">case</span> <span class="number">3</span>:&#123;</span><br><span class="line">							stud.displayMenu(<span class="number">9</span>) ;</span><br><span class="line">							<span class="keyword">int</span> way ;</span><br><span class="line">							<span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; way)&#123;</span><br><span class="line">								<span class="keyword">int</span> check_querySecceed = stud.extendedQuery(way) ;</span><br><span class="line">								<span class="keyword">if</span> (check_querySecceed == <span class="number">0</span>)&#123;</span><br><span class="line">									<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="string">"查询成功,是否继续选择其余查询方式?(Yes/No)"</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">									<span class="built_in">string</span> str_continue ;</span><br><span class="line">									<span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; str_continue)&#123;</span><br><span class="line">										<span class="keyword">if</span> (str_continue.compare(<span class="string">"Yes"</span>) == <span class="number">0</span>)&#123;</span><br><span class="line">											stud.displayMenu(<span class="number">9</span>) ;</span><br><span class="line">											<span class="keyword">break</span> ;</span><br><span class="line">										&#125;<span class="keyword">else</span> <span class="keyword">if</span> (str_continue.compare(<span class="string">"No"</span>) == <span class="number">0</span>)&#123;</span><br><span class="line">											checkReturnPreviousMenu = <span class="literal">true</span> ;</span><br><span class="line">											<span class="keyword">break</span> ;</span><br><span class="line">										&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">											<span class="built_in">cout</span> &lt;&lt; <span class="string">"输入错误，请重新输入(Yes/No)"</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">											<span class="keyword">continue</span> ;</span><br><span class="line">										&#125;</span><br><span class="line">									&#125;</span><br><span class="line">								&#125;<span class="keyword">else</span> <span class="keyword">if</span> (check_querySecceed == <span class="number">2</span>)&#123;</span><br><span class="line">									<span class="built_in">cout</span> &lt;&lt; <span class="string">"输入错误，请重新输入"</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">									<span class="keyword">continue</span> ;</span><br><span class="line">								&#125;<span class="keyword">else</span> <span class="keyword">if</span> (check_querySecceed == <span class="number">1</span>)&#123;</span><br><span class="line">									checkReturnPreviousMenu =  <span class="literal">true</span> ;</span><br><span class="line">									<span class="keyword">break</span> ;</span><br><span class="line">								&#125;</span><br><span class="line">								<span class="keyword">if</span> (checkReturnPreviousMenu == <span class="literal">true</span>)&#123;</span><br><span class="line">									<span class="keyword">break</span> ;</span><br><span class="line">								&#125;</span><br><span class="line">							&#125;</span><br><span class="line">							<span class="keyword">break</span> ;</span><br><span class="line">						&#125;</span><br><span class="line">						<span class="keyword">case</span> <span class="number">4</span>:&#123;</span><br><span class="line">							checkReturnMenu = <span class="literal">true</span> ;</span><br><span class="line">							<span class="keyword">break</span> ;</span><br><span class="line">						&#125;</span><br><span class="line">						<span class="keyword">default</span>:</span><br><span class="line">							<span class="built_in">cout</span> &lt;&lt; <span class="string">"输入错误，请重新输入"</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">if</span> (checkReturnPreviousMenu == <span class="literal">true</span>)&#123;</span><br><span class="line">						stud.displayMenu(<span class="number">6</span>) ;</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">if</span> (checkReturnMenu == <span class="literal">true</span>)&#123;</span><br><span class="line">						<span class="keyword">break</span> ;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				checkReturnMenu = <span class="literal">true</span> ;</span><br><span class="line">				<span class="keyword">break</span> ;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">7</span>:&#123;</span><br><span class="line">				stud.displayMenu(<span class="number">-1</span>) ;</span><br><span class="line">				<span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">default</span> :</span><br><span class="line">				<span class="built_in">cout</span> &lt;&lt; <span class="string">"输入错误，请重新输入"</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (checkReturnMenu == <span class="literal">true</span>)&#123;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">"即将返回主菜单"</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">			Sleep(<span class="number">1000</span>) ;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">"加载中,请稍候…………"</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">			Sleep(<span class="number">1500</span>) ;</span><br><span class="line">			stud.saveInsideTxt() ;</span><br><span class="line">			stud.displayMenu(<span class="number">1</span>) ;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">map&lt;string , int&gt; -&gt; duplicated profession</span></span><br><span class="line"><span class="comment">string -&gt; profession</span></span><br><span class="line"><span class="comment">int -&gt; time</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>课程设计</tag>
      </tags>
  </entry>
  <entry>
    <title>BUG记录本</title>
    <url>/2019/03/21/BUG%E8%AE%B0%E5%BD%95%E6%9C%AC/</url>
    <content><![CDATA[<p>此段代码想对学生类以 ID 进行排序写了一个 CMP 函数，运行时在 sort 函数出现 “required from here” 错误(已将 CMP 函数重新写在类外，作为一个函数而非类的成员函数解决此问题)，但仍然不知道出现此问题的原因，应该是对类的认识不足，稍微记录下。<a id="more"></a><br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span> ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxNumberOfStudent = <span class="number">100005</span> ;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">studentMeassage</span>&#123;</span></span><br><span class="line">	<span class="built_in">string</span> m_id ;</span><br><span class="line">    <span class="built_in">string</span> m_name ;</span><br><span class="line">    <span class="built_in">string</span> m_sex ;</span><br><span class="line">    <span class="keyword">int</span> m_age ;</span><br><span class="line">    <span class="built_in">string</span> m_profession ;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="keyword">int</span> m_count ;</span><br><span class="line">	studentMeassage data[maxNumberOfStudent] ;</span><br><span class="line">	<span class="comment">// vector&lt;studentMeassage&gt; data;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	Student();</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">enterMeassage</span><span class="params">(studentMeassage newinfo)</span> </span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">insertMeassage</span><span class="params">(studentMeassage newinfo)</span> </span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">deleteMeassageByName</span><span class="params">(<span class="built_in">string</span> name)</span> </span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">modifyMeassageByName</span><span class="params">(<span class="built_in">string</span> name)</span> </span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">searchMeassageByProfession</span><span class="params">(<span class="built_in">string</span> profession)</span> </span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">displayMainMenu</span><span class="params">()</span> </span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">displayMeassage</span><span class="params">(<span class="keyword">int</span> index)</span> </span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">displayAllMeassage</span><span class="params">()</span> </span>;</span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">displayMeassageByID</span><span class="params">(<span class="keyword">int</span> index , <span class="built_in">string</span> id , <span class="keyword">bool</span> select_is_called)</span> </span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">sortByID</span><span class="params">()</span> </span>;</span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">cmpByID</span><span class="params">(studentMeassage data_one , studentMeassage data_two)</span> </span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">saveInsideTxt</span><span class="params">()</span> </span>;</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	extended function</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Student::displayAllMeassage()&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; m_count ; i ++)&#123;</span><br><span class="line">		displayMeassage(i) ;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> Student::cmpByID(studentMeassage data_one , studentMeassage data_two)&#123;</span><br><span class="line">	<span class="keyword">if</span> (data_one.m_id.length() == data_two.m_id.length())&#123;</span><br><span class="line">		<span class="keyword">return</span> data_one.m_id &lt; data_two.m_id ;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> data_one.m_id.length() &lt; data_two.m_id.length() ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Student::sortByID()&#123;</span><br><span class="line">	<span class="comment">//此处 cmpByID 处出现 "requird from here" 错误</span></span><br><span class="line">	sort(data , data + m_count , cmpByID) ; </span><br><span class="line">	<span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>一些暂未解决的问题</category>
      </categories>
      <tags>
        <tag>真的是暂时吗？！</tag>
      </tags>
  </entry>
  <entry>
    <title>数据分析笔记(仍需更新)</title>
    <url>/2019/01/20/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E7%AC%94%E8%AE%B0(%E4%BB%8D%E9%9C%80%E6%9B%B4%E6%96%B0)/</url>
    <content><![CDATA[<p>根据极客时间陈旸老师的《数据分析45讲》所整理的笔记。<a id="more"></a></p>
<h1 id="Python基础语法"><a href="#Python基础语法" class="headerlink" title="Python基础语法"></a>Python基础语法</h1><p>版本为 Python3.6。</p>
<h2 id="输入与输出"><a href="#输入与输出" class="headerlink" title="输入与输出"></a>输入与输出</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name = input(<span class="string">"What's your name?"</span>)</span><br><span class="line">sum = <span class="number">100</span> + <span class="number">100</span></span><br><span class="line">print(<span class="string">'hello,%s'</span> % name)</span><br><span class="line">print(<span class="string">'sum = %d'</span> % sum)</span><br></pre></td></tr></table></figure>
<h2 id="判断语句"><a href="#判断语句" class="headerlink" title="判断语句"></a>判断语句</h2><p><strong>注意冒号</strong><br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> score &gt;= <span class="number">90</span>:</span><br><span class="line">    print(<span class="string">'Excellent'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">if</span> score &lt; <span class="number">60</span>:</span><br><span class="line">        print(<span class="string">'Fail'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'Good Job'</span>)</span><br></pre></td></tr></table></figure></p>
<p><strong>代码缩进在 Python 中是一中语法，相同层次的代码一定要采用相同层次的缩进，比如同是空格或TAB，不能一会空格一会TAB</strong></p>
<h2 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h2><p><strong>注意冒号</strong></p>
<h3 id="for-循环"><a href="#for-循环" class="headerlink" title="for 循环"></a>for 循环</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sum = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> number <span class="keyword">in</span> range(<span class="number">11</span>):</span><br><span class="line">    sum = sum + number</span><br><span class="line">print(sum)</span><br></pre></td></tr></table></figure>
<h3 id="while-循环"><a href="#while-循环" class="headerlink" title="while 循环"></a>while 循环</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sum = <span class="number">0</span></span><br><span class="line">number = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> number &lt; <span class="number">11</span>:</span><br><span class="line">    sum = sum + number</span><br><span class="line">    number = number + <span class="number">1</span></span><br><span class="line">print(sum)</span><br></pre></td></tr></table></figure>
<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="列表"><a href="#列表" class="headerlink" title="列表[]"></a>列表[]</h3><p>列表是最常用的Python数据类型，它可以作为一个方括号内的逗号分隔值出现。<br>列表的数据项不需要具有相同的类型。<br>创建一个列表，只要把逗号分隔的不同的数据项使用方括号括起来即可。<br>列表索引从0开始。<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">lists = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</span><br><span class="line">lists.append(<span class="string">'d'</span>)</span><br><span class="line">print(lists)</span><br><span class="line">print(len(lists))</span><br><span class="line">lists.insert(<span class="number">0</span>, <span class="string">'mm'</span>)</span><br><span class="line">lists.pop()</span><br><span class="line">print(lists)</span><br></pre></td></tr></table></figure></p>
<h4 id="常用技巧与方法"><a href="#常用技巧与方法" class="headerlink" title="常用技巧与方法"></a>常用技巧与方法</h4><ol>
<li>常用技巧<br>更新列表元素  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">lists[<span class="number">0</span>] = <span class="number">1</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>删除列表元素<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">del</span> lists[<span class="number">0</span>]</span><br></pre></td></tr></table></figure></p>
<p>嵌套列表<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]  </span><br><span class="line">n = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>] </span><br><span class="line">x = [a, n]    </span><br><span class="line">print(x)    </span><br><span class="line">print(x[<span class="number">0</span>])   </span><br><span class="line">print(x[<span class="number">0</span>][<span class="number">1</span>])</span><br></pre></td></tr></table></figure></p>
<ol start="2">
<li>常用方法<br>获取列表元素个数<br>len(lists)<br>返回列表元素最大最小值<br>max(lists)<br>min(lists)<br>在列表末尾添加新的对象<br>lists.append(elm)<br>统计某个元素在列表出现的次数<br>lists.count(elm)<br>在某索引插入某元素<br>lists.insert(idx,elm)  <h3 id="元组"><a href="#元组" class="headerlink" title="元组()"></a>元组()</h3>元组 tuple 和 list 非常类似，但是 tuple <strong>一旦初始化就不能修改</strong>。因为不能修改所以没有 append(),insert() 这样的方法，可以像访问数组一样进行访问，比如 tuples[0], 但不能赋值<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tuples = (<span class="string">'tupleA'</span>,<span class="string">'tupleB'</span>)</span><br><span class="line">print(tuples[<span class="number">0</span>])</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="字典"><a href="#字典" class="headerlink" title="字典{}"></a>字典{}</h3><p>字典其实就是{key, value}，字典也有增删改查。增加字典的元素相当于赋值，比如 score[‘ZhaoYun’] = 98, 删除一个元素使用 pop ，查询使用 get，如果查询的值不存在，我们也可以给一个默认值，比如 score.get(‘yase’, 99)。<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">score = &#123;<span class="string">'guanyu'</span>: <span class="number">95</span>, <span class="string">'zhangfei'</span>: <span class="number">96</span>&#125;</span><br><span class="line">score[<span class="string">'zhaoyun'</span>] = <span class="number">98</span></span><br><span class="line">print(score)</span><br><span class="line">score.pop(<span class="string">'zhangfei'</span>)</span><br><span class="line">print(<span class="string">'guanyu'</span> <span class="keyword">in</span> score)</span><br><span class="line">print(score.get(<span class="string">'guanyu'</span>))</span><br><span class="line">print(score.get(<span class="string">'yase'</span>, <span class="number">99</span>))</span><br></pre></td></tr></table></figure></p>
<h3 id="集合-set"><a href="#集合-set" class="headerlink" title="集合 set"></a>集合 set</h3><p>集合 set 和字典 dictory 类似，不过它只存储 key， 不存储 value。 增加使用 add， 删除使用 remove， 查询是否在这个集合里使用 in。<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = set([<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>])</span><br><span class="line">s.add(<span class="string">'d'</span>)</span><br><span class="line">s.remove(<span class="string">'b'</span>)</span><br><span class="line">print(s)</span><br><span class="line">print(<span class="string">'c'</span> <span class="keyword">in</span> s)</span><br></pre></td></tr></table></figure></p>
<h1 id="NumPy库"><a href="#NumPy库" class="headerlink" title="NumPy库"></a>NumPy库</h1><h2 id="ndarray对象"><a href="#ndarray对象" class="headerlink" title="ndarray对象"></a>ndarray对象</h2><p>ndarray 实际上是多维数组，在 NumPy 数组中，维数称为秩(rank)，一维数组的 Rank 为1，二维为2……在 NumPy 中，每一个线性的数组称为一个轴(axes),秩描述了轴的数量。</p>
<h2 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a>创建数组</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">b = np.array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]])</span><br><span class="line">b[<span class="number">1</span>, <span class="number">1</span>] = <span class="number">10</span></span><br><span class="line">print(a.shape)</span><br><span class="line">print(b.shape)</span><br><span class="line">print(a.dtype)</span><br><span class="line">print(b)</span><br></pre></td></tr></table></figure>
<p>a 为一维数组，b 为二维数组(嵌套构成二维数组)。通过函数 shape 获得数组的大小，通过 dtype 获得元素的属性。如若需要修改元素，直接赋值即可(下标从0开始)。</p>
<h2 id="结构数组"><a href="#结构数组" class="headerlink" title="结构数组"></a>结构数组</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">persontype = np.dtype(&#123;</span><br><span class="line">    <span class="string">'names'</span>: [<span class="string">'name'</span>, <span class="string">'age'</span>, <span class="string">'chinese'</span>, <span class="string">'math'</span>, <span class="string">'english'</span>],</span><br><span class="line">    <span class="string">'formats'</span>: [<span class="string">'S32'</span>, <span class="string">'i'</span>, <span class="string">'i'</span>, <span class="string">'i'</span>, <span class="string">'f'</span>]</span><br><span class="line">&#125;)</span><br><span class="line">peoples = np.array(</span><br><span class="line">    [(<span class="string">"ZhangFei"</span>, <span class="number">32</span>, <span class="number">75</span>, <span class="number">100</span>, <span class="number">90</span>),</span><br><span class="line">     (<span class="string">"GuanYu"</span>, <span class="number">24</span>, <span class="number">85</span>, <span class="number">96</span>, <span class="number">88.5</span>),</span><br><span class="line">     (<span class="string">"ZhaoYun"</span>, <span class="number">28</span>, <span class="number">85</span>, <span class="number">92</span>, <span class="number">96.5</span>),</span><br><span class="line">     (<span class="string">"HuangZhong"</span>, <span class="number">29</span>, <span class="number">65</span>, <span class="number">85</span>, <span class="number">100</span>)], dtype=persontype)</span><br><span class="line">ages = peoples[:][<span class="string">'age'</span>]</span><br><span class="line">chineses = peoples[:][<span class="string">'chinese'</span>]</span><br><span class="line">maths = peoples[:][<span class="string">'math'</span>]</span><br><span class="line">englishs = peoples[:][<span class="string">'english'</span>]</span><br><span class="line">print(np.mean(ages))</span><br><span class="line">print(np.mean(chineses))</span><br><span class="line">print(np.mean(maths))</span><br><span class="line">print(np.mean(englishs))</span><br></pre></td></tr></table></figure>
<p>其中在 persontype formats 字段中的 S32 表示 32个字节的字符串类型， i 表示 32位的整数类型， f 表示 32位的单精度浮点数类型。<br>首先创建一个 dtype 对象 persontype，通过字典描述字段，names 定义结构中的字段名， formats 定义每个字段的类型。之后调用 array 函数创建结构数组，传入参数即可得到结构数组。<br>mean 函数可以计算平均值。</p>
]]></content>
      <categories>
        <category>数据分析</category>
      </categories>
      <tags>
        <tag>数据分析</tag>
      </tags>
  </entry>
  <entry>
    <title>HDU 1575 Tr A</title>
    <url>/2018/11/30/HDU-1575-Tr-A/</url>
    <content><![CDATA[<h2 id="Tr-A"><a href="#Tr-A" class="headerlink" title="Tr A"></a>Tr A</h2><h3 id="Time-Limit-1000-1000-MS-Java-Others-Memory-Limit-32768-32768-K-Java-Others"><a href="#Time-Limit-1000-1000-MS-Java-Others-Memory-Limit-32768-32768-K-Java-Others" class="headerlink" title="**Time Limit: 1000/1000 MS (Java/Others)    Memory Limit: 32768/32768 K (Java/Others)"></a>**Time Limit: 1000/1000 MS (Java/Others)    Memory Limit: 32768/32768 K (Java/Others)</h3><h3 id="Total-Submission-s-7631-Accepted-Submission-s-5575"><a href="#Total-Submission-s-7631-Accepted-Submission-s-5575" class="headerlink" title="Total Submission(s): 7631    Accepted Submission(s): 5575**"></a>Total Submission(s): 7631    Accepted Submission(s): 5575**</h3><h2 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h2><p>A为一个方阵，则Tr A表示A的迹（就是主对角线上各项的和），现要求Tr(A^k)%9973。</p>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>数据的第一行是一个T，表示有T组数据。每组数据的第一行有n(2 &lt;= n &lt;= 10)和k(2 &lt;= k &lt; 10^9)两个数据。接下来有n行，每行有n个数据，每个数据的范围是[0,9]，表示方阵A的内容。</p>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>对应每组数据，输出Tr(A^k)%9973。</p>
<h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><p>2<br>2 2<br>1 0<br>0 1<br>3 99999999<br>1 2 3<br>4 5 6<br>7 8 9 </p>
<h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><p>2 2686</p>
<h2 id="Author"><a href="#Author" class="headerlink" title="Author"></a>Author</h2><p> xhd</p>
<h2 id="Source"><a href="#Source" class="headerlink" title="Source"></a>Source</h2><p><a href="http://acm.hdu.edu.cn/search.php?field=problem&amp;key=HDU+2007-1+Programming+Contest&amp;source=1&amp;searchmode=source" target="_blank" rel="noopener">HDU 2007-1 Programming Contest</a></p>
<h2 id="Recommend"><a href="#Recommend" class="headerlink" title="Recommend"></a>Recommend</h2><p> linle</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>矩阵快速幂模板题。代码如下：<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span> ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ll MOD = <span class="number">9973</span> ;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">15</span> ;</span><br><span class="line">ll n , k ;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">matrix</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> m[maxn][maxn] ;</span><br><span class="line">&#125;mat ;</span><br><span class="line"></span><br><span class="line">matrix <span class="keyword">operator</span> *(matrix a , matrix b)&#123;</span><br><span class="line">    matrix res ;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; n ; i ++ )&#123;</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> j = <span class="number">0</span> ; j &lt; n ; j ++ )&#123;</span><br><span class="line">            ll temp = <span class="number">0</span> ;</span><br><span class="line">            <span class="keyword">for</span> ( <span class="keyword">int</span> k = <span class="number">0</span> ; k &lt; n ; k ++ )&#123;</span><br><span class="line">                temp += ((a.m[i][k] % MOD) * (b.m[k][j] % MOD)) % MOD ;</span><br><span class="line">            &#125;</span><br><span class="line">            res.m[i][j] = temp % MOD ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; n ; i ++ )&#123;</span><br><span class="line">        mat.m[i][i] = <span class="number">1</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">matrix <span class="title">quick_pow</span><span class="params">(matrix a, ll b)</span></span>&#123;</span><br><span class="line">    matrix ans = mat ;</span><br><span class="line">    <span class="keyword">while</span> (b)&#123;</span><br><span class="line">        <span class="keyword">if</span> (b &amp; <span class="number">1</span>)&#123;</span><br><span class="line">            ans = ans * a ;</span><br><span class="line">        &#125;</span><br><span class="line">        a = a * a ;</span><br><span class="line">        b &gt;&gt;= <span class="number">1</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">tr_ans</span><span class="params">(matrix a)</span></span>&#123;</span><br><span class="line">    ll sum = <span class="number">0</span> ;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; n ; i ++ )&#123;</span><br><span class="line">        sum = (sum % MOD + a.m[i][i] % MOD) % MOD ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t ;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; t ;</span><br><span class="line">    <span class="keyword">while</span> (t --)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k ;</span><br><span class="line">        init() ;</span><br><span class="line">        matrix a ;</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; n ; i ++ )&#123;</span><br><span class="line">            <span class="keyword">for</span> ( <span class="keyword">int</span> j = <span class="number">0</span> ; j &lt; n ; j ++ )&#123;</span><br><span class="line">                <span class="built_in">cin</span> &gt;&gt; a.m[i][j] ;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        a = quick_pow(a , k) ;</span><br><span class="line"><span class="comment">//        for ( int i = 0 ; i &lt; n ; i ++ )&#123;</span></span><br><span class="line"><span class="comment">//            for ( int j = 0 ; j &lt; n ; j ++ )&#123;</span></span><br><span class="line"><span class="comment">//                cout &lt;&lt; a.m[i][j] &lt;&lt; " " ;</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//            cout &lt;&lt; endl ;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; tr_ans(a) &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Online Judge</category>
      </categories>
      <tags>
        <tag>快速幂</tag>
        <tag>HDU</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces Round 450 Div2 B.Jzzhu and Sequences</title>
    <url>/2018/11/29/Codeforces-Round-450-Div2-B-Jzzhu-and-Sequences/</url>
    <content><![CDATA[<h2 id="B-Jzzhu-and-Sequences"><a href="#B-Jzzhu-and-Sequences" class="headerlink" title="B. Jzzhu and Sequences"></a><center>B. Jzzhu and Sequences</center></h2><center><br>time limit per test<br>1 second<br>memory limit per test 256 megabytes<br>input standard input<br>output standard output<br></center>

<p>Jzzhu has invented a kind of sequences, they meet the following property:</p>
<center class="tex-equation"><img src="https://codeforces.com/predownloaded/55/53/5553125ed3b40d54293e6c3b9dac2692d9f2a964.png" alt=""></center>

<p>You are given _x_ and _y_, please calculate _f_<sub class="lower-index">_n_</sub> modulo 1000000007 (10<sup class="upper-index">9</sup> + 7).</p>
<p> Input</p>
<p>The first line contains two integers _x_ and _y_ (|_x_|, |_y_| ≤ 10<sup class="upper-index">9</sup>). The second line contains a single integer _n_ (1 ≤ _n_ ≤ 2·10<sup class="upper-index">9</sup>).</p>
<p> Output</p>
<p>Output a single integer representing _f_<sub class="lower-index">_n_</sub> modulo 1000000007 (10<sup class="upper-index">9</sup> + 7).</p>
<h2 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h2><h3 id="input"><a href="#input" class="headerlink" title="input"></a>input</h3><p>2 3<br>3  </p>
<h3 id="output"><a href="#output" class="headerlink" title="output"></a>output</h3><p>1</p>
<h3 id="input-1"><a href="#input-1" class="headerlink" title="input"></a>input</h3><p>0 -1<br>2</p>
<h3 id="output-1"><a href="#output-1" class="headerlink" title="output"></a>output</h3><p>1000000006</p>
<h3 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h3><p>In the first sample, _f_<sub class="lower-index">2</sub> = _f_<sub class="lower-index">1</sub> + _f_<sub class="lower-index">3</sub>, 3 = 2 + _f_<sub class="lower-index">3</sub>, _f_<sub class="lower-index">3</sub> = 1.</p>
<p>In the second sample, _f_<sub class="lower-index">2</sub> =  - 1;  - 1 modulo (10<sup class="upper-index">9</sup> + 7) equals (10<sup class="upper-index">9</sup> + 6).</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>使用矩阵快速幂，构造2*2矩阵从左到右从上到下为 1，1，-1，0。代码如下：<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span> ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ll MOD = <span class="number">1e9</span>+<span class="number">7</span> ;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2</span> ;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">matrix</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> m[maxn][maxn] ;</span><br><span class="line">&#125;mat ;</span><br><span class="line"></span><br><span class="line">matrix <span class="keyword">operator</span> *(matrix a , matrix b)&#123;</span><br><span class="line">    matrix res ;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; maxn ; i ++ )&#123;</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> j = <span class="number">0</span> ; j &lt; maxn ; j ++ )&#123;</span><br><span class="line">            ll temp = <span class="number">0</span> ;</span><br><span class="line">            <span class="keyword">for</span> ( <span class="keyword">int</span> k = <span class="number">0</span> ; k &lt; maxn ; k ++ )&#123;</span><br><span class="line">                temp += (a.m[i][k] % MOD * b.m[k][j] % MOD) % MOD ;</span><br><span class="line">            &#125;</span><br><span class="line">            res.m[i][j] = temp % MOD ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; maxn ; i ++ )&#123;</span><br><span class="line">        mat.m[i][i] = <span class="number">1</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">matrix <span class="title">quick_pow</span><span class="params">(matrix a, ll n)</span></span>&#123;</span><br><span class="line">    matrix ans = mat ;</span><br><span class="line">    <span class="keyword">while</span> (n)&#123;</span><br><span class="line">        <span class="keyword">if</span> (n &amp; <span class="number">1</span>)&#123;</span><br><span class="line">            ans = ans * a ;</span><br><span class="line">        &#125;</span><br><span class="line">        a = a * a ;</span><br><span class="line">        n &gt;&gt;= <span class="number">1</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ll x , y , n ;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y &gt;&gt; n )&#123;</span><br><span class="line">        <span class="keyword">if</span> ( n == <span class="number">1</span> )&#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; (x % MOD + MOD) % MOD &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> ( n == <span class="number">2</span> )&#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; (y % MOD + MOD) % MOD &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            init() ;</span><br><span class="line">            matrix temp ;</span><br><span class="line">            temp.m[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span> , temp.m[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">1</span> ;</span><br><span class="line">            temp.m[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">-1</span> , temp.m[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">0</span> ;</span><br><span class="line">            temp = quick_pow(temp , n - <span class="number">2</span>) ;</span><br><span class="line">            matrix ans ;</span><br><span class="line">            ans.m[<span class="number">0</span>][<span class="number">0</span>] = y , ans.m[<span class="number">0</span>][<span class="number">1</span>] = x ;</span><br><span class="line">            ans = ans * temp ;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; (ans.m[<span class="number">0</span>][<span class="number">0</span>] % MOD + MOD) % MOD &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Online Judge</category>
      </categories>
      <tags>
        <tag>快速幂</tag>
        <tag>CodeForces</tag>
      </tags>
  </entry>
  <entry>
    <title>51Nod 1113 矩阵快速幂</title>
    <url>/2018/11/26/51Nod-1113-%E7%9F%A9%E9%98%B5%E5%BF%AB%E9%80%9F%E5%B9%82/</url>
    <content><![CDATA[<h2 id="1113-矩阵快速幂"><a href="#1113-矩阵快速幂" class="headerlink" title="1113 矩阵快速幂"></a>1113 矩阵快速幂</h2><ol>
<li>3 秒 </li>
<li>131,072 KB</li>
<li>40 分</li>
<li><a href="https://www.51nod.com/Challenge/ProblemList.html#level=5" target="_blank" rel="noopener">4 级题</a></li>
</ol>
<p>给出一个N * N的矩阵，其中的元素均为正整数。求这个矩阵的M次方。由于M次方的计算结果太大，只需要输出每个元素Mod (10^9 + 7）的结果。</p>
<h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><p>第1行：2个数N和M，中间用空格分隔。N为矩阵的大小，M为M次方。(2 &lt;= N &lt;= 100, 1 &lt;= M &lt;= 10^9)<br>第2 - N + 1行：每行N个数，对应N * N矩阵中的1行。(0 &lt;= N[i] &lt;= 10^9)</p>
<h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><p>共N行，每行N个数，对应M次方Mod (10^9 + 7)的结果。</p>
<h2 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例"></a>输入样例</h2><p>2 3<br>1 1<br>1 1 </p>
<h2 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例"></a>输出样例</h2><p>4 4<br>4 4  </p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>网上扒的矩阵快速幂模版…近期学习下原理…代码如下：<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span> ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">1e9</span>+<span class="number">7</span> ;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">105</span> ;</span><br><span class="line">ll n , m ;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">matrix_</span>&#123;</span></span><br><span class="line">    ll mat[maxn][maxn] ;</span><br><span class="line">&#125;matrix ;</span><br><span class="line"></span><br><span class="line">matrix_ <span class="keyword">operator</span> * (matrix_ a , matrix_ b)&#123;</span><br><span class="line">    matrix_ ret ;</span><br><span class="line">    ll temp = <span class="number">0</span> ;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; n ; i ++ )&#123;</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> j = <span class="number">0</span> ; j &lt; n ; j ++ )&#123;</span><br><span class="line">            temp = <span class="number">0</span> ;</span><br><span class="line">            <span class="keyword">for</span> ( <span class="keyword">int</span> k = <span class="number">0</span> ; k &lt; n ; k ++ )&#123;</span><br><span class="line">                temp += ((a.mat[i][k] % MOD) * (b.mat[k][j] % MOD)) % MOD  ;</span><br><span class="line">            &#125;</span><br><span class="line">            ret.mat[i][j] = temp % MOD ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; maxn ; i ++ )&#123;</span><br><span class="line">        matrix.mat[i][i] = <span class="number">1</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">matrix_ <span class="title">quick_pow</span><span class="params">(matrix_ a , ll n)</span></span>&#123;</span><br><span class="line">    matrix_ ret = matrix ;</span><br><span class="line">    <span class="keyword">while</span> (n)&#123;</span><br><span class="line">        <span class="keyword">if</span> (n &amp; <span class="number">1</span>)&#123;</span><br><span class="line">            ret = ret * a ;</span><br><span class="line">        &#125;</span><br><span class="line">        a = a * a ;</span><br><span class="line">        n &gt;&gt;= <span class="number">1</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m )&#123;</span><br><span class="line">        init() ;</span><br><span class="line">        matrix_ ans ;</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; n ; i ++ )&#123;</span><br><span class="line">            <span class="keyword">for</span> ( <span class="keyword">int</span> j = <span class="number">0</span> ; j &lt; n ; j ++ )&#123;</span><br><span class="line">                <span class="built_in">cin</span> &gt;&gt; ans.mat[i][j] ;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ans = quick_pow(ans , m) ;</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; n ; i ++ )&#123;</span><br><span class="line">            <span class="keyword">for</span> ( <span class="keyword">int</span> j = <span class="number">0</span> ; j &lt; n ; j ++ )&#123;</span><br><span class="line">                j == <span class="number">0</span> || <span class="built_in">cout</span> &lt;&lt; <span class="string">" "</span> ;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; ans.mat[i][j]  ;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Online Judge</category>
      </categories>
      <tags>
        <tag>51Nod</tag>
        <tag>快速幂</tag>
        <tag>模板</tag>
      </tags>
  </entry>
  <entry>
    <title>HDU 1702 ACboy needs your help again!</title>
    <url>/2018/11/24/HDU-1702-ACboy-needs-your-help-again/</url>
    <content><![CDATA[<h2 id="ACboy-needs-your-help-again"><a href="#ACboy-needs-your-help-again" class="headerlink" title="ACboy needs your help again!"></a>ACboy needs your help again!</h2><h3 id="Time-Limit-1000-1000-MS-Java-Others-Memory-Limit-32768-32768-K-Java-Others"><a href="#Time-Limit-1000-1000-MS-Java-Others-Memory-Limit-32768-32768-K-Java-Others" class="headerlink" title="**Time Limit: 1000/1000 MS (Java/Others)    Memory Limit: 32768/32768 K (Java/Others)"></a>**Time Limit: 1000/1000 MS (Java/Others)    Memory Limit: 32768/32768 K (Java/Others)</h3><h3 id="Total-Submission-s-11902-Accepted-Submission-s-5949"><a href="#Total-Submission-s-11902-Accepted-Submission-s-5949" class="headerlink" title="Total Submission(s): 11902    Accepted Submission(s): 5949**"></a>Total Submission(s): 11902    Accepted Submission(s): 5949**</h3><h2 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h2><p>ACboy was kidnapped!!<br>he miss his mother very much and is very scare now.You can’t image how dark the room he was put into is, so poor :(.<br>As a smart ACMer, you want to get ACboy out of the monster’s labyrinth.But when you arrive at the gate of the maze, the monste say :” I have heard that you are very clever, but if can’t solve my problems, you will die with ACboy.”<br>The problems of the monster is shown on the wall:<br>Each problem’s first line is a integer N(the number of commands), and a word “FIFO” or “FILO”.(you are very happy because you know “FIFO” stands for “First In First Out”, and “FILO” means “First In Last Out”).<br>and the following N lines, each line is “IN M” or “OUT”, (M represent a integer).<br>and the answer of a problem is a passowrd of a door, so if you want to rescue ACboy, answer the problem carefully!</p>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>The input contains multiple test cases.<br>The first line has one integer,represent the number oftest cases.<br>And the input of each subproblem are described above.</p>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>For each command “OUT”, you should output a integer depend on the word is “FIFO” or “FILO”, or a word “None” if you don’t have any integer.</p>
<h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><p>4<br>4 FIFO<br>IN 1<br>IN 2<br>OUT<br>OUT<br>4 FILO<br>IN 1<br>IN 2<br>OUT<br>OUT<br>5 FIFO<br>IN 1<br>IN 2<br>OUT<br>OUT<br>OUT<br>5 FILO<br>IN 1<br>IN 2<br>OUT<br>IN 3<br>OUT</p>
<h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><p>1<br>2<br>2<br>1<br>1<br>2<br>None<br>2<br>3</p>
<h2 id="Source"><a href="#Source" class="headerlink" title="Source"></a>Source</h2><p><a href="http://acm.hdu.edu.cn/search.php?field=problem&amp;key=2007%CA%A1%C8%FC%BC%AF%D1%B5%B6%D3%C1%B7%CF%B0%C8%FC%A3%A81%A3%A9&amp;source=1&amp;searchmode=source" target="_blank" rel="noopener">2007省赛集训队练习赛（1）</a></p>
<h2 id="Recommend"><a href="#Recommend" class="headerlink" title="Recommend"></a>Recommend</h2><p>lcy   |   We have carefully selected several similar problems for you:  <a href="http://acm.hdu.edu.cn/showproblem.php?pid=1701" target="_blank" rel="noopener">1701</a> <a href="http://acm.hdu.edu.cn/showproblem.php?pid=1700" target="_blank" rel="noopener">1700</a> <a href="http://acm.hdu.edu.cn/showproblem.php?pid=1703" target="_blank" rel="noopener">1703</a> <a href="http://acm.hdu.edu.cn/showproblem.php?pid=1704" target="_blank" rel="noopener">1704</a> <a href="http://acm.hdu.edu.cn/showproblem.php?pid=1706" target="_blank" rel="noopener">1706</a></p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>按照题目进行模拟。<br>代码如下：<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span> ;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t ;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; t ;</span><br><span class="line">    <span class="keyword">while</span> (t --)&#123;</span><br><span class="line">        <span class="keyword">int</span> n ;</span><br><span class="line">        <span class="built_in">string</span> str ;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; str ;</span><br><span class="line">        <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; sta_ ;</span><br><span class="line">        <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; que_ ;</span><br><span class="line">        <span class="keyword">while</span> (n --)&#123;</span><br><span class="line">            <span class="keyword">int</span> k ;</span><br><span class="line">            <span class="built_in">string</span> str1 ;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; str1 ;</span><br><span class="line">            <span class="keyword">if</span> (str == <span class="string">"FIFO"</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span> (str1 == <span class="string">"IN"</span>)&#123;</span><br><span class="line">                    <span class="built_in">cin</span> &gt;&gt; k ;</span><br><span class="line">                    que_.push(k) ;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> (que_.size() == <span class="number">0</span>)&#123;</span><br><span class="line">                        <span class="built_in">cout</span> &lt;&lt; <span class="string">"None"</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        <span class="built_in">cout</span> &lt;&lt; que_.front() &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">                        que_.pop() ;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (str1 == <span class="string">"IN"</span>)&#123;</span><br><span class="line">                    <span class="keyword">int</span> k ;</span><br><span class="line">                    <span class="built_in">cin</span> &gt;&gt; k ;</span><br><span class="line">                    sta_.push(k) ;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> (sta_.size() == <span class="number">0</span>)&#123;</span><br><span class="line">                        <span class="built_in">cout</span> &lt;&lt; <span class="string">"None"</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        <span class="built_in">cout</span> &lt;&lt; sta_.top() &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">                        sta_.pop() ;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Online Judge</category>
      </categories>
      <tags>
        <tag>HDU</tag>
      </tags>
  </entry>
  <entry>
    <title>摘录</title>
    <url>/2018/11/15/%E6%91%98%E5%BD%95/</url>
    <content><![CDATA[<h2 id="学会提问"><a href="#学会提问" class="headerlink" title="学会提问"></a>学会提问</h2><p>你要对他们循循善诱的说法作出客观公正的回应，首先就必须找出其中的争议或者论题之所在，然后再找到作者要推销给你的结论。(别人的结论也就是他试图传递给你的信息，目的在于塑造你的信念和行为)。</p>
<p>一切事物其本质和表现出来的现象应该有所不同，而我们也相信它们实际上就是有所不同，一旦我们认识到自己有似是而非这样的倾向，我们就要不断问自己：“是不是因为我希望它是真的才是真的，还是有确凿无疑的证据证明它是真的？”否则我们就要自取其辱。</p>
<p>可是我们每个人能做会做的事都非常有限，当我们躬自反省的时候，我们就会回想起苏格拉底说过的话：“我唯一所知的就是我一无所知”。</p>
<p>可在理由充分、证据确凿时反复无常，也不要在缺乏论据、强词夺理结论上执迷不悟。</p>
<p>我们之所以思考正是为了达到一定目的。当我们思考的动机就是为了同以前的思考方向保持一致、毫不更改时，我们变成就对批判性思考的价值观不管不顾。取而代之的是，我们变成了鼓吹者和宣传家，千方百计地寻找更好的方法来维护自己当前的立场。从这个角度看，思考的过程其实就是捍卫的过程。</p>
<p>更明智、更进步的做法是一旦思考，目的就是要让我们的思想更有深度，让我们的思想更加精确。为了达到这个目标，我们就要不时锻炼自己，耐心倾听那些和我们意见相左的人的论证。</p>
<p>我们每做一个决定时都携带有太多的个人包袱——经历、梦想、价值观、所受训练、文化习俗等。可是，如果你要茁壮成长，你就得认清这些情感，而且尽你所能，将其搁在一旁暂时不问。</p>
<p>只有尽力认清这些感情以及它们对你造成的影响，当别人提出的观点可能威胁或推翻你当前的看法时你才能仔细聆听。</p>
<p>投入的感情再多，批判性思考的人也会清醒地意识到它们的当前思想随时有可能得到修正，因此感情时刻受到理智的调节和控制。</p>
<p>请记住：接受还是拒绝一个立场，感情上的依恋绝不应该成为最重要的基础。理想的做法是，只有在经过分析推理以后还对其笃信不疑才可以加大感情投入的力度。</p>
<p>一个论证是两种不同形式的陈述之间的结合，即一个结论和支持这一结论的理由间的结合。</p>
<h2 id="来自新世界"><a href="#来自新世界" class="headerlink" title="来自新世界"></a>来自新世界</h2><p>你听好，人绝对不可能完全控制自己的心灵，就算你以为完全控制自己的意识，潜意识也会发生想象不到的事情，咒力会把这些事情全部摊开，一览无遗。</p>
<p>“遗忘”虽然是心灵的防卫机制，但也会导致严重的问题被当成不足挂齿的小事从记忆中抹去。</p>
<p>我不是要放马后炮，不过当时总觉得这不对劲，光靠课本告诉我们的“突变”与“物竞天择”，真能让生物对天敌演化出如此的“恶意”吗？</p>
<h2 id="穷查理宝典"><a href="#穷查理宝典" class="headerlink" title="穷查理宝典"></a>穷查理宝典</h2><p>别因为过度关心细节而忽略了显而易见的东西。</p>
<p>认识和适应你身边的世界的真实本质，别指望它来适应你。</p>
<p>不断地挑战和主动地修正你“最爱的观念”。</p>
<p>当别人贪婪时，要害怕；当别人恐惧时，要贪婪。</p>
<p>“你必须知道重要学科的重要理论，并经常使用它们——要全部都用上，而不是只用几种。大多数人都只使用学过的一个学科的思维模型，比如说经济学，试图用一种方法来解决所有问题。你知道谚语是这么说的：‘在手里拿着铁锤的人看来，世界就像一颗钉子。’这是处理问题的一种笨办法”。</p>
<p>我们的经验往往会验证一个长久以来的观念：只要做好准备，在人生中抓住几个机会，迅速地采取适当的行动，去做简单而合乎逻辑的事情，这辈子的财富就会得到极大的增长。上面提到的这种机会很少，它们通常会落在不断地寻找和等待、充满求知欲望而又热衷于对各种不同的可能性作出分析的人头上。这样的机会来临之后，如果获胜的几率极高，那么动用过去的谨慎和耐心得来的资源，重重地压下赌注就可以了。</p>
<p>“找出你最擅长的事情，然后持之以恒、乐此不疲的去把它做好。”</p>
<p>晚年的最佳保护盔甲是一段在它之前被悉心度过的生活，一段被用于追求有益的知识、光荣的功绩和高尚的举止的生活；过着这种生活的人从青年时代就致力于提升他自己，而且将会在晚年收获它们产生的最幸福的果实；这不仅是因为有益的知识、光荣的功绩和高尚的举止将会陪伴他终生，甚至直到他生命的最后一刻，也会因为见证了正直的人生的良心和对过往美好功绩的回忆将会给灵魂带来无上的安慰。</p>
<p>迅速歼灭不该做的事情，接着对该做的事情发起熟练的、跨学科的攻击，然后，当合适的机会来临——只有当合适的机会来临——就采取果断的行动。</p>
<p>我最反对的是过于自信、过于有把握地认为你清楚你的某次行动是利大于弊的。你要应付的是高度复杂的系统，在其中，任何事物都跟其他一切事物相互影响。</p>
<p>别愚弄你自己，记住，你是最容易被自己愚弄的人。</p>
<p>你必须有浓厚的兴趣去弄明白正在发生的事情背后的原因。如果你能够长期保持这种心态，你关注现实的能力将会逐渐得到提高。如果你没有这种心态，那么即使你有很高的智商也注定会失败。你若想在任何领域拥有竞争力，就必须熟练地掌握该领域的方方面面，不管你是否喜欢这么做，这是人类大脑的深层结构决定的。</p>
<p>人的任务不是去看清远处模糊的东西，而是去做好身边清楚的事情。</p>
<p>所以诀窍就在于不断学习，而且我不认为那些不享受学习过程的人能够不断地学习。</p>
<p>通过广泛的阅读把自己培养成一个终生自学者；培养好奇心，每天努力使自己聪明一点点。</p>
<p>记住，你是对是错，并不取决于别人同意你还是反对你——惟一重要的是你的分析和判断是否正确。</p>
<p>随大流只会让你往平均值靠近。</p>
<p>投资就像打棒球，你要让记分牌上的得分增加，就必须盯着球场，而不是盯着记分牌。</p>
<p>长久以来，我坚信存在某个系统——几乎所有聪明人都能掌握的系统，它比绝大多数人用的系统管用。你需要的是在你的头脑里形成一种思维模型的复式框架。有了那个系统之后，你就能逐渐提高对事物的认识。然而，我这种特殊的方法似乎很少得到认可，甚至对那些非常有才能的人来说也是如此。人们要是觉得一件事情“太难”，往往就会放弃去做它。</p>
<p>恐怕事情就是这样的。假如有20种相互影响的因素，那么你必须学会处理这种错综复杂的关系——因为世界就是这样的。但如果你能像达尔文那样，带着好奇的毅力，循序渐进地去做，那么你就不会觉得这是艰巨的任务。你将会惊讶地发现自己完全能够胜任。</p>
<h2 id="人间失格"><a href="#人间失格" class="headerlink" title="人间失格"></a>人间失格</h2><p>相互欺瞒切无论哪一方都不可思议地完好无伤，甚至彼此连相互欺瞒一事都没发现一般，鲜活、光明磊落、开朗痛快的互不信任，这种案例，我想是处处存在于人们的生活当中。</p>
<p>惧怕人类的人反而会更希望能亲眼目睹恐怖的妖怪；神经质、纤细敏感的人则会乞求着比暴风雨更强大的力量。</p>
<h2 id="新世纪福音战士-EVA"><a href="#新世纪福音战士-EVA" class="headerlink" title="新世纪福音战士(EVA)"></a>新世纪福音战士(EVA)</h2><p>“你知道豪猪两难说吗？”<br>“豪猪，那种浑身是刺的？”<br>“豪猪想把自己的温暖传递给对方，可是越靠近对方身上的刺便会让彼此受伤。人类也是一样的，我想真嗣他正是因为害怕这种痛苦，所以才变得十分胆怯吧。”<br>“不过，总有一天他会明白的，所谓成长就是不断重复着亲近和疏远，从而找到能让彼此都不会受伤害的距离。”</p>
]]></content>
      <categories>
        <category>Daily Record</category>
      </categories>
      <tags>
        <tag>Life</tag>
      </tags>
  </entry>
  <entry>
    <title>HrbustOJ 1167 每种面值的货币要多少</title>
    <url>/2018/11/13/HrbustOJ-1167-%E6%AF%8F%E7%A7%8D%E9%9D%A2%E5%80%BC%E7%9A%84%E8%B4%A7%E5%B8%81%E8%A6%81%E5%A4%9A%E5%B0%91/</url>
    <content><![CDATA[<h2 id="每种面值的货币要多少"><a href="#每种面值的货币要多少" class="headerlink" title="每种面值的货币要多少"></a>每种面值的货币要多少</h2><h3 id="Time-Limit-1000-MS-Memory-Limit-65536-K"><a href="#Time-Limit-1000-MS-Memory-Limit-65536-K" class="headerlink" title="Time Limit: 1000 MS    Memory Limit: 65536 K"></a>Time Limit: 1000 MS    Memory Limit: 65536 K</h3><h3 id="Total-Submit-596-357-users-Total-Accepted-370-335-users-Rating-Special-Judge-No"><a href="#Total-Submit-596-357-users-Total-Accepted-370-335-users-Rating-Special-Judge-No" class="headerlink" title="Total Submit: 596(357 users)    Total Accepted: 370(335 users)    Rating:     Special Judge: No"></a>Total Submit: 596(357 users)    Total Accepted: 370(335 users)    Rating:     Special Judge: No</h3><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>组织终于发工资了，等了好久的工资终于来了。。。<br>为了让大家能在领工资的时候能尽量快，组织决定一次发完所有工资，不会出现让员工找零的情况，也就是说，如果一个员工的工资是1160元，就会给11张100元，1张50元，1张10元，而不会给员工1200元，然后让员工找40元零钱的情况。<br>员工的工资都是整数，单位是元，并且市面上流通的RMB面值有100元，50元，20元，10元，5元，1元。<br>要求最终需要的纸币张数最少。</p>
<h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><p>有多组测测试数据，每组测试数据占一行。<br>对于每组测试数据，第一个数n表示组织有多少员工，接下来有n个数，表示每一个员工要发多少工资。<br>处理到文件结束。<br>1 &lt;= n &lt;= 100000， 每个员工的工资不超过1000000</p>
<h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p>每行输出6个数，表示100元、50元、20元、10元、5元、1元各需要多少张。<br>答案可能有0。</p>
<h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h3><p>1 701<br>3 474 808 212  </p>
<h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h3><p>7 0 0 0 0 1<br>14 1 1 1 1 9  </p>
<h3 id="Author"><a href="#Author" class="headerlink" title="Author"></a>Author</h3><p>黄李龙</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>贪心问题，每次都选最大面额的。代码如下：<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span> ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> money[<span class="number">6</span>] = &#123;<span class="number">100</span> , <span class="number">50</span> , <span class="number">20</span> , <span class="number">10</span> , <span class="number">5</span> , <span class="number">1</span>&#125; ;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n , money_ ;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="built_in">cin</span> &gt;&gt; n )&#123;</span><br><span class="line">        <span class="keyword">int</span> cost[<span class="number">6</span>] = &#123;<span class="number">0</span>&#125; ;</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; n ; i ++ )&#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; money_ ;</span><br><span class="line">            <span class="keyword">for</span> ( <span class="keyword">int</span> j = <span class="number">0</span> ; j &lt; <span class="number">6</span> ; j ++ )&#123;</span><br><span class="line">                cost[j] += money_ / money[j] ;</span><br><span class="line">                money_ %= money[j] ;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">6</span> ; i ++ )&#123;</span><br><span class="line">            i == <span class="number">0</span> || <span class="built_in">cout</span> &lt;&lt; <span class="string">" "</span> ;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; cost[i] ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Online Judge</category>
      </categories>
      <tags>
        <tag>贪心</tag>
        <tag>HrbustOJ</tag>
      </tags>
  </entry>
  <entry>
    <title>ZOJ 1760 Doubles</title>
    <url>/2018/11/12/ZOJ-1760-Doubles/</url>
    <content><![CDATA[<h2 id="Doubles"><a href="#Doubles" class="headerlink" title="Doubles"></a><center>Doubles</center></h2><hr>
<center>Time Limit: 2 Seconds      Memory Limit: 65536 KB</center>

<hr>
<p>As part of an arithmetic competency program, your students will be given randomly generated lists of from 2 to 15 unique positive integers and asked to determine how many items in each list are twice some other item in the same list. You will need a program to help you with the grading. This program should be able to scan the lists and output the correct answer for each one. For example, given the list</p>
<p>1 4 3 2 9 7 18 22</p>
<p>your program should answer 3, as 2 is twice 1, 4 is twice 2, and 18 is twice 9.</p>
<h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a><strong>Input</strong></h3><p>The input file will consist of one or more lists of numbers. There will be one list of numbers per line. Each list will contain from 2 to 15 unique positive integers. No integer will be larger than 99. Each line will be terminated with the integer 0, which is not considered part of the list. A line with the single number -1 will mark the end of the file. The example input below shows 3 separate lists. Some lists may not contain any doubles.</p>
<h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a><strong>Output</strong></h3><p>The output will consist of one line per input list, containing a count of the items that are double some other item.</p>
<h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a><strong>Sample Input</strong></h3><p>1 4 3 2 9 7 18 22 0<br>2 4 8 10 0<br>7 5 11 13 1 3 0<br>-1</p>
<h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a><strong>Sample Output</strong></h3><p>3<br>2<br>0   </p>
<hr>
<h3 id="Source-Mid-Central-USA-2003"><a href="#Source-Mid-Central-USA-2003" class="headerlink" title="Source: Mid-Central USA 2003"></a>Source: <strong>Mid-Central USA 2003</strong></h3><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span> ;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t ;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="built_in">cin</span> &gt;&gt; t &amp;&amp; t != <span class="number">-1</span> )&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; arr ;</span><br><span class="line">        arr.push_back(t) ;</span><br><span class="line">        <span class="keyword">int</span> x ;</span><br><span class="line">        <span class="keyword">while</span> ( <span class="built_in">cin</span> &gt;&gt; x &amp;&amp; x )&#123;</span><br><span class="line">            arr.push_back(x) ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span> ;</span><br><span class="line">        <span class="keyword">bool</span> check[arr.size()] ;</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; arr.size() ; i ++ )&#123;</span><br><span class="line">            check[i] = <span class="literal">false</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; arr.size() ; i ++ )&#123;</span><br><span class="line">            <span class="keyword">for</span> ( <span class="keyword">int</span> j = <span class="number">0</span> ; j &lt; arr.size() ; j ++ )&#123;</span><br><span class="line">                <span class="keyword">if</span> ( arr[i] * <span class="number">2</span> == arr[j] )&#123;</span><br><span class="line">                    ans ++ ;</span><br><span class="line">                    check[i] = <span class="literal">true</span> ;</span><br><span class="line"><span class="comment">//                    break ;</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> ( arr[j] * <span class="number">2</span> == arr[i] &amp;&amp; arr[i] == <span class="literal">true</span> )&#123;</span><br><span class="line">                    ans ++ ;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Online Judge</category>
      </categories>
      <tags>
        <tag>ZOJ</tag>
      </tags>
  </entry>
  <entry>
    <title>HDU 5533 Dancing Stars on Me</title>
    <url>/2018/11/11/HDU-5533-Dancing-Stars-on-Me/</url>
    <content><![CDATA[<h1 id="Dancing-Stars-on-Me"><a href="#Dancing-Stars-on-Me" class="headerlink" title="Dancing Stars on Me"></a>Dancing Stars on Me</h1><p><strong>Time Limit: 2000/1000 MS (Java/Others)    Memory Limit: 262144/262144 K (Java/Others)<br>Total Submission(s): 2827    Accepted Submission(s): 1636</strong> </p>
<h2 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h2><p>The sky was brushed clean by the wind and the stars were cold in a black sky. What a wonderful night. You observed that, sometimes the stars can form a regular polygon in the sky if we connect them properly. You want to record these moments by your smart camera. Of course, you cannot stay awake all night for capturing. So you decide to write a program running on the smart camera to check whether the stars can form a regular polygon and capture these moments automatically.</p>
<p>Formally, a regular polygon is a convex polygon whose angles are all equal and all its sides have the same length. The area of a regular polygon must be nonzero. We say the stars can form a regular polygon if they are exactly the vertices of some regular polygon. To simplify the problem, we project the sky to a two-dimensional plane here, and you just need to check whether the stars can form a regular polygon in this plane.</p>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>The first line contains a integer T indicating the total number of test cases. Each test case begins with an integer n, denoting the number of stars in the sky. Following nlines, each contains 2 integers xi,yi, describe the coordinates of n stars.</p>
<p>1≤T≤300<br>3≤n≤100<br>−10000≤xi,yi≤10000<br>All coordinates are distinct.  </p>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>For each test case, please output “<code>YES</code>“ if the stars can form a regular polygon. Otherwise, output “<code>NO</code>“ (both without quotes).</p>
<h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><p>3<br>3<br>0 0<br>1 1<br>1 0<br>4<br>0 0<br>0 1<br>1 0<br>1 1<br>5<br>0 0<br>0 1<br>0 2<br>2 2<br>2 0</p>
<h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><p>NO<br>YES<br>NO</p>
<h2 id="Source"><a href="#Source" class="headerlink" title="Source"></a>Source</h2><p><a href="http://acm.hdu.edu.cn/search.php?field=problem&amp;key=2015ACM%2FICPC%D1%C7%D6%DE%C7%F8%B3%A4%B4%BA%D5%BE-%D6%D8%CF%D6%C8%FC%A3%A8%B8%D0%D0%BB%B6%AB%B1%B1%CA%A6%B4%F3%A3%A9&amp;source=1&amp;searchmode=source" target="_blank" rel="noopener">2015ACM/ICPC亚洲区长春站-重现赛（感谢东北师大）</a></p>
<h2 id="Recommend"><a href="#Recommend" class="headerlink" title="Recommend"></a>Recommend</h2><p>hujie   |   We have carefully selected several similar problems for you:  <a href="http://acm.hdu.edu.cn/showproblem.php?pid=6447" target="_blank" rel="noopener">6447</a> <a href="http://acm.hdu.edu.cn/showproblem.php?pid=6446" target="_blank" rel="noopener">6446</a> <a href="http://acm.hdu.edu.cn/showproblem.php?pid=6445" target="_blank" rel="noopener">6445</a> <a href="http://acm.hdu.edu.cn/showproblem.php?pid=6444" target="_blank" rel="noopener">6444</a> <a href="http://acm.hdu.edu.cn/showproblem.php?pid=6443" target="_blank" rel="noopener">6443</a></p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span> ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> x[<span class="number">105</span>] ;</span><br><span class="line"><span class="keyword">double</span> y[<span class="number">105</span>] ;</span><br><span class="line"><span class="keyword">double</span> z[<span class="number">105</span>] ;</span><br><span class="line"><span class="keyword">bool</span> check[<span class="number">105</span>] ;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t ;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; t ;</span><br><span class="line">    <span class="keyword">while</span> ( t -- )&#123;</span><br><span class="line">        <span class="built_in">memset</span>(check, <span class="literal">true</span>, <span class="keyword">sizeof</span> (check) ) ;</span><br><span class="line">        <span class="built_in">memset</span>(x, <span class="number">0</span>, <span class="keyword">sizeof</span> (x) ) ;</span><br><span class="line">        <span class="built_in">memset</span>(y, <span class="number">0</span>, <span class="keyword">sizeof</span> (y) ) ;</span><br><span class="line">        <span class="keyword">int</span> n ;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n ;</span><br><span class="line">        <span class="keyword">double</span> Xsum = <span class="number">0</span> ;</span><br><span class="line">        <span class="keyword">double</span> Ysum = <span class="number">0</span> ;</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; n ; i ++ )&#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; x[i] ;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; y[i] ;</span><br><span class="line">            Xsum += x[i] ;</span><br><span class="line">            Ysum += y[i] ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">double</span> M = Xsum / n ;</span><br><span class="line">        <span class="keyword">double</span> N = Ysum / n ;</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; n ; i ++ )&#123;</span><br><span class="line">            z[i] = <span class="built_in">sqrt</span>((M - x[i])*(M - x[i]) + (N - y[i])*(N - y[i])) ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> flag = <span class="number">1</span> ;</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> i = n - <span class="number">1</span> ; i &gt; <span class="number">0</span> ; i -- )&#123;</span><br><span class="line">            <span class="keyword">if</span> ( z[i] != z[i<span class="number">-1</span>] )&#123;</span><br><span class="line">                check[i] = <span class="literal">false</span> ;</span><br><span class="line">                flag = <span class="number">0</span> ;</span><br><span class="line">                <span class="keyword">break</span> ;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ( flag &gt; <span class="number">0</span> )&#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"YES"</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"NO"</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Online Judge</category>
      </categories>
      <tags>
        <tag>HDU</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces Round #132(Div2) A.Bicycle Chain</title>
    <url>/2018/11/10/Codeforces-Round-132-Div2-A-Bicycle-Chain/</url>
    <content><![CDATA[<h2 id="A-Bicycle-Chain"><a href="#A-Bicycle-Chain" class="headerlink" title="A. Bicycle Chain"></a><center>A. Bicycle Chain</center></h2><h3 id="time-limit-per-test-2-seconds"><a href="#time-limit-per-test-2-seconds" class="headerlink" title="time limit per test 2 seconds"></a>time limit per test 2 seconds</h3><center>time limit per test<br>1 second<br>memory limit per test<br>256 megabytes<br>input:standard input<br>output:standard output</center>

<p>Vasya’s bicycle chain drive consists of two parts: _n_ stars are attached to the pedal axle, _m_ stars are attached to the rear wheel axle. The chain helps to rotate the rear wheel by transmitting the pedal rotation.</p>
<p>We know that the _i_-th star on the pedal axle has _a_<sub class="lower-index">_i_</sub> (0 &lt; _a_<sub class="lower-index">1</sub> &lt; _a_<sub class="lower-index">2</sub> &lt; … &lt; _a_<sub class="lower-index">_n_</sub>) teeth, and the _j_-th star on the rear wheel axle has _b_<sub class="lower-index">_j_</sub>(0 &lt; _b_<sub class="lower-index">1</sub> &lt; _b_<sub class="lower-index">2</sub> &lt; … &lt; _b_<sub class="lower-index">_m_</sub>) teeth. Any pair (_i_, _j_) (1 ≤ _i_ ≤ _n_; 1 ≤ _j_ ≤ _m_) is called a gear and sets the indexes of stars to which the chain is currently attached. Gear (_i_, _j_) has a gear ratio, equal to the value <img src="http://codeforces.com/predownloaded/d0/78/d078e1680a37015ffac51c16f02a5c6c6b0c7354.png" alt="">.</p>
<p>Since Vasya likes integers, he wants to find such gears (_i_, _j_), that their ratios are integers. On the other hand, Vasya likes fast driving, so among all “integer” gears (_i_, _j_) he wants to choose a gear with the maximum ratio. Help him to find the number of such gears.</p>
<p>In the problem, fraction <img src="http://codeforces.com/predownloaded/d0/78/d078e1680a37015ffac51c16f02a5c6c6b0c7354.png" alt=""> denotes division in real numbers, that is, no rounding is performed.</p>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>The first input line contains integer _n_ (1 ≤ _n_ ≤ 50) — the number of stars on the bicycle’s pedal axle. The second line contains _n_ integers _a_<sub class="lower-index">1</sub>, _a_<sub class="lower-index">2</sub>, …, _a_<sub class="lower-index">_n_</sub> (1 ≤ _a_<sub class="lower-index">_i_</sub> ≤ 10<sup class="upper-index">4</sup>) in the order of strict increasing.</p>
<p>The third input line contains integer _m_ (1 ≤ _m_ ≤ 50) — the number of stars on the rear wheel axle. The fourth line contains _m_ integers _b_<sub class="lower-index">1</sub>, _b_<sub class="lower-index">2</sub>, …, _b_<sub class="lower-index">_m_</sub> (1 ≤ _b_<sub class="lower-index">_i_</sub> ≤ 10<sup class="upper-index">4</sup>) in the order of strict increasing.</p>
<p>It is guaranteed that there exists at least one gear (_i_, _j_), that its gear ratio is an integer. The numbers on the lines are separated by spaces.</p>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>Print the number of “integer” gears with the maximum ratio among all “integer” gears.</p>
<h2 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h2><h3 id="input"><a href="#input" class="headerlink" title="input"></a>input</h3><p>2<br>4 5<br>3<br>12 13 15  </p>
<h3 id="output"><a href="#output" class="headerlink" title="output"></a>output</h3><p>2  </p>
<h3 id="input-1"><a href="#input-1" class="headerlink" title="input"></a>input</h3><p>4<br>1 2 3 4<br>5<br>10 11 12 13 14  </p>
<h3 id="output-1"><a href="#output-1" class="headerlink" title="output"></a>output</h3><p>1</p>
<h3 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h3><p>In the first sample the maximum “integer” gear ratio equals 3. There are two gears that have such gear ratio. For one of them _a_<sub class="lower-index">1</sub> = 4, _b_<sub class="lower-index">1</sub> = 12, and for the other _a_<sub class="lower-index">2</sub> = 5, _b_<sub class="lower-index">3</sub> = 15.</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ull_ unsigned long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span> ;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a , b ;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; a ;</span><br><span class="line">    <span class="keyword">int</span> num_a[a + <span class="number">10</span>] ;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; a ; i ++ )&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; num_a[i] ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; b ;</span><br><span class="line">    <span class="keyword">int</span> num_b[b + <span class="number">10</span>] ;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; b ; i ++ )&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; num_b[i] ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span> ;</span><br><span class="line">    <span class="keyword">int</span> maxx = <span class="number">-1</span> ;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; a ; i ++ )&#123;</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> j = <span class="number">0</span> ; j &lt; b ; j ++ )&#123;</span><br><span class="line">            <span class="keyword">if</span> ( num_b[j] % num_a[i] == <span class="number">0</span> )&#123;</span><br><span class="line">                maxx = max(maxx , num_b[j] / num_a[i]) ;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; a ; i ++ )&#123;</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> j = <span class="number">0</span> ; j &lt; b ; j ++ )&#123;</span><br><span class="line">            <span class="keyword">if</span> ( num_b[j] % num_a[i] == <span class="number">0</span> &amp;&amp; num_b[j] / num_a[i] == maxx )&#123;</span><br><span class="line">                ans ++ ;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Online Judge</category>
      </categories>
      <tags>
        <tag>CodeForces</tag>
      </tags>
  </entry>
  <entry>
    <title>51Nod 1137 矩阵乘法</title>
    <url>/2018/11/09/51Nod-1137-%E7%9F%A9%E9%98%B5%E4%B9%98%E6%B3%95/</url>
    <content><![CDATA[<h2 id="1137-矩阵乘法"><a href="#1137-矩阵乘法" class="headerlink" title="1137 矩阵乘法"></a>1137 矩阵乘法</h2><p>给出2个N * N的矩阵M1和M2，输出2个矩阵相乘后的结果。</p>
<h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><p>第1行：1个数N，表示矩阵的大小(2 &lt;= N &lt;= 100)<br>第2 - N + 1行，每行N个数，对应M1的1行(0 &lt;= M1[i] &lt;= 1000)<br>第N + 2 - 2N + 1行，每行N个数，对应M2的1行(0 &lt;= M2[i] &lt;= 1000)</p>
<h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><p>输出共N行，每行N个数，对应M1 * M2的结果的一行。</p>
<h3 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例"></a>输入样例</h3><p>2<br>1 0<br>0 1<br>0 1<br>1 0  </p>
<h3 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例"></a>输出样例</h3><p>0 1<br>1 0  </p>
<h4 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h4><p>按照矩阵乘法的定义进行计算即可，代码如下：<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span> ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">1005</span>][<span class="number">1005</span>] ;</span><br><span class="line"><span class="keyword">int</span> b[<span class="number">1005</span>][<span class="number">1005</span>] ;</span><br><span class="line"><span class="keyword">int</span> ans[<span class="number">1005</span>][<span class="number">1005</span>] ;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n ;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="built_in">cin</span> &gt;&gt; n )&#123;</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; n ; i ++ )&#123;</span><br><span class="line">            <span class="keyword">for</span> ( <span class="keyword">int</span> j = <span class="number">0</span> ; j &lt; n ; j ++ )&#123;</span><br><span class="line">                <span class="built_in">cin</span> &gt;&gt; a[i][j] ;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; n ; i ++ )&#123;</span><br><span class="line">            <span class="keyword">for</span> ( <span class="keyword">int</span> j = <span class="number">0</span> ; j &lt; n ; j ++ )&#123;</span><br><span class="line">                <span class="built_in">cin</span> &gt;&gt; b[i][j] ;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; n ; i ++ )&#123;</span><br><span class="line">            <span class="keyword">for</span> ( <span class="keyword">int</span> j = <span class="number">0</span> ; j &lt; n ; j ++ )&#123;</span><br><span class="line">                <span class="keyword">for</span> ( <span class="keyword">int</span> k = <span class="number">0</span> ; k &lt; n ; k ++ )&#123;</span><br><span class="line">                    ans[i][j] += a[i][k] * b[k][j] ;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; n ; i ++ )&#123;</span><br><span class="line">            <span class="keyword">for</span> ( <span class="keyword">int</span> j = <span class="number">0</span> ; j &lt; n ; j ++ )&#123;</span><br><span class="line">                j == <span class="number">0</span> || <span class="built_in">cout</span> &lt;&lt; <span class="string">" "</span> ;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; ans[i][j] ;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Online Judge</category>
      </categories>
      <tags>
        <tag>日常水题</tag>
        <tag>51Nod</tag>
      </tags>
  </entry>
  <entry>
    <title>HDU 6292 赛题分析</title>
    <url>/2018/11/08/HDU-6292-%E8%B5%9B%E9%A2%98%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h2 id="赛题分析"><a href="#赛题分析" class="headerlink" title="赛题分析"></a>赛题分析</h2><p><strong>Time Limit: 2000/1000 MS (Java/Others)    Memory Limit: 512000/512000 K (Java/Others)<br>Total Submission(s): 862    Accepted Submission(s): 503</strong> </p>
<h2 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h2><p>著名出题人小Q每次比赛后都会写一份《赛题分析》，包含比赛概况、每题的参考算法以及一些统计数值。</p>
<p>对于一道题来说，小Q会统计最短的验题人代码长度(Shortest judge solution)以及赛内参赛队伍最短的AC代码长度(Shortest team solution)。</p>
<p>统计验题人代码长度比较容易，因为验题人最多也不会超过20个。但是统计选手代码长度就不容易了，因为大赛区动辄三四百支队伍。</p>
<p>请写一个程序，帮助小Q统计最短代码长度。</p>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>第一行包含一个正整数T(1≤T≤13)，表示赛题数量。</p>
<p>每道题第一行包含两个整数n,m(2≤n≤20,0≤m≤500)，分别表示验题人数量以及AC了该题的队伍数量。</p>
<p>第二行包含n个正整数a1,a2,…,an(50≤ai≤65536)，依次表示每个验题人的代码字节数。</p>
<p>第三行包含m个正整数b1,b2,…,bn(50≤bi≤65536)，依次表示每支AC队伍的代码字节数。若m=0则该行为空行。</p>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>对于第i(1≤i≤T)道题，输出三行，第一行输出Problem x:，其中x=i+1000。</p>
<p>第二行输出Shortest judge solution: y bytes.，其中y表示最短的验题人代码字节数。</p>
<p>第三行输出Shortest team solution: z bytes.，其中z表示最短的选手代码字节数，若不存在请输出N/A。</p>
<p>注意：间隔都是一个空格。</p>
<h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><p>2 3 2 3627 1460 5288 2365 2671 2 0 5510 7682</p>
<h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><p>Problem 1001: Shortest judge solution: 1460 bytes. Shortest team solution: 2365 bytes. Problem 1002: Shortest judge solution: 5510 bytes. Shortest team solution: N/A bytes.</p>
<h2 id="Source"><a href="#Source" class="headerlink" title="Source"></a>Source</h2><p><a href="http://acm.hdu.edu.cn/search.php?field=problem&amp;key=%26quot%3B%D7%D6%BD%DA%CC%F8%B6%AF%B1%AD%26quot%3B2018%D6%D0%B9%FA%B4%F3%D1%A7%C9%FA%B3%CC%D0%F2%C9%E8%BC%C6%BE%BA%C8%FC-%C5%AE%C9%FA%D7%A8%B3%A1&amp;source=1&amp;searchmode=source" target="_blank" rel="noopener">“字节跳动杯”2018中国大学生程序设计竞赛-女生专场</a></p>
<h2 id="Recommend"><a href="#Recommend" class="headerlink" title="Recommend"></a>Recommend</h2><p>liuyiding</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>根据题意模拟。代码如下：<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span> ;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> problem = <span class="number">1001</span> ;</span><br><span class="line">    <span class="keyword">int</span> t ;</span><br><span class="line"><span class="comment">//    cin &gt;&gt; t ;</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span> , &amp;t) ;</span><br><span class="line">    <span class="keyword">while</span>( t -- )&#123;</span><br><span class="line">        <span class="keyword">int</span> n , m ;</span><br><span class="line"><span class="comment">//        cin &gt;&gt; n &gt;&gt; m ;</span></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d"</span> , &amp;n , &amp;m) ;</span><br><span class="line">        <span class="keyword">bool</span> check_N = <span class="literal">false</span> ;</span><br><span class="line">        <span class="keyword">if</span> ( m == <span class="number">0</span> )&#123;</span><br><span class="line">            check_N = <span class="literal">true</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> min_byte_one =  <span class="number">100000</span> ;</span><br><span class="line">        <span class="keyword">int</span> min_byte_two = <span class="number">100000</span> ;</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; n ; i ++ )&#123;</span><br><span class="line">            <span class="keyword">int</span> x ;</span><br><span class="line"><span class="comment">//            cin &gt;&gt; x ;</span></span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span> , &amp;x) ;</span><br><span class="line">            min_byte_one = min( min_byte_one , x ) ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ( !check_N )&#123;</span><br><span class="line">            <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; m ; i ++ )&#123;</span><br><span class="line">                <span class="keyword">int</span> x ;</span><br><span class="line"><span class="comment">//                cin &gt;&gt; x ;</span></span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span> , &amp;x) ;</span><br><span class="line">                min_byte_two = min( min_byte_two , x ) ;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Problem %d:\n"</span> , problem++) ;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Shortest judge solution: %d bytes.\n"</span> , min_byte_one) ;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Shortest team solution: N/A bytes.\n"</span>) ;</span><br><span class="line">            <span class="keyword">continue</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Problem %d:\n"</span> , problem++) ;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Shortest judge solution: %d bytes.\n"</span> , min_byte_one) ;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Shortest team solution: %d bytes.\n"</span> , min_byte_two) ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Online Judge</category>
      </categories>
      <tags>
        <tag>HDU</tag>
        <tag>模拟</tag>
      </tags>
  </entry>
  <entry>
    <title>HDU 6297 CCPC直播</title>
    <url>/2018/11/06/HDU-6297-CCPC%E7%9B%B4%E6%92%AD/</url>
    <content><![CDATA[<h2 id="CCPC直播"><a href="#CCPC直播" class="headerlink" title="CCPC直播"></a>CCPC直播</h2><p><strong>Time Limit: 2000/1000 MS (Java/Others)    Memory Limit: 512000/512000 K (Java/Others)<br>Total Submission(s): 1337    Accepted Submission(s): 550</strong> </p>
<h2 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h2><p>在比特镇举行的中国大学生程序设计竞赛CCPC(China Collegiate Programming Contest)开始啦！这次比赛中加入了现场视频直播，而在直播屏幕的左下角，会显示评测队列。</p>
<p>比特镇的科技水平并不发达，直播分辨率并不高。准确地说，每个评测记录将被显示在1行38列的像素格上。一条评测记录由4个部分组成，从左往右依次为排名(3像素),队名(16像素),题号(4像素),评测情况(12像素)。相邻两个部分之间由1像素的分隔线|分开。其中，排名右对齐显示，队名左对齐显示，长度不足时用空格补齐。题号一定是4位正整数，因此恰好占据4像素。评测情况则比较复杂，它由两侧的括号[]以及中间10像素组成。</p>
<p>样例第一行表示排名第19的队伍qqqqq_University提交了题目1001，已经通过了30%的测试点，故左对齐显示3个X。</p>
<p>样例第二行表示排名第125的队伍quailty_U_2提交了题目1002，评测结果为WA，故居中显示WA，左边留4像素空格。</p>
<p>样例第三行需要居中显示TLE，左边同样留4像素空格。</p>
<p>样例第四行这支队伍是全场第一个通过1003的，故在AC后加上字符∗来特殊标注。</p>
<p>请写一个程序，对于每条评测记录产生直播信息。</p>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>第一行包含一个正整数T(1≤T≤1000)，表示评测记录的数量。</p>
<p>接下来T行，每行首先是一个正整数rank(1≤rank≤400)，表示队伍的排名。</p>
<p>接下来一个长度不超过16的字符串S，表示队名，S仅由大小写字母、数字以及下划线”_”组成。</p>
<p>接下来一个正整数prob(1001≤prob≤1013)，表示题号。</p>
<p>接下来一个字符串T(T∈{Running,AC,WA,TLE,MLE,RTE,CE,OLE,PE,FB})，表示评测状态，除Running外均表示评测结束。若为Running，则还会输入一个正整数p(1≤p≤9)，表示已经通过了p×10%的测试点。若为FB，则表示全场第一个通过该题，应显示AC∗。</p>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>对于每条评测记录，按要求输出一行一个长度为38的字符串，即直播显示效果。</p>
<h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><p>5<br>19 qqqqq_University 1001 Running 3<br>125 quailty_U_2 1002 WA<br>4 quailty_U_3 1003 TLE<br>1 quailty_U_4 1003 FB 2 qqqqq 1001 AC</p>
<h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><p>.19|qqqqq_University|1001|[XXX ]<br>125|quailty_U_2 |1002|[ WA ]<br>..4|quailty_U_3 |1003|[ TLE ]<br>..1|quailty_U_4 |1003|[ AC* ]<br>..2|qqqqq |1001|[ AC ]  </p>
<h2 id="Source"><a href="#Source" class="headerlink" title="Source"></a>Source</h2><p><a href="http://acm.hdu.edu.cn/search.php?field=problem&amp;key=%26quot%3B%D7%D6%BD%DA%CC%F8%B6%AF%B1%AD%26quot%3B2018%D6%D0%B9%FA%B4%F3%D1%A7%C9%FA%B3%CC%D0%F2%C9%E8%BC%C6%BE%BA%C8%FC-%C5%AE%C9%FA%D7%A8%B3%A1&amp;source=1&amp;searchmode=source" target="_blank" rel="noopener">“字节跳动杯”2018中国大学生程序设计竞赛-女生专场</a></p>
<h2 id="Recommend"><a href="#Recommend" class="headerlink" title="Recommend"></a>Recommend</h2><p>liuyiding   |   We have carefully selected several similar problems for you:  <a href="http://acm.hdu.edu.cn/showproblem.php?pid=6447" target="_blank" rel="noopener">6447</a> <a href="http://acm.hdu.edu.cn/showproblem.php?pid=6446" target="_blank" rel="noopener">6446</a> <a href="http://acm.hdu.edu.cn/showproblem.php?pid=6445" target="_blank" rel="noopener">6445</a> <a href="http://acm.hdu.edu.cn/showproblem.php?pid=6444" target="_blank" rel="noopener">6444</a> <a href="http://acm.hdu.edu.cn/showproblem.php?pid=6443" target="_blank" rel="noopener">6443</a></p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>根据题目进行模拟就好，输出那部分由于 markdown 编辑器我不知道咋弄= =，所以用..代替了。代码如下：<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span> ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> ch[<span class="number">5</span>] = &#123; <span class="string">' '</span> , <span class="string">'|'</span> , <span class="string">'['</span> , <span class="string">']'</span> , <span class="string">'X'</span> &#125; ;</span><br><span class="line"><span class="built_in">string</span> str = <span class="string">"AC*"</span> ;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t ;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; t ;</span><br><span class="line">    <span class="keyword">while</span> ( t -- )&#123;</span><br><span class="line">        <span class="keyword">int</span> problem_num ;</span><br><span class="line">        <span class="built_in">string</span> team_rank , team_name , state ;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; team_rank &gt;&gt; team_name &gt;&gt; problem_num &gt;&gt; state ;</span><br><span class="line">        <span class="keyword">if</span> ( state == <span class="string">"Running"</span> )&#123;</span><br><span class="line">            <span class="keyword">int</span> point_num ;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; point_num ;</span><br><span class="line">            <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">3</span> - team_rank.size() ; i ++ )&#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; ch[<span class="number">0</span>] ;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; team_rank &lt;&lt; ch[<span class="number">1</span>] &lt;&lt; team_name ;</span><br><span class="line">            <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">16</span> - team_name.size() ; i ++ )&#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; ch[<span class="number">0</span>] ;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; ch[<span class="number">1</span>] &lt;&lt; problem_num &lt;&lt; ch[<span class="number">1</span>] &lt;&lt; ch[<span class="number">2</span>] ;</span><br><span class="line">            <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; point_num ; i ++ )&#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; ch[<span class="number">4</span>] ;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">10</span> - point_num ; i ++ )&#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; ch[<span class="number">0</span>] ;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; ch[<span class="number">3</span>] &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">3</span> - team_rank.size() ; i ++ )&#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; ch[<span class="number">0</span>] ;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; team_rank &lt;&lt; ch[<span class="number">1</span>] &lt;&lt; team_name ;</span><br><span class="line">            <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">16</span> - team_name.size() ; i ++ )&#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; ch[<span class="number">0</span>] ;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; ch[<span class="number">1</span>] &lt;&lt; problem_num &lt;&lt; ch[<span class="number">1</span>] &lt;&lt; ch[<span class="number">2</span>] ;</span><br><span class="line">            <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">4</span> ; i ++ )&#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; ch[<span class="number">0</span>] ;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> ( state == <span class="string">"FB"</span> )&#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; str ;</span><br><span class="line">                <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">6</span> - str.size() ; i ++ )&#123;</span><br><span class="line">                    <span class="built_in">cout</span> &lt;&lt; ch[<span class="number">0</span>] ;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; ch[<span class="number">3</span>] &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; state ;</span><br><span class="line">                <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">6</span> - state.size() ; i ++ )&#123;</span><br><span class="line">                    <span class="built_in">cout</span> &lt;&lt; ch[<span class="number">0</span>] ;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; ch[<span class="number">3</span>] &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Online Judge</category>
      </categories>
      <tags>
        <tag>HDU</tag>
        <tag>模拟</tag>
      </tags>
  </entry>
  <entry>
    <title>HDU 1032 The 3n + 1 problem</title>
    <url>/2018/11/05/HDU-1032-The-3n-1-problem/</url>
    <content><![CDATA[<h1 id="The-3n-1-problem"><a href="#The-3n-1-problem" class="headerlink" title="The 3n + 1 problem"></a>The 3n + 1 problem</h1><p><strong>Time Limit: 2000/1000 MS (Java/Others)    Memory Limit: 65536/32768 K (Java/Others)<br>Total Submission(s): 48038    Accepted Submission(s): 17355</strong> </p>
<h2 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h2><p>Problems in Computer Science are often classified as belonging to a certain class of problems (e.g., NP, Unsolvable, Recursive). In this problem you will be analyzing a property of an algorithm whose classification is not known for all possible inputs.</p>
<p>Consider the following algorithm: </p>
<pre><code>1\.      input n

2\.      print n

3\.      if n = 1 then STOP

4\.           if n is odd then n &lt;- 3n + 1

5\.           else n &lt;- n / 2

6\.      GOTO 2
</code></pre><p>Given the input 22, the following sequence of numbers will be printed 22 11 34 17 52 26 13 40 20 10 5 16 8 4 2 1 </p>
<p>It is conjectured that the algorithm above will terminate (when a 1 is printed) for any integral input value. Despite the simplicity of the algorithm, it is unknown whether this conjecture is true. It has been verified, however, for all integers n such that 0 &lt; n &lt; 1,000,000 (and, in fact, for many more numbers than this.) </p>
<p>Given an input n, it is possible to determine the number of numbers printed (including the 1). For a given n this is called the cycle-length of n. In the example above, the cycle length of 22 is 16. </p>
<p>For any two numbers i and j you are to determine the maximum cycle length over all numbers between i and j. </p>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>The input will consist of a series of pairs of integers i and j, one pair of integers per line. All integers will be less than 1,000,000 and greater than 0. </p>
<p>You should process all pairs of integers and for each pair determine the maximum cycle length over all integers between and including i and j. </p>
<p>You can assume that no opperation overflows a 32-bit integer.</p>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>For each pair of input integers i and j you should output i, j, and the maximum cycle length for integers between and including i and j. These three numbers should be separated by at least one space with all three numbers on one line and with one line of output for each line of input. The integers i and j must appear in the output in the same order in which they appeared in the input and should be followed by the maximum cycle length (on the same line). </p>
<h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><p>1 10<br>100 200<br>201 210<br>900 1000</p>
<h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><p>1 10 20<br>100 200 125<br>201 210 89<br>900 1000 174  </p>
<h2 id="Source"><a href="#Source" class="headerlink" title="Source"></a>Source</h2><p><a href="http://acm.hdu.edu.cn/search.php?field=problem&amp;key=UVA&amp;source=1&amp;searchmode=source" target="_blank" rel="noopener">UVA</a></p>
<h2 id="Recommend"><a href="#Recommend" class="headerlink" title="Recommend"></a>Recommend</h2><p>mcqsmall   |   We have carefully selected several similar problems for you:  <a href="http://acm.hdu.edu.cn/showproblem.php?pid=1021" target="_blank" rel="noopener">1021</a> <a href="http://acm.hdu.edu.cn/showproblem.php?pid=1002" target="_blank" rel="noopener">1002</a> <a href="http://acm.hdu.edu.cn/showproblem.php?pid=1020" target="_blank" rel="noopener">1020</a> <a href="http://acm.hdu.edu.cn/showproblem.php?pid=1017" target="_blank" rel="noopener">1017</a> <a href="http://acm.hdu.edu.cn/showproblem.php?pid=1012" target="_blank" rel="noopener">1012</a></p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>题目大意就是给定一个范围(注意给的 i ， j 没指定谁大谁小)，让你求出这个范围内的数字需要进行 3n + 1 的最多的次数。根据题意模拟就好，代码如下：<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span> ;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a , b ;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="built_in">scanf</span>(<span class="string">"%d %d"</span> , &amp;a , &amp;b) != EOF )&#123;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span> ;</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> i = min(a , b) ; i &lt;= max(a , b) ; i ++ )&#123;</span><br><span class="line">            <span class="keyword">int</span> x = i ;</span><br><span class="line">            <span class="keyword">int</span> time = <span class="number">0</span> ;</span><br><span class="line">            <span class="keyword">while</span> ( x != <span class="number">1</span> )&#123;</span><br><span class="line">                time ++ ;</span><br><span class="line">                <span class="keyword">if</span> ( x &amp; <span class="number">1</span> )&#123;</span><br><span class="line">                    x = <span class="number">3</span> * x + <span class="number">1</span> ;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    x /= <span class="number">2</span> ;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            ans = max(ans , ++ time) ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d %d %d\n"</span> , a , b , ans) ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Online Judge</category>
      </categories>
      <tags>
        <tag>HDU</tag>
        <tag>模拟</tag>
      </tags>
  </entry>
  <entry>
    <title>Hrbust 2093 真·找规律</title>
    <url>/2018/11/04/Hrbust-2093-%E7%9C%9F%C2%B7%E6%89%BE%E8%A7%84%E5%BE%8B/</url>
    <content><![CDATA[<h2 id="真•找规律"><a href="#真•找规律" class="headerlink" title="真•找规律"></a>真•找规律</h2><h3 id="Time-Limit-500-MS-Memory-Limit-65536-K"><a href="#Time-Limit-500-MS-Memory-Limit-65536-K" class="headerlink" title="Time Limit: 500 MS    Memory Limit: 65536 K"></a>Time Limit: 500 MS    Memory Limit: 65536 K</h3><h3 id="Total-Submit-1431-910-users-Total-Accepted-1059-880-users-Rating-Special-Judge-No"><a href="#Total-Submit-1431-910-users-Total-Accepted-1059-880-users-Rating-Special-Judge-No" class="headerlink" title="Total Submit: 1431(910 users)    Total Accepted: 1059(880 users)    Rating:     Special Judge: No"></a>Total Submit: 1431(910 users)    Total Accepted: 1059(880 users)    Rating:     Special Judge: No</h3><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>传说大家最喜欢找规律了是不是。 ^_^<br>参见附表，表中都是5位数，他们有很强烈的规律性呦~当然他们肯定不止这么多。<br>请找出所有符合这样规律的五位数（不含前导0，比如不能是00000），从小到大将他们全部输出。</p>
<p>下表是 30个具有规律性的数字。</p>
<p>48032</p>
<p>34012</p>
<p>77749</p>
<p>48932</p>
<p>48732</p>
<p>24308</p>
<p>35015</p>
<p>48132</p>
<p>31403</p>
<p>48432</p>
<p>44816</p>
<p>48332</p>
<p>63518</p>
<p>53615</p>
<p>19009</p>
<p>87656</p>
<p>37621</p>
<p>30500</p>
<p>51205</p>
<p>80900</p>
<p>18308</p>
<p>48232</p>
<p>95545</p>
<p>48832</p>
<p>59145</p>
<p>48632</p>
<p>77449</p>
<p>63218</p>
<p>42108</p>
<p>48532</p>
<h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><p>没有Input 。</p>
<h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p>从小到大输出所有存在规律的数字。</p>
<h3 id="Source"><a href="#Source" class="headerlink" title="Source"></a>Source</h3><p>哈尔滨理工大学第四届ACM程序设计竞赛（同步赛）</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>规律就是一个五位数的后两位数字等于前两个数的乘积…代码如下：<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span> ;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">10000</span> ; i &lt;= <span class="number">99999</span> ; i ++ )&#123;</span><br><span class="line">        <span class="keyword">int</span> x = i ;</span><br><span class="line">        <span class="keyword">int</span> one = x % <span class="number">10</span> ;</span><br><span class="line">        x /= <span class="number">10</span> ;</span><br><span class="line">        <span class="keyword">int</span> two = x % <span class="number">10</span> ;</span><br><span class="line">        x /= <span class="number">100</span> ;</span><br><span class="line">        <span class="keyword">int</span> index_one = x % <span class="number">10</span> ;</span><br><span class="line">        x /= <span class="number">10</span> ;</span><br><span class="line">        <span class="keyword">int</span> index_two = x % <span class="number">10</span> ;</span><br><span class="line">        <span class="keyword">if</span> ( index_one * index_two == two * <span class="number">10</span> + one )&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span> , i) ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Online Judge</category>
      </categories>
      <tags>
        <tag>日常水题</tag>
        <tag>HrbustOJ</tag>
      </tags>
  </entry>
  <entry>
    <title>CSU 2079 觉醒！MACROSS！</title>
    <url>/2018/11/03/CSU-2079-%E8%A7%89%E9%86%92%EF%BC%81MACROSS%EF%BC%81/</url>
    <content><![CDATA[<h2 id="觉醒！MACROSS！"><a href="#觉醒！MACROSS！" class="headerlink" title="觉醒！MACROSS！"></a>觉醒！MACROSS！</h2><h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>西元2999年，一颗不明的巨大“流星”坠落在位于地球上的CSU（California State University）校园内。为此全世界的专家蜂拥而至，对此展开了密集研究。经过调查证实这其实是一艘外星人的宇宙船！之後世界的某些强国为了将其修复并弥补坠落时对地球环境所造成的破坏而组成了统合政府，交由新组建的地球统合军将其改造成为全长1200公尺的超大型主力战舰，并将其命名为MACROSS。此时CSU的名声也已响彻海内外，新成立的宇宙军事学院成为众多舰队军官们的求学圣地。</p>
<p>就在10年后MACROSS举行正式起用下水典礼的当天，在月球轨道附近突然发现有大规模的时空跳跃反应。而此时MACROSS的主炮竟自动发射，并击中在月球出现的外星舰队观测舰！外星人Zentraedi舰队和地球之间的星间战争爆发，作为舰队年轻指挥官的你随着MACROSS升空启航，而我们的故事也就此拉开序幕。</p>
<p>正在星际间航行的MACROSS很快就面临了来自外星舰队的报复行动，大量的外星战机编队从四面八方逼近并发射激光武器。此刻你收到了来自舰长格罗巴尔将军命令，要求立刻发射主炮予以还击。经过十年的改造，MACROSS的辐射型主炮威力无穷，凡是射程范围内的外界物体都将被给予毁灭性的打击。因此你的工作只要合理的设置射程参数，以最小的代价消灭敌人。这是MACROSS觉醒后的第一场战役，你准备好了吗！？</p>
<p> <img src="https://odzkskevi.qnssl.com/b3f3f5da9dfb0ec931ed54b11d6502d9?v=1535357673" alt="觉醒！MACROSS！"></p>
<p>觉醒！MACROSS！</p>
<h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><p>输入数据第一行为一个正整数T(1 ≤ T ≤ 10)，预示着MACROSS即将面临多少波Zentraedi舰队的报复行动。</p>
<p>每一波报复行动开始时，舰队侦查部门都会发送一行讯息告诉你有_N_(1 ≤ _N_ ≤ 10<sup>5</sup>)艘敌机即将来临。紧接着这些敌机相对于MACROSS的空间位置(_x_<sub>_i_</sub>, _y_<sub>_i_</sub>, _z_<sub>_i_</sub>) |_x_<sub>_i_</sub>|,|_y_<sub>_i_</sub>|,|_z_<sub>_i_</sub>|≤500也相应地传送到你的控制台上。</p>
<h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p>对于每次攻击，计算出最小所需射程后立刻输出一行并回车确认发射。你的军官生涯才刚刚开始，成败在此一举！</p>
<h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h3><p>2<br>3<br>0 0 1<br>0 -1 0<br>1 0 0<br>5<br>52 75 -10<br>88 -13 44<br>56 9 5<br>-298 33 124<br>12 -70 8  </p>
<h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h3><p>1.00<br>324.45  </p>
<h3 id="Hint"><a href="#Hint" class="headerlink" title="Hint"></a>Hint</h3><p>输入数据保证都为整数且射程只需精确到小数点后两位。</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>题目大意是给 n 个点，找到空间中最远的点的距离就好了。代码如下：<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span> ;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t ;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span> , &amp;t) ;</span><br><span class="line">    <span class="keyword">while</span> ( t -- )&#123;</span><br><span class="line">        <span class="keyword">int</span> n ;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span> , &amp;n) ;</span><br><span class="line">        <span class="keyword">double</span> dis = <span class="number">-1</span> ;</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; n ; i ++ )&#123;</span><br><span class="line">            <span class="keyword">double</span> a , b , c ;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%lf %lf %lf"</span> , &amp;a , &amp;b , &amp;c) ;</span><br><span class="line">            <span class="keyword">double</span> index = <span class="built_in">sqrt</span>( a * a + b * b + c * c ) ;</span><br><span class="line">            dis = max( dis , index ) ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%.2f\n"</span> , dis) ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Online Judge</category>
      </categories>
      <tags>
        <tag>日常水题</tag>
        <tag>CSU</tag>
      </tags>
  </entry>
  <entry>
    <title>HrbustOJ 1644 水水更健康</title>
    <url>/2018/11/02/HrbustOJ-1644-%E6%B0%B4%E6%B0%B4%E6%9B%B4%E5%81%A5%E5%BA%B7/</url>
    <content><![CDATA[<h2 id="水水更健康"><a href="#水水更健康" class="headerlink" title="水水更健康"></a>水水更健康</h2><h3 id="Time-Limit-1000-MS-Memory-Limit-32768-K"><a href="#Time-Limit-1000-MS-Memory-Limit-32768-K" class="headerlink" title="Time Limit: 1000 MS    Memory Limit: 32768 K"></a>Time Limit: 1000 MS    Memory Limit: 32768 K</h3><h3 id="Total-Submit-559-275-users-Total-Accepted-223-206-users-Rating-Special-Judge-No"><a href="#Total-Submit-559-275-users-Total-Accepted-223-206-users-Rating-Special-Judge-No" class="headerlink" title="Total Submit: 559(275 users)    Total Accepted: 223(206 users)    Rating:     Special Judge: No"></a>Total Submit: 559(275 users)    Total Accepted: 223(206 users)    Rating:     Special Judge: No</h3><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>水神为了越来越健康，于是决定每天一道水题~</p>
<h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><p>本题有多组测试数据，每组测试数据占n+1行。<br>第一行输入一个数字n (1 ≤ n ≤ 100)，表示正整数的个数，接下来n行每行输入一个正整数，每个正整数不超过10^100。</p>
<h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p>每组测试数据输出占n行，按照从小到大的顺序输出。</p>
<h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h3><p>2<br>456<br>56<br>3<br>1<br>90<br>7  </p>
<h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h3><p>56<br>456<br>1<br>7<br>90  </p>
<h3 id="Hint"><a href="#Hint" class="headerlink" title="Hint"></a>Hint</h3><p>保证不会出现 001 等非法输入。  </p>
<h3 id="Author"><a href="#Author" class="headerlink" title="Author"></a>Author</h3><p>sunshine@Hrbust  </p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>由于数字非常大而数据量特别小，所以我们可以用 string 存这个数字，用 sort 对其排序。而 sort 默认以字典序给 string 排序，所以写一个 cmp 函数传给它即可，具体思路就是长度相等时返回较小字典序的那个，长度不等时返回长度较小的那个。代码如下：<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span> ;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="built_in">string</span> str1 , <span class="built_in">string</span> str2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ( str1.length() == str2.length() )&#123;</span><br><span class="line">        <span class="keyword">return</span> str1 &lt; str2 ;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> str1.length() &lt; str2.length() ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n ;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="built_in">cin</span> &gt;&gt; n )&#123;</span><br><span class="line">        <span class="built_in">string</span> str[n] ;</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; n ; i ++ )&#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; str[i] ;</span><br><span class="line">        &#125;</span><br><span class="line">        sort(str , str + n , cmp) ;</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; n ; i ++ )&#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; str[i] &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Online Judge</category>
      </categories>
      <tags>
        <tag>HrbustOJ</tag>
        <tag>排序</tag>
        <tag>字典序</tag>
      </tags>
  </entry>
  <entry>
    <title>POJ 2299 Ultra QuickSort</title>
    <url>/2018/11/01/POJ-2299-Ultra-QuickSort/</url>
    <content><![CDATA[<h2 id="Ultra-QuickSort"><a href="#Ultra-QuickSort" class="headerlink" title="Ultra-QuickSort"></a>Ultra-QuickSort</h2><p>| <strong>Time Limit:</strong> 7000MS |   | <strong>Memory Limit:</strong> 65536K |<br>| <strong>Total Submissions:</strong> 72479 |   | <strong>Accepted:</strong> 27197 |</p>
<h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p><img src="http://poj.org/images/2299_1.jpg" alt=""><br>In this problem, you have to analyze a particular sorting algorithm. The algorithm processes a sequence of n distinct integers by swapping two adjacent sequence elements until the sequence is sorted in ascending order. For the input sequence </p>
<center>9 1 0 5 4 ,</center>

<p>Ultra-QuickSort produces the output </p>
<center>0 1 4 5 9 .</center>

<p>Your task is to determine how many swap operations Ultra-QuickSort needs to perform in order to sort a given input sequence.</p>
<h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><p>The input contains several test cases. Every test case begins with a line that contains a single integer n &lt; 500,000 – the length of the input sequence. Each of the the following n lines contains a single integer 0 ≤ a[i] ≤ 999,999,999, the i-th input sequence element. Input is terminated by a sequence of length n = 0. This sequence must not be processed.</p>
<h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p> For every input sequence, your program prints a single line containing an integer number op, the minimum number of swap operations necessary to sort the given input sequence.</p>
<h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h3><p>5<br>9<br>1<br>0<br>5<br>4<br>3<br>1<br>2<br>3<br>0  </p>
<h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h3><p>6<br>0  </p>
<h3 id="Source"><a href="#Source" class="headerlink" title="Source"></a>Source</h3><p><a href="http://poj.org/searchproblem?field=source&amp;key=Waterloo+local+2005.02.05" target="_blank" rel="noopener">Waterloo local 2005.02.05</a></p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>快速排序模板题，代码如下：<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span> ;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">merge</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; &amp;a , <span class="keyword">long</span> <span class="keyword">long</span> l , <span class="keyword">long</span> <span class="keyword">long</span> mid , <span class="keyword">long</span> <span class="keyword">long</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> help[r-l+<span class="number">1</span>] ;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> k = <span class="number">0</span> ;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> p1 = l , p2 = mid + <span class="number">1</span> ;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> sum = <span class="number">0</span> ;</span><br><span class="line">    <span class="keyword">while</span> ( p1 &lt;= mid &amp;&amp; p2 &lt;= r )&#123;</span><br><span class="line">        sum += a[p1] &gt; a[p2] ? (r-p2+<span class="number">1</span>) : <span class="number">0</span> ;</span><br><span class="line">        help[k++] = a[p1] &gt; a[p2] ? a[p1++] : a[p2++] ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( p1 &lt;= mid )&#123;</span><br><span class="line">        help[k++] = a[p1++] ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( p2 &lt;= r )&#123;</span><br><span class="line">        help[k++] = a[p2++] ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">long</span> <span class="keyword">long</span> i = <span class="number">0</span> ; i &lt; r-l+<span class="number">1</span> ; i ++ )&#123;</span><br><span class="line">        a[i+l] = help[i] ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">merge_sort</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; &amp;a , <span class="keyword">long</span> <span class="keyword">long</span> l , <span class="keyword">long</span> <span class="keyword">long</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ( l == r ) <span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> mid = l + (r-l) / <span class="number">2</span> ;</span><br><span class="line">    <span class="keyword">return</span> merge_sort(a,l,mid) + merge_sort(a,mid+<span class="number">1</span>,r) + merge(a,l,mid,r) ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> n ;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="built_in">cin</span> &gt;&gt; n &amp;&amp; n )&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; a ;</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">long</span> <span class="keyword">long</span> i = <span class="number">0</span> ; i &lt; n ; i ++ )&#123;</span><br><span class="line">            <span class="keyword">long</span> <span class="keyword">long</span> x ;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; x ;</span><br><span class="line">            a.push_back(x) ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; merge_sort(a,<span class="number">0</span>,a.size()<span class="number">-1</span>) &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Online Judge</category>
      </categories>
      <tags>
        <tag>排序</tag>
        <tag>POJ</tag>
      </tags>
  </entry>
  <entry>
    <title>POJ 1562 Oil Deposits</title>
    <url>/2018/10/31/POJ-1562-Oil-Deposits/</url>
    <content><![CDATA[<h2 id="Oil-Deposits"><a href="#Oil-Deposits" class="headerlink" title="Oil Deposits"></a>Oil Deposits</h2><p>| <strong>Time Limit:</strong> 1000MS |   | <strong>Memory Limit:</strong> 10000K |<br>| <strong>Total Submissions:</strong> 21879 |   | <strong>Accepted:</strong> 11397 |</p>
<h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>The GeoSurvComp geologic survey company is responsible for detecting underground oil deposits. GeoSurvComp works with one large rectangular region of land at a time, and creates a grid that divides the land into numerous square plots. It then analyzes each plot separately, using sensing equipment to determine whether or not the plot contains oil. A plot containing oil is called a pocket. If two pockets are adjacent, then they are part of the same oil deposit. Oil deposits can be quite large and may contain numerous pockets. Your job is to determine how many different oil deposits are contained in a grid.</p>
<h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><p>The input contains one or more grids. Each grid begins with a line containing m and n, the number of rows and columns in the grid, separated by a single space. If m = 0 it signals the end of the input; otherwise 1 &lt;= m &lt;= 100 and 1 &lt;= n &lt;= 100. Following this are m lines of n characters each (not counting the end-of-line characters). Each character corresponds to one plot, and is either ‘*’, representing the absence of oil, or ‘@’, representing an oil pocket. </p>
<h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p>are adjacent horizontally, vertically, or diagonally. An oil deposit will not contain more than 100 pockets.</p>
<h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h3><p>1 1  </p>
<ul>
<li>3 5<br><em>@</em>@<em><br><strong>@</strong>  
</em>@<em>@</em><br>1 8<br>@@<strong><strong>@*<br>5 5   
</strong></strong>@<br><em>@@</em>@<br><em>@**@<br>@@@</em>@<br>@@**@<br>0 0  </li>
</ul>
<h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h3><p>0<br>1<br>2<br>2  </p>
<h3 id="Source"><a href="#Source" class="headerlink" title="Source"></a>Source</h3><p><a href="http://poj.org/searchproblem?field=source&amp;key=Mid-Central+USA+1997" target="_blank" rel="noopener">Mid-Central USA 1997</a></p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>求 @ 的连通块的问题，上下左右左上右上左下右下八个方向有 @ 的话算连通，问共有多少个连通块。用 dfs 可解决。代码如下：<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span> ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1000</span> ;</span><br><span class="line"><span class="keyword">char</span> arr[MAXN][MAXN] ;</span><br><span class="line"><span class="keyword">int</span> n , m ;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">( <span class="keyword">int</span> i , <span class="keyword">int</span> j )</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ( i &gt;= n || j &gt;= m || i &lt; <span class="number">0</span> || j &lt; <span class="number">0</span> ) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">if</span> ( arr[i][j] != <span class="string">'@'</span> ) <span class="keyword">return</span> ;</span><br><span class="line">    arr[i][j] = <span class="string">'*'</span> ;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> a = <span class="number">-1</span> ; a &lt;= <span class="number">1</span> ; a ++ )&#123;</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> b = <span class="number">-1</span> ; b &lt;= <span class="number">1</span> ; b ++ )&#123;</span><br><span class="line">            <span class="keyword">if</span> ( a != <span class="number">0</span> || b != <span class="number">0</span> )&#123;</span><br><span class="line">                dfs( i + a , b + j ) ;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &amp;&amp; n &amp;&amp; m )&#123;</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; n ; i ++ )&#123;</span><br><span class="line">            <span class="keyword">for</span> ( <span class="keyword">int</span> j = <span class="number">0</span> ; j &lt; m ; j ++ )&#123;</span><br><span class="line">                <span class="built_in">cin</span> &gt;&gt; arr[i][j] ;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span> ;</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; n ; i ++ )&#123;</span><br><span class="line">            <span class="keyword">for</span> ( <span class="keyword">int</span> j = <span class="number">0</span> ; j &lt; m ; j ++ )&#123;</span><br><span class="line">                <span class="keyword">if</span> ( arr[i][j] == <span class="string">'@'</span> )&#123;</span><br><span class="line">                    dfs( i , j ) ;</span><br><span class="line">                    ans ++ ;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Online Judge</category>
      </categories>
      <tags>
        <tag>POJ</tag>
        <tag>搜索</tag>
        <tag>DFS</tag>
      </tags>
  </entry>
  <entry>
    <title>POJ 2387 Til the Cows Come Home</title>
    <url>/2018/10/30/POJ-2387-Til-the-Cows-Come-Home/</url>
    <content><![CDATA[<h2 id="Til-the-Cows-Come-Home"><a href="#Til-the-Cows-Come-Home" class="headerlink" title="Til the Cows Come Home"></a>Til the Cows Come Home</h2><p>| <strong>Time Limit:</strong> 1000MS |   | <strong>Memory Limit:</strong> 65536K |<br>| <strong>Total Submissions:</strong> 76501 |   | <strong>Accepted:</strong> 25456 |</p>
<h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>Bessie is out in the field and wants to get back to the barn to get as much sleep as possible before Farmer John wakes her for the morning milking. Bessie needs her beauty sleep, so she wants to get back as quickly as possible. </p>
<p>Farmer John’s field has N (2 &lt;= N &lt;= 1000) landmarks in it, uniquely numbered 1..N. Landmark 1 is the barn; the apple tree grove in which Bessie stands all day is landmark N. Cows travel in the field using T (1 &lt;= T &lt;= 2000) bidirectional cow-trails of various lengths between the landmarks. Bessie is not confident of her navigation ability, so she always stays on a trail from its start to its end once she starts it. </p>
<p>Given the trails between the landmarks, determine the minimum distance Bessie must walk to get back to the barn. It is guaranteed that some such route exists.</p>
<h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><ul>
<li><p>Line 1: Two integers: T and N </p>
</li>
<li><p>Lines 2..T+1: Each line describes a trail as three space-separated integers. The first two integers are the landmarks between which the trail travels. The third integer is the length of the trail, range 1..100.</p>
</li>
</ul>
<h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><ul>
<li>Line 1: A single integer, the minimum distance that Bessie must travel to get from landmark N to landmark 1.</li>
</ul>
<h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h3><p>5 5<br>1 2 20<br>2 3 30<br>3 4 20<br>4 5 20<br>1 5 100  </p>
<h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h3><p>90</p>
<h3 id="Hint"><a href="#Hint" class="headerlink" title="Hint"></a>Hint</h3><h4 id="INPUT-DETAILS"><a href="#INPUT-DETAILS" class="headerlink" title="INPUT DETAILS:"></a>INPUT DETAILS:</h4><p>There are five landmarks. </p>
<h4 id="OUTPUT-DETAILS"><a href="#OUTPUT-DETAILS" class="headerlink" title="OUTPUT DETAILS:"></a>OUTPUT DETAILS:</h4><p>Bessie can get home by following trails 4, 3, 2, and 1.</p>
<h3 id="Source"><a href="#Source" class="headerlink" title="Source"></a>Source</h3><p><a href="http://poj.org/searchproblem?field=source&amp;key=USACO+2004+November" target="_blank" rel="noopener">USACO 2004 November</a></p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>dijkstra寻找最短路模版题。代码如下：<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span> ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span> ;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">2005</span> ;</span><br><span class="line"><span class="keyword">int</span> dis[MAXN] ;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">map</span>[MAXN][MAXN] ;</span><br><span class="line"><span class="keyword">bool</span> vis[MAXN] ;</span><br><span class="line"><span class="keyword">int</span> n , m ;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dijkstra</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cur = <span class="number">1</span> ;</span><br><span class="line">    dis[cur] = <span class="number">0</span> ;</span><br><span class="line">    vis[cur] = <span class="literal">true</span> ;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= n ; i ++ )&#123;</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> j = <span class="number">1</span> ; j &lt;= n ; j ++ )&#123;</span><br><span class="line">            <span class="keyword">if</span> ( !vis[j] &amp;&amp; <span class="built_in">map</span>[cur][j] + dis[cur] &lt; dis[j] )&#123;</span><br><span class="line">                dis[j] = <span class="built_in">map</span>[cur][j] + dis[cur] ;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mini = INF ;</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> j = <span class="number">1</span> ; j &lt;= n ; j ++ )&#123;</span><br><span class="line">            <span class="keyword">if</span> ( !vis[j] &amp;&amp; dis[j] &lt; mini )&#123;</span><br><span class="line">                mini = dis[cur=j] ;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        vis[cur] = <span class="literal">true</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(vis , <span class="literal">false</span> , <span class="keyword">sizeof</span>(vis)) ;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= n ; i ++ )&#123;</span><br><span class="line">        dis[i] = INF ;</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> j = <span class="number">1</span> ; j &lt;= n ; j ++ )&#123;</span><br><span class="line">            <span class="built_in">map</span>[i][j] = INF ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="built_in">cin</span> &gt;&gt; m &gt;&gt; n )&#123;</span><br><span class="line">        init() ;</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; m ; i ++ )&#123;</span><br><span class="line">            <span class="keyword">int</span> from , to , val ;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; from &gt;&gt; to &gt;&gt; val ;</span><br><span class="line">            <span class="keyword">if</span> ( <span class="built_in">map</span>[from][to] &gt; val )&#123;</span><br><span class="line">                <span class="built_in">map</span>[to][from] = <span class="built_in">map</span>[from][to] = val ;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        dijkstra() ;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; dis[n] &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Online Judge</category>
      </categories>
      <tags>
        <tag>模板</tag>
        <tag>POJ</tag>
        <tag>最短路</tag>
        <tag>dijkstra</tag>
      </tags>
  </entry>
  <entry>
    <title>HihoCoder 1409 Smallest Sub Array</title>
    <url>/2018/10/29/HihoCoder-1409-Smallest-Sub-Array/</url>
    <content><![CDATA[<h3 id="1409-Smallest-Sub-Array"><a href="#1409-Smallest-Sub-Array" class="headerlink" title="1409 : Smallest Sub Array"></a>1409 : Smallest Sub Array</h3><p> 时间限制:10000ms</p>
<p> 单点时限:1000ms</p>
<p> 内存限制:256MB</p>
<h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>Given an array of integers A, find the smallest contiguous sub array B of A such that when you sort B in ascending order the whole array A becomes sorted as well.</p>
<p>For example if A = [1, 2, 3, 7, 4, 6, 5, 8] the smallest B will be [7, 4, 6, 5].  </p>
<h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><p>The first line contains an integer N denoting the length of A. (1 &lt;= N &lt;= 100000)</p>
<p>The second line contains N integers denoting the array A. (0 &lt;= A<sub>i</sub> &lt;= 100000000)</p>
<h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><p>The length of the smalltest sub array B.</p>
<dt>样例输入</dt>

<p>8<br>1 2 3 7 4 6 5 8</p>
<dt>样例输出</dt>

<p>4</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>题目大意是给一个数组 A ，找到最小长度的子序列，使排序这段子序列之后整个数组有序。<br>方法一：<br>输入 A 数组的时候记录 B 数组，将 A 数组排序，从头开始一一比对 B 数组中的元素，若 B 数组有一个元素与排序后的 A 数组不同，则记录此时的下标。再反之从尾开始一一比对，记录不同的元素的下标。用这两个下标相减再加一就可得到答案。<br>方法二：<br>在 A 数组中从下标为 1 开始，记录第一个符合 A[i] &lt; A[i - 1] 这个条件的 i - 1 的下标。同理，从 n - 1 开始，记录第一个符合 a[i] &lt; a[i - 1] 这个条件的 i 的下标。用这两个下标相减再加一就可得到答案。</p>
<p>代码如下：<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//方法一</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ull_ unsigned long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span> ;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n ;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="built_in">cin</span> &gt;&gt; n )&#123;</span><br><span class="line">        <span class="keyword">int</span> a[n + <span class="number">10</span>] , b[n + <span class="number">10</span>] ;</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; n ; i ++ )&#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; a[i] ;</span><br><span class="line">            b[i] = a[i] ;</span><br><span class="line">        &#125;</span><br><span class="line">        sort(a , a + n) ;</span><br><span class="line">        <span class="keyword">int</span> l , r ;</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; n ; i ++ )&#123;</span><br><span class="line">            <span class="keyword">if</span> ( b[i] != a[i] )&#123;</span><br><span class="line">                l = i ;</span><br><span class="line">                <span class="keyword">break</span> ;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> i = n - <span class="number">1</span> ; i &gt;= <span class="number">0</span> ; i -- )&#123;</span><br><span class="line">            <span class="keyword">if</span> ( b[i] != a[i] )&#123;</span><br><span class="line">                r = i ;</span><br><span class="line">                <span class="keyword">break</span> ;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; r - l + <span class="number">1</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法二</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ull_ unsigned long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span> ;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n ;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="built_in">cin</span> &gt;&gt; n )&#123;</span><br><span class="line">        <span class="keyword">int</span> a[n + <span class="number">10</span>] ;</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; n ; i ++ )&#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; a[i] ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> l , r ;</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">1</span> ; i &lt; n ; i ++ )&#123;</span><br><span class="line">            <span class="keyword">if</span> ( a[i] &lt; a[i - <span class="number">1</span>] )&#123;</span><br><span class="line">                l = i - <span class="number">1</span> ;</span><br><span class="line">                <span class="keyword">break</span> ;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> i = n - <span class="number">1</span> ; i &gt;= <span class="number">1</span> ; i -- )&#123;</span><br><span class="line">            <span class="keyword">if</span> ( a[i] &lt; a[i - <span class="number">1</span>] )&#123;</span><br><span class="line">                r = i ;</span><br><span class="line">                <span class="keyword">break</span> ;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; r - l + <span class="number">1</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Online Judge</category>
      </categories>
      <tags>
        <tag>HihoCoder</tag>
        <tag>暴力</tag>
      </tags>
  </entry>
  <entry>
    <title>HihoCoder 1408 The Lastest Time</title>
    <url>/2018/10/28/HihoCoder-1408-The-Lastest-Time/</url>
    <content><![CDATA[<h2 id="1408-The-Lastest-Time"><a href="#1408-The-Lastest-Time" class="headerlink" title="1408 : The Lastest Time"></a>1408 : The Lastest Time</h2><p> 时间限制:10000ms</p>
<p> 单点时限:1000ms</p>
<p> 内存限制:256MB</p>
<h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>What is latest time you can make with 4 digits A, B, C and D?</p>
<p>For example if the 4 digits are 1, 0, 0, 0, you can make 4 times with them: 00:01, 00:10, 01:00, 10:00. The lastest time will be 10:00. Note a valid time is between 00:00 and 23:59.</p>
<h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><p>One line with 4 digits A, B, C and D, separated by a space. (0 &lt;= A, B, C, D &lt;= 9)</p>
<h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><p>Output the lastest time in the format “hh:mm”. If there is no valid time output NOT POSSIBLE.  </p>
<dt>样例输入</dt>

<p>0 9 0 0</p>
<dt>样例输出</dt>

<p>09:00</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>题目大意是给四个数，输出这四个数能组成的最晚的时间。枚举就好，先倒序排序，再用 “反向全排列( prev_permutation() )” 判断是否含有符合条件的 (时间在 00:00 和 23:59 之间寻找最大的)，如果没有符合条件的输出 “NOT POSSIBLE”.<br>代码如下：<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ull_ unsigned long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span> ;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">5</span>] ;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">4</span> ; i ++ )&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a[i] ;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(a , a + <span class="number">4</span> , greater&lt;<span class="keyword">int</span>&gt;()) ;</span><br><span class="line">    <span class="keyword">bool</span> check = <span class="literal">false</span> ;</span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (a[<span class="number">0</span>] * <span class="number">10</span> + a[<span class="number">1</span>] &lt;= <span class="number">23</span> &amp;&amp; a[<span class="number">2</span>] * <span class="number">10</span> + a[<span class="number">3</span>] &lt;= <span class="number">59</span> )&#123;</span><br><span class="line">            check = <span class="literal">true</span> ;</span><br><span class="line">            <span class="keyword">break</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">while</span>(prev_permutation(a , a + <span class="number">4</span>)) ;</span><br><span class="line">    <span class="keyword">if</span> ( check )&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d%d:%d%d\n"</span> , a[<span class="number">0</span>] , a[<span class="number">1</span>] , a[<span class="number">2</span>] , a[<span class="number">3</span>]) ;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"NOT POSSIBLE\n"</span>) ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Online Judge</category>
      </categories>
      <tags>
        <tag>STL</tag>
        <tag>next_permutation()</tag>
        <tag>HihoCoder</tag>
        <tag>枚举</tag>
      </tags>
  </entry>
  <entry>
    <title>HihoCoder 1448 Split Array</title>
    <url>/2018/10/27/HihoCoder-1448-Split-Array/</url>
    <content><![CDATA[<h2 id="1448-Split-Array"><a href="#1448-Split-Array" class="headerlink" title="1448 : Split Array"></a>1448 : Split Array</h2><p>时间限制:10000ms</p>
<p>单点时限:1000ms</p>
<p>内存限制:256MB</p>
<h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>You are given an sorted integer array A and an integer K. Can you split A into several sub-arrays that each sub-array has exactly K continuous increasing integers.</p>
<p>For example you can split {1, 1, 2, 2, 3, 3, 3, 4, 4, 5, 5, 6}  into {1, 2, 3}, {1, 2, 3}, {3, 4, 5}, {4, 5, 6}.  </p>
<h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><p>The first line contains an integer T denoting the number of test cases. (1 &lt;= T &lt;= 5)</p>
<p>Each test case takes 2 lines. The first line contains an integer N denoting the size of array A and an integer K. (1 &lt;= N &lt;= 50000, 1 &lt;= K &lt;= N)</p>
<p>The second line contains N integers denoting array A. (1 &lt;= A<sub>i</sub> &lt;= 100000)</p>
<h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><p>For each test case output YES or NO in a separate line.</p>
<dt>样例输入</dt>

<p>2<br>12 3<br>1 1 2 2 3 3 3 4 4 5 5 6<br>12 4<br>1 1 2 2 3 3 3 4 4 5 5 6</p>
<dt>样例输出</dt>

<p>YES<br>NO</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>参考了<a href="https://hihocoder.com/discuss/question/5570" target="_blank" rel="noopener">hiho一下第224周《Split Array》题目分析</a>(新思路get！)<br>题目大意是给一个长为 n 的有序数组，问是否能将其分成任意份(大于零..)含有 k 个元素的连续递增的子数组。<br>可以用贪心解决，具体思路就是每一次寻找 A 数组内的最小值 minn ，以最小值 minn 为起点，找 A 数组内是否有子数组 minn , minn + 1 , minn + 2 , ····, minn + k - 1 等元素，如果其中一个元素不存在，则直接输出 NO , 如果均存在，在 A 数组中减去这些元素，继续重复以上过程，寻找最小值，以最小值为起点….当元素减少到最后，即 A 数组元素减少到零时，若都没有出现不能找到的情况，则代表可以达到要求输出 YES。代码如下(感觉还是写得复杂了…而且基本思路也还没有…还得继续努力啊… <em>(:зゝ∠)</em> )：<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ull_ unsigned long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span> ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> cnt[<span class="number">100005</span>] ;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t ;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; t ;</span><br><span class="line">    <span class="keyword">while</span> ( t -- )&#123;</span><br><span class="line">        <span class="built_in">memset</span>(cnt , <span class="number">0</span> , <span class="keyword">sizeof</span>(cnt)) ;</span><br><span class="line">        <span class="keyword">int</span> n , k ;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k ;</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; n ; i ++ )&#123;</span><br><span class="line">            <span class="keyword">int</span> x ;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; x ;</span><br><span class="line">            cnt[x] ++ ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">bool</span> check = <span class="literal">true</span> ;</span><br><span class="line">        <span class="keyword">int</span> time = n ;</span><br><span class="line">        <span class="keyword">while</span> ( time &gt; <span class="number">0</span> )&#123;</span><br><span class="line">            <span class="keyword">int</span> minn = <span class="number">100005</span> ;</span><br><span class="line">            <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt;= <span class="number">100000</span> ; i ++ )&#123;</span><br><span class="line">                <span class="keyword">if</span> ( cnt[i] != <span class="number">0</span> )&#123;</span><br><span class="line">                    minn = i ;</span><br><span class="line">                    <span class="keyword">break</span> ;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> num = <span class="number">0</span> ;</span><br><span class="line">            <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; k ; i ++ )&#123;</span><br><span class="line">                <span class="keyword">if</span> ( cnt[minn + num] == <span class="number">0</span> )&#123;</span><br><span class="line">                    check = <span class="literal">false</span> ;</span><br><span class="line">                    <span class="keyword">break</span> ;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    cnt[minn + num] -- ;</span><br><span class="line">                &#125;</span><br><span class="line">                num ++ ;</span><br><span class="line">            &#125;</span><br><span class="line">            time -= k ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ( check )&#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"YES"</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"NO"</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Online Judge</category>
      </categories>
      <tags>
        <tag>贪心</tag>
        <tag>HihoCoder</tag>
      </tags>
  </entry>
  <entry>
    <title>51Nod 1062 序列中最大的数</title>
    <url>/2018/10/26/51Nod-1062-%E5%BA%8F%E5%88%97%E4%B8%AD%E6%9C%80%E5%A4%A7%E7%9A%84%E6%95%B0/</url>
    <content><![CDATA[<h2 id="1062-序列中最大的数"><a href="#1062-序列中最大的数" class="headerlink" title="1062 序列中最大的数"></a>1062 序列中最大的数</h2><h3 id="题目来源：-Ural-1079"><a href="#题目来源：-Ural-1079" class="headerlink" title="题目来源： Ural 1079"></a>题目来源： <a href="http://acm.timus.ru/problem.aspx?space=1&amp;num=1079" target="_blank" rel="noopener">Ural 1079</a></h3><h3 id="基准时间限制：1-秒-空间限制：131072-KB-分值-10-难度：2级算法题"><a href="#基准时间限制：1-秒-空间限制：131072-KB-分值-10-难度：2级算法题" class="headerlink" title="基准时间限制：1 秒 空间限制：131072 KB 分值: 10 难度：2级算法题"></a>基准时间限制：1 秒 空间限制：131072 KB 分值: 10 <a href="https://www.51nod.com/onlineJudge/problemList.html#!groupId=3" target="_blank" rel="noopener">难度：2级算法题</a></h3><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>有这样一个序列a：<br>a[0] = 0<br>a[1] = 1<br>a[2i] = a[i]<br>a[2i+1] = a[i] + a[i+1]<br>输入一个数N，求a[0] - a[n]中最大的数。<br>a[0] = 0, a[1] = 1, a[2] = 1, a[3] = 2, a[4] = 1, a[5] = 3, a[6] = 2, a[7] = 3, a[8] = 1, a[9] = 4, a[10] = 3。<br>例如：n = 5，最大值是3，n = 10，最大值是4。</p>
<h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><p>第1行：一个数T，表示后面用作输入测试的数的数量。（1 &lt;= T &lt;= 10)<br>第2 - T + 1行：T个数，表示需要计算的n。（1 &lt;= n &lt;= 10^5)</p>
<h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p>共T行，每行1个最大值。</p>
<h3 id="Input示例"><a href="#Input示例" class="headerlink" title="Input示例"></a>Input示例</h3><p>2<br>5<br>10</p>
<h3 id="Output示例"><a href="#Output示例" class="headerlink" title="Output示例"></a>Output示例</h3><p>3<br>4</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>按题意模拟就好…日常水题…代码如下：<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ull_ unsigned long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span> ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">500050</span>] ;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    a[<span class="number">0</span>] = <span class="number">0</span> ;</span><br><span class="line">    a[<span class="number">1</span>] = <span class="number">1</span> ;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= <span class="number">100005</span> ; i ++ )&#123;</span><br><span class="line">        a[<span class="number">2</span> * i] = a[i] ;</span><br><span class="line">        a[<span class="number">2</span> * i + <span class="number">1</span>] = a[i] + a[i + <span class="number">1</span>] ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> t ;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; t ;</span><br><span class="line">    <span class="keyword">while</span> ( t -- )&#123;</span><br><span class="line">        <span class="keyword">int</span> x ;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; x ;</span><br><span class="line">        <span class="keyword">int</span> maxx = <span class="number">-1</span> ;</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt;= x ; i ++ )&#123;</span><br><span class="line">            maxx = max(maxx , a[i]) ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; maxx &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
  </entry>
  <entry>
    <title>HDU 1035 Robot Motion</title>
    <url>/2018/10/25/HDU-1035-Robot-Motion/</url>
    <content><![CDATA[<h2 id="Robot-Motion"><a href="#Robot-Motion" class="headerlink" title="Robot Motion"></a>Robot Motion</h2><h3 id="Time-Limit-2000-1000-MS-Java-Others-Memory-Limit-65536-32768-K-Java-Others"><a href="#Time-Limit-2000-1000-MS-Java-Others-Memory-Limit-65536-32768-K-Java-Others" class="headerlink" title="Time Limit: 2000/1000 MS (Java/Others)    Memory Limit: 65536/32768 K (Java/Others)"></a>Time Limit: 2000/1000 MS (Java/Others)    Memory Limit: 65536/32768 K (Java/Others)</h3><h3 id="Total-Submission-s-13940-Accepted-Submission-s-6510"><a href="#Total-Submission-s-13940-Accepted-Submission-s-6510" class="headerlink" title="Total Submission(s): 13940    Accepted Submission(s): 6510"></a>Total Submission(s): 13940    Accepted Submission(s): 6510</h3><h2 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h2><p> <img src="http://acm.hdu.edu.cn/data/images/1035-1.gif" alt=""></p>
<p>A robot has been programmed to follow the instructions in its path. Instructions for the next direction the robot is to move are laid down in a grid. The possible instructions are </p>
<p>N north (up the page)<br>S south (down the page)<br>E east (to the right on the page)<br>W west (to the left on the page)</p>
<p>For example, suppose the robot starts on the north (top) side of Grid 1 and starts south (down). The path the robot follows is shown. The robot goes through 10 instructions in the grid before leaving the grid.</p>
<p>Compare what happens in Grid 2: the robot goes through 3 instructions only once, and then starts a loop through 8 instructions, and never exits.</p>
<p>You are to write a program that determines how long it takes a robot to get out of the grid or how the robot loops around.</p>
<h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><p>There will be one or more grids for robots to navigate. The data for each is in the following form. On the first line are three integers separated by blanks: the number of rows in the grid, the number of columns in the grid, and the number of the column in which the robot enters from the north. The possible entry columns are numbered starting with one at the left. Then come the rows of the direction instructions. Each grid will have at least one and at most 10 rows and columns of instructions. The lines of instructions contain only the characters N, S, E, or W with no blanks. The end of input is indicated by a row containing 0 0 0.</p>
<h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p>For each grid in the input there is one line of output. Either the robot follows a certain number of instructions and exits the grid on any one the four sides or else the robot follows the instructions on a certain number of locations once, and then the instructions on some number of locations repeatedly. The sample input below corresponds to the two grids above and illustrates the two forms of output. The word “step” is always immediately followed by “(s)” whether or not the number before it is 1.</p>
<h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h3><p>3 6 5<br>NEESWE<br>WWWESS<br>SNWWWW<br>4 5 1<br>SESWE<br>EESNW<br>NWEEN<br>EWSEN<br>0 0</p>
<h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h3><p>10 step(s) to exit 3 step(s) before a loop of 8 step(s)</p>
<h3 id="Source"><a href="#Source" class="headerlink" title="Source"></a>Source</h3><p><a href="http://acm.hdu.edu.cn/search.php?field=problem&amp;key=Mid-Central+USA+1999&amp;source=1&amp;searchmode=source" target="_blank" rel="noopener">Mid-Central USA 1999</a></p>
<h3 id="Recommend"><a href="#Recommend" class="headerlink" title="Recommend"></a>Recommend</h3><p>We have carefully selected several similar problems for you:  <a href="http://acm.hdu.edu.cn/showproblem.php?pid=1016" target="_blank" rel="noopener">1016</a> <a href="http://acm.hdu.edu.cn/showproblem.php?pid=1010" target="_blank" rel="noopener">1010</a> <a href="http://acm.hdu.edu.cn/showproblem.php?pid=2553" target="_blank" rel="noopener">2553</a> <a href="http://acm.hdu.edu.cn/showproblem.php?pid=1258" target="_blank" rel="noopener">1258</a> <a href="http://acm.hdu.edu.cn/showproblem.php?pid=1045" target="_blank" rel="noopener">1045</a></p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>用两个数组，一个数组用来存输入数据，一个数组用来保存路径。初始化保存路径的数组为 -1，每经过一个点路径对应的点加一，为 0 表示经过一次，大于 0 表示经过了不止一次，也就意味着陷入了 loop 中。最后统计路径数组 0 的数量即可得出答案。代码如下：<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ull_ unsigned long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span> ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> mapp[<span class="number">105</span>][<span class="number">105</span>] ;</span><br><span class="line"><span class="keyword">int</span> road[<span class="number">105</span>][<span class="number">105</span>] ;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> r , c , pos ;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="built_in">cin</span> &gt;&gt; r &gt;&gt; c &amp;&amp; r + c != <span class="number">0</span> &amp;&amp; <span class="built_in">cin</span> &gt;&gt; pos )&#123;</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt;= r + <span class="number">1</span> ; i ++ )&#123;</span><br><span class="line">            <span class="keyword">for</span> ( <span class="keyword">int</span> j = <span class="number">0</span> ; j &lt;= c + <span class="number">1</span> ; j ++ )&#123;</span><br><span class="line">                road[i][j] = <span class="number">-1</span> ;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= r ; i ++ )&#123;</span><br><span class="line">            <span class="keyword">for</span> ( <span class="keyword">int</span> j = <span class="number">1</span> ; j &lt;= c ; j ++ )&#123;</span><br><span class="line">                <span class="built_in">cin</span> &gt;&gt; mapp[i][j] ;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">1</span> , j = pos ;</span><br><span class="line">        <span class="keyword">bool</span> check = <span class="literal">false</span> ;</span><br><span class="line">        <span class="keyword">while</span> ( i != <span class="number">0</span> &amp;&amp; i != r + <span class="number">1</span> &amp;&amp; j != c + <span class="number">1</span> &amp;&amp; j != <span class="number">0</span> )&#123;</span><br><span class="line">            <span class="keyword">if</span> ( mapp[i][j] == <span class="string">'N'</span> )&#123;</span><br><span class="line">                road[i --][j] ++ ;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> ( mapp[i][j] == <span class="string">'S'</span> )&#123;</span><br><span class="line">                road[i ++][j] ++ ;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> ( mapp[i][j] == <span class="string">'E'</span> )&#123;</span><br><span class="line">                road[i][j ++] ++ ;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                road[i][j --] ++ ;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> ( road[i][j] &gt; <span class="number">1</span> )&#123;</span><br><span class="line">                check = <span class="literal">true</span> ;</span><br><span class="line">                <span class="keyword">break</span> ;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> step = <span class="number">0</span> ;</span><br><span class="line">        <span class="keyword">int</span> loop = <span class="number">0</span> ;</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= r ; i ++ )&#123;</span><br><span class="line">            <span class="keyword">for</span> ( <span class="keyword">int</span> j = <span class="number">1</span> ; j &lt;= c ; j ++ )&#123;</span><br><span class="line">                <span class="keyword">if</span> ( road[i][j] == <span class="number">0</span> )&#123;</span><br><span class="line">                    step ++ ;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span> ( road[i][j] &gt; <span class="number">1</span> )&#123;</span><br><span class="line">                    loop ++ ;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ( check )&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d step(s) before a loop of %d step(s)\n"</span> , step , loop) ;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d step(s) to exit\n"</span> , step) ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Online Judge</category>
      </categories>
      <tags>
        <tag>HDU</tag>
        <tag>模拟</tag>
      </tags>
  </entry>
  <entry>
    <title>POJ 1852 Ants</title>
    <url>/2018/10/24/POJ-1852-Ants/</url>
    <content><![CDATA[<h2 id="Ants"><a href="#Ants" class="headerlink" title="Ants"></a>Ants</h2><p>| <strong>Time Limit:</strong> 1000MS |   | <strong>Memory Limit:</strong> 30000K |<br>| <strong>Total Submissions:</strong> 25649 |   | <strong>Accepted:</strong> 10081 |</p>
<h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>An army of ants walk on a horizontal pole of length l cm, each with a constant speed of 1 cm/s. When a walking ant reaches an end of the pole, it immediatelly falls off it. When two ants meet they turn back and start walking in opposite directions. We know the original positions of ants on the pole, unfortunately, we do not know the directions in which the ants are walking. Your task is to compute the earliest and the latest possible times needed for all ants to fall off the pole.</p>
<h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><p>The first line of input contains one integer giving the number of cases that follow. The data for each case start with two integer numbers: the length of the pole (in cm) and n, the number of ants residing on the pole. These two numbers are followed by n integers giving the position of each ant on the pole as the distance measured from the left end of the pole, in no particular order. All input integers are not bigger than 1000000 and they are separated by whitespace.</p>
<h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p>For each case of input, output two numbers separated by a single space. The first number is the earliest possible time when all ants fall off the pole (if the directions of their walks are chosen appropriately) and the second number is the latest possible such time. </p>
<h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h3><p>2<br>10 3<br>2 6 7<br>214 7<br>11 12 7 13 176 23 191  </p>
<h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h3><p>4 8<br>38 207  </p>
<h3 id="Source"><a href="#Source" class="headerlink" title="Source"></a>Source</h3><p><a href="http://poj.org/searchproblem?field=source&amp;key=Waterloo+local+2004.09.19" target="_blank" rel="noopener">Waterloo local 2004.09.19</a></p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>每只蚂蚁相遇的时候会掉头，可以不管每只蚂蚁是否掉头，将其按原来的路行走来处理，这样就简单得多了。代码如下：<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 1000005</span></span><br><span class="line"><span class="keyword">int</span> arr[MAXN] ;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span> ;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lontime</span><span class="params">( <span class="keyword">int</span> len, <span class="keyword">int</span> numb )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> Maxt = <span class="number">0</span> ;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; numb ; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        Maxt = max(Maxt,max(arr[i],len-arr[i])) ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Maxt ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">shrtime</span> <span class="params">( <span class="keyword">int</span> len, <span class="keyword">int</span> numb )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> Mint = <span class="number">0</span> ;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; numb ; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        Mint = max(Mint,min(arr[i],len-arr[i])) ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Mint ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n ;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n ;</span><br><span class="line">    <span class="keyword">while</span> ( n -- )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(arr,<span class="number">0</span>,<span class="keyword">sizeof</span>(arr)) ;</span><br><span class="line">        <span class="keyword">int</span> len, numb ;  <span class="comment">/// len -&gt; 杆子长度, numb -&gt; 蚂蚁数量</span></span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; len &gt;&gt; numb ;</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; numb ; i ++ )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; arr[i] ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; shrtime(len,numb) &lt;&lt; <span class="string">" "</span> &lt;&lt; lontime(len,numb) &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Online Judge</category>
      </categories>
      <tags>
        <tag>POJ</tag>
      </tags>
  </entry>
  <entry>
    <title>CCF 201809-1 买菜</title>
    <url>/2018/10/23/CCF-201809-1-%E4%B9%B0%E8%8F%9C/</url>
    <content><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a><center>问题描述</center></h2><h3 id="试题编号：-201809-2"><a href="#试题编号：-201809-2" class="headerlink" title="| 试题编号： | 201809-2 |"></a>| 试题编号： | 201809-2 |</h3><h3 id="试题名称：-买菜"><a href="#试题名称：-买菜" class="headerlink" title="| 试题名称： | 买菜 |"></a>| 试题名称： | 买菜 |</h3><h3 id="时间限制：-1-0s"><a href="#时间限制：-1-0s" class="headerlink" title="| 时间限制： | 1.0s |"></a>| 时间限制： | 1.0s |</h3><h3 id="内存限制：-256-0MB"><a href="#内存限制：-256-0MB" class="headerlink" title="| 内存限制： | 256.0MB |"></a>| 内存限制： | 256.0MB |</h3><h2 id="问题描述-1"><a href="#问题描述-1" class="headerlink" title="问题描述"></a>问题描述</h2><p>小H和小W来到了一条街上，两人分开买菜，他们买菜的过程可以描述为，去店里买一些菜然后去旁边的一个广场把菜装上车，两人都要买n种菜，所以也都要装n次车。具体的，对于小H来说有n个不相交的时间段[a<sub>1</sub>,b<sub>1</sub>],[a<sub>2</sub>,b<sub>2</sub>]…[a<sub>n</sub>,b<sub>n</sub>]在装车，对于小W来说有n个不相交的时间段[c<sub>1</sub>,d<sub>1</sub>],[c<sub>2</sub>,d<sub>2</sub>]…[c<sub>n</sub>,d<sub>n</sub>]在装车。其中，一个时间段[s, t]表示的是从时刻s到时刻t这段时间，时长为t-s。<br>由于他们是好朋友，他们都在广场上装车的时候会聊天，他们想知道他们可以聊多长时间。</p>
<h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><p>输入的第一行包含一个正整数n，表示时间段的数量。<br>接下来n行每行两个数a<sub>i</sub>，b<sub>i</sub>，描述小H的各个装车的时间段。</p>
<h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><p>输出一行，一个正整数，表示两人可以聊多长时间。</p>
<h3 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h3><p>4<br>1 3<br>5 6<br>9 13<br>14 15<br>2 4<br>5 7<br>10 11<br>13 14  </p>
<h3 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h3><p>3</p>
<h3 id="数据规模和约定"><a href="#数据规模和约定" class="headerlink" title="数据规模和约定"></a>数据规模和约定</h3><p>对于所有的评测用例，1 ≤ n ≤ 2000, a<sub>i </sub>&lt; b<sub>i </sub>&lt; a<sub>i+1</sub>，c<sub>i </sub>&lt; d<sub>i </sub>&lt; c<sub>i+1</sub>,对于所有的i(1 ≤ i ≤ n)有，1 ≤ a<sub>i</sub>, b<sub>i</sub>, c<sub>i</sub>, d<sub>i</sub> ≤ 1000000。</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>因为不清楚给的数据是否有序，所以先对左端点进行排序，此后分三种情况，一种是小H的时间段的右端相交于小W的时间段的内部，或者是小H的时间段的右端包含了小W的时间段；一种是小W的时间段的右端相交于小H的时间段的内部，或者是小W的时间段的右端包含了小H的时间段；最后一种是其中一个人的时间段相交于另一个人的两个不同时间段，例：小H的这一个时间段的右端落在小W的时间段的内部，小H的下一个时间段的左端落在小W的时间段的内部，就有两部分相交。n &lt;= 2000 ,可以用两层循环解决第三种情况。代码如下：<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ull_ unsigned long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span> ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxx = <span class="number">2005</span> ;</span><br><span class="line"><span class="keyword">int</span> n ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> left ;</span><br><span class="line">    <span class="keyword">int</span> right ;</span><br><span class="line">&#125;meassage ;</span><br><span class="line"></span><br><span class="line">meassage little_H[maxx] , little_W[maxx] ;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; n ; i ++ )&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; little_H[i].left &gt;&gt; little_H[i].right ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; n ; i ++ )&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; little_W[i].left &gt;&gt; little_W[i].right ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">( meassage x , meassage y )</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x.left &lt; y.right ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; n ; i ++ )&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; little_H[i].left &lt;&lt; <span class="string">" "</span> &lt;&lt; little_H[i].right &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; n ; i ++ )&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; little_W[i].left &lt;&lt; <span class="string">" "</span> &lt;&lt; little_W[i].right &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="built_in">cin</span> &gt;&gt; n )&#123;</span><br><span class="line">        <span class="built_in">memset</span>(little_H , <span class="number">0</span> , <span class="keyword">sizeof</span>(little_H)) ;</span><br><span class="line">        <span class="built_in">memset</span>(little_W , <span class="number">0</span> , <span class="keyword">sizeof</span>(little_W)) ;</span><br><span class="line">        init() ;</span><br><span class="line">        sort( little_H , little_H + n , cmp ) ;</span><br><span class="line">        sort( little_W , little_W + n , cmp ) ;</span><br><span class="line">    <span class="comment">//    test() ;</span></span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span> ;</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; n ; i ++ )&#123;</span><br><span class="line">            <span class="keyword">for</span> ( <span class="keyword">int</span> j = <span class="number">0</span> ; j &lt; n ; j ++ )&#123;</span><br><span class="line">                <span class="keyword">if</span> ( little_H[i].left &lt;= little_W[j].left &amp;&amp; little_H[i].right &gt;= little_W[j].left )&#123;</span><br><span class="line">                    <span class="keyword">if</span> ( little_H[i].right &lt;= little_W[j].right )&#123;</span><br><span class="line">                        ans += little_H[i].right - little_W[j].left ;</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        ans += little_W[j].right - little_W[j].left ;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span> ( little_W[j].left &lt;= little_H[i].left &amp;&amp; little_W[j].right &gt;= little_H[i].left )&#123;</span><br><span class="line">                    <span class="keyword">if</span> ( little_W[j].right &lt;= little_H[i].right )&#123;</span><br><span class="line">                        ans += little_W[j].right - little_H[i].left ;</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        ans += little_H[i].right - little_H[i].left ;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>CCF-CSP</category>
      </categories>
  </entry>
  <entry>
    <title>51Nod 1004 n^n的末位数字</title>
    <url>/2018/10/22/51Nod-1004-n-n%E7%9A%84%E6%9C%AB%E4%BD%8D%E6%95%B0%E5%AD%97/</url>
    <content><![CDATA[<h2 id="1004-n-n的末位数字"><a href="#1004-n-n的末位数字" class="headerlink" title="1004 n^n的末位数字"></a>1004 n^n的末位数字</h2><h3 id="题目来源：-Author-Ignatius-L-Hdu-1061"><a href="#题目来源：-Author-Ignatius-L-Hdu-1061" class="headerlink" title="题目来源： Author Ignatius.L (Hdu 1061)"></a>题目来源： Author Ignatius.L (Hdu 1061)</h3><h3 id="基准时间限制：1-秒-空间限制：131072-KB-分值-5-难度：1级算法题-收藏-关注"><a href="#基准时间限制：1-秒-空间限制：131072-KB-分值-5-难度：1级算法题-收藏-关注" class="headerlink" title="基准时间限制：1 秒 空间限制：131072 KB 分值: 5 难度：1级算法题 收藏  关注"></a>基准时间限制：1 秒 空间限制：131072 KB 分值: 5 难度：1级算法题 收藏  关注</h3><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>给出一个整数N，输出N^N（N的N次方）的十进制表示的末位数字。</p>
<h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><p>一个数N（1 &lt;= N &lt;= 10^9）</p>
<h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p>输出N^N的末位数字</p>
<h3 id="Input示例"><a href="#Input示例" class="headerlink" title="Input示例"></a>Input示例</h3><p>13</p>
<h3 id="Output示例"><a href="#Output示例" class="headerlink" title="Output示例"></a>Output示例</h3><p>3</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>这道题可以用快速幂取模来做。代码如下：<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ull_ unsigned long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span> ;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">quick_pow</span><span class="params">( ll a , ll b )</span></span>&#123;</span><br><span class="line">    ll base = a , ans = <span class="number">1</span> % <span class="number">10</span> ;</span><br><span class="line">    <span class="keyword">while</span> ( b )&#123;</span><br><span class="line">        <span class="keyword">if</span> ( b &amp; <span class="number">1</span> )&#123;</span><br><span class="line">            ans = (ans % <span class="number">10</span> * base % <span class="number">10</span>) % <span class="number">10</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        base = base * base % <span class="number">10</span> ;</span><br><span class="line">        b &gt;&gt;= <span class="number">1</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n ;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n ;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; quick_pow(n , n) &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Online Judge</category>
      </categories>
      <tags>
        <tag>日常水题</tag>
        <tag>51Nod</tag>
        <tag>快速幂</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces Round #517(Div2) A.Golden Plate</title>
    <url>/2018/10/21/Codeforces-Round-517-A-Golden-Plate/</url>
    <content><![CDATA[<h2 id="A-Golden-Plate"><a href="#A-Golden-Plate" class="headerlink" title="A. Golden Plate"></a><center>A. Golden Plate</center></h2><center><br>time limit per test1 second<br>memory limit per test256 megabytes<br>input:standard input<br>output:standard output<br></center>

<p>You have a plate and you want to add some gilding to it. The plate is a rectangle that we split into w×h cells.There should be k gilded rings, the first one should go along the edge of the plate, the second one — 2 cells away from the edge and so on. Each ring has a width of 1 cell. Formally, the i-th of these rings should consist of all bordering cells on the inner rectangle of size (w−4(i−1))×(h−4(i−1)).</p>
<center><br><img src="https://codeforces.com/predownloaded/a4/1c/a41cb08acf913c9a7e1039de23fd778b0d753acb.png" alt=""><br></center>

<p>The picture corresponds to the third example.<br>Your task is to compute the number of cells to be gilded.</p>
<h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><p>The only line contains three integers w, h and k (3≤w,h≤100, 1≤k≤⌊min(n,m)+14⌋, where ⌊x⌋ denotes the number x rounded down) — the number of rows, columns and the number of rings, respectively.</p>
<h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p>Print a single positive integer — the number of cells to be gilded.</p>
<h3 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h3><h4 id="input"><a href="#input" class="headerlink" title="input"></a>input</h4><p>3 3 1  </p>
<h4 id="output"><a href="#output" class="headerlink" title="output"></a>output</h4><p>8</p>
<h4 id="input-1"><a href="#input-1" class="headerlink" title="input"></a>input</h4><p>7 9 1</p>
<h4 id="output-1"><a href="#output-1" class="headerlink" title="output"></a>output</h4><p>28</p>
<h4 id="input-2"><a href="#input-2" class="headerlink" title="input"></a>input</h4><p>7 9 2</p>
<h4 id="output-2"><a href="#output-2" class="headerlink" title="output"></a>output</h4><p>40</p>
<h3 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h3><p>The first example is shown on the picture below.<br><img src="https://codeforces.com/predownloaded/ed/5f/ed5f2b73257c9152b95bab226470d2a8e66e7532.png" alt=""></p>
<p>The second example is shown on the picture below.<br><img src="https://codeforces.com/predownloaded/87/b8/87b803fcfc43bcfd85f5d082a8cae07b62ca3cc7.png" alt=""></p>
<p>The third example is shown in the problem description.</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>题目大意是给一个 宽X长 的一个矩形，从最外围开始铺 “金砖” ，最外围作为第一层，如果还有第二层，则从宽为 w-4(i-1), 长为 h-4(i-1) (i&gt;1)的矩形的最外层开始铺，问能有多少 “金砖”。<br>仔细观察便可得到，当只铺第一层时，总的 “金砖” 是 2(w-2) + 2h, 当铺第二层时，第二层铺的“金砖”是在原先的 w 和 h 的基础上减 4 后再应用上述公式，所以很容易就能得到代码。在 w 和 h 大于 0 的条件下应用 k 次上述公式并求和就可得出答案。代码如下：<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span> ;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> w , h , k ;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; w &gt;&gt; h &gt;&gt; k ;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span> ;</span><br><span class="line">    <span class="keyword">while</span> ( k -- )&#123;</span><br><span class="line">        ans += <span class="number">2</span> * (w - <span class="number">2</span>) + <span class="number">2</span> * h ;</span><br><span class="line">        w -= <span class="number">4</span> ;</span><br><span class="line">        h -= <span class="number">4</span> ;</span><br><span class="line">        <span class="keyword">if</span> ( w &lt;= <span class="number">0</span> || h &lt;= <span class="number">0</span> )&#123;</span><br><span class="line">            <span class="keyword">break</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Online Judge</category>
      </categories>
      <tags>
        <tag>日常水题</tag>
        <tag>CodeForces</tag>
      </tags>
  </entry>
  <entry>
    <title>51Nod 1264 线段相交</title>
    <url>/2018/10/20/51Nod-1264-%E7%BA%BF%E6%AE%B5%E7%9B%B8%E4%BA%A4/</url>
    <content><![CDATA[<h2 id="1264-线段相交"><a href="#1264-线段相交" class="headerlink" title="1264 线段相交"></a>1264 线段相交</h2><h3 id="基准时间限制：1-秒-空间限制：131072-KB-分值-0-难度：基础题-收藏-关注"><a href="#基准时间限制：1-秒-空间限制：131072-KB-分值-0-难度：基础题-收藏-关注" class="headerlink" title="基准时间限制：1 秒 空间限制：131072 KB 分值: 0 难度：基础题 收藏  关注"></a>基准时间限制：1 秒 空间限制：131072 KB 分值: 0 难度：基础题 收藏  关注</h3><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>给出平面上两条线段的两个端点，判断这两条线段是否相交（有一个公共点或有部分重合认为相交）。 如果相交，输出”Yes”，否则输出”No”。</p>
<h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><p>第1行：一个数T，表示输入的测试数量(1 &lt;= T &lt;= 1000)<br>第2 - T + 1行：每行8个数，x1,y1,x2,y2,x3,y3,x4,y4。(-10^8 &lt;= xi, yi &lt;= 10^8)<br>(直线1的两个端点为x1,y1 | x2, y2,直线2的两个端点为x3,y3 | x4, y4)</p>
<h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p>输出共T行，如果相交输出”Yes”，否则输出”No”。</p>
<h3 id="Input示例"><a href="#Input示例" class="headerlink" title="Input示例"></a>Input示例</h3><p>2<br>1 2 2 1 0 0 2 2<br>-1 1 1 1 0 0 1 -1  </p>
<h3 id="Output示例"><a href="#Output示例" class="headerlink" title="Output示例"></a>Output示例</h3><p>Yes<br>No  </p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>通过判断叉积来判断线段是否相交。代码如下：<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span> ;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">point</span> &#123;</span><span class="keyword">double</span> x , y ;&#125; ;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">xmul</span> <span class="params">( point a , point b , point c )</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ( b.x - a.x ) * ( c.y - a.y ) - ( b.y - a.y ) * ( c.x - a.x ) ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t ;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; t ;</span><br><span class="line">    <span class="keyword">while</span> ( t -- )&#123;</span><br><span class="line">        point a , b , c , d ;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a.x &gt;&gt; a.y &gt;&gt; b.x &gt;&gt; b.y &gt;&gt; c.x &gt;&gt; c.y &gt;&gt; d.x &gt;&gt; d.y ;</span><br><span class="line">        <span class="keyword">if</span> ( xmul(a , b , c) * xmul(a , b , d) &lt;= <span class="number">0</span> &amp;&amp; xmul(c , d , a) * xmul(c , d , b) &lt;= <span class="number">0</span> )&#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"Yes"</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"No"</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Online Judge</category>
      </categories>
      <tags>
        <tag>51Nod</tag>
        <tag>模板</tag>
        <tag>几何</tag>
      </tags>
  </entry>
  <entry>
    <title>HDU 3789 奥运排序问题</title>
    <url>/2018/10/19/HDU-3789-%E5%A5%A5%E8%BF%90%E6%8E%92%E5%BA%8F%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h2 id="奥运排序问题"><a href="#奥运排序问题" class="headerlink" title="奥运排序问题"></a>奥运排序问题</h2><h3 id="Time-Limit-2000-1000-MS-Java-Others-Memory-Limit-32768-32768-K-Java-Others"><a href="#Time-Limit-2000-1000-MS-Java-Others-Memory-Limit-32768-32768-K-Java-Others" class="headerlink" title="Time Limit: 2000/1000 MS (Java/Others)    Memory Limit: 32768/32768 K (Java/Others)"></a>Time Limit: 2000/1000 MS (Java/Others)    Memory Limit: 32768/32768 K (Java/Others)</h3><h3 id="Total-Submission-s-3989-Accepted-Submission-s-1050"><a href="#Total-Submission-s-3989-Accepted-Submission-s-1050" class="headerlink" title="Total Submission(s): 3989    Accepted Submission(s): 1050"></a>Total Submission(s): 3989    Accepted Submission(s): 1050</h3><h2 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h2><p>按要求，给国家进行排名。</p>
<h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><p>有多组数据。<br>第一行给出国家数N，要求排名的国家数M，国家号从0到N-1。<br>第二行开始的N行给定国家或地区的奥运金牌数，奖牌数，人口数（百万）。<br>接下来一行给出M个国家号。</p>
<h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p>排序有4种方式: 金牌总数 奖牌总数 金牌人口比例 奖牌人口比例<br>对每个国家给出最佳排名排名方式 和 最终排名<br>格式为: 排名:排名方式<br>如果有相同的最终排名，则输出排名方式最小的那种排名，对于排名方式，金牌总数 &lt; 奖牌总数 &lt; 金牌人口比例 &lt; 奖牌人口比例<br>如果有并列排名的情况，即如果出现金牌总数为 100,90,90,80.则排名为1,2,2,4.<br>每组数据后加一个空行。</p>
<h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h3><p>4 4<br>4 8 1<br>6 6 2<br>4 8 2<br>2 12 4<br>0 1 2 3<br>4 2<br>8 10 1<br>8 11 2<br>8 12 3<br>8 13 4<br>0 3  </p>
<h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h3><p>1:3<br>1:1<br>2:1<br>1:2  </p>
<p>1:1<br>1:1  </p>
<h3 id="Source"><a href="#Source" class="headerlink" title="Source"></a>Source</h3><p>浙大计算机研究生复试上机考试-2010年</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>按题意模拟。注意是对给定的编号的国家进行排序。(写了五个cmp也是…)代码如下:<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span> ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    <span class="keyword">double</span> au_medals ;</span><br><span class="line">    <span class="keyword">double</span> tot_medals ;</span><br><span class="line">    <span class="keyword">double</span> population ;</span><br><span class="line">    <span class="keyword">double</span> number ;</span><br><span class="line">    <span class="keyword">double</span> au_population ;</span><br><span class="line">    <span class="keyword">double</span> tot_population ;</span><br><span class="line">    <span class="keyword">int</span> rank1 ;</span><br><span class="line">    <span class="keyword">int</span> rank2 ;</span><br><span class="line">    <span class="keyword">int</span> rank3 ;</span><br><span class="line">    <span class="keyword">int</span> rank4 ;</span><br><span class="line">    <span class="keyword">int</span> min_rank ;</span><br><span class="line">    <span class="keyword">int</span> best_way ;</span><br><span class="line">&#125;meassage ;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">( meassage a , meassage b )</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.number &lt; b.number ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp_au</span><span class="params">( meassage a , meassage b )</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.au_medals &gt; b.au_medals ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp_tot</span><span class="params">( meassage a , meassage b )</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.tot_medals &gt; b.tot_medals ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp_au_pop</span><span class="params">( meassage a , meassage b )</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.au_population &gt; b.au_population ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp_tot_pop</span><span class="params">( meassage a , meassage b )</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.tot_population &gt; b.tot_population ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n , m ;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m )&#123;</span><br><span class="line">        meassage meaa[n + <span class="number">10</span>] ;</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; n ; i ++ )&#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; meaa[i].au_medals &gt;&gt; meaa[i].tot_medals &gt;&gt; meaa[i].population ;</span><br><span class="line">            meaa[i].number = i ;</span><br><span class="line">            meaa[i].au_population = meaa[i].au_medals / meaa[i].population ;</span><br><span class="line">            meaa[i].tot_population = meaa[i].tot_medals / meaa[i].population ;</span><br><span class="line">        &#125;</span><br><span class="line">        meassage mea[n + <span class="number">10</span>] ;</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; m ; i ++ )&#123;</span><br><span class="line">            <span class="keyword">int</span> number ;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; number ;</span><br><span class="line">            mea[i] = meaa[number] ;</span><br><span class="line">            mea[i].number = i ;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        sort(mea , mea + m , cmp_au) ;</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; m ; i ++ )&#123;</span><br><span class="line">            mea[i].rank1 = i ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">1</span> ; i &lt; m ; i ++ )&#123;</span><br><span class="line">            <span class="keyword">if</span> ( mea[i].au_medals == mea[i<span class="number">-1</span>].au_medals )&#123;</span><br><span class="line">                mea[i].rank1 = mea[i<span class="number">-1</span>].rank1 ;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        sort(mea , mea + m , cmp_tot) ;</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; m ; i ++ )&#123;</span><br><span class="line">            mea[i].rank2 = i ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">1</span> ; i &lt; m ; i ++ )&#123;</span><br><span class="line">            <span class="keyword">if</span> ( mea[i].tot_medals == mea[i<span class="number">-1</span>].tot_medals )&#123;</span><br><span class="line">                mea[i].rank2 = mea[i<span class="number">-1</span>].rank2 ;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        sort(mea , mea + m , cmp_au_pop) ;</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; n ; i ++ )&#123;</span><br><span class="line">            mea[i].rank3 = i ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">1</span> ; i &lt; m ; i ++ )&#123;</span><br><span class="line">            <span class="keyword">if</span> ( mea[i].au_population == mea[i<span class="number">-1</span>].au_population )&#123;</span><br><span class="line">                mea[i].rank3 = mea[i<span class="number">-1</span>].rank3 ;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        sort(mea , mea + m , cmp_tot_pop) ;</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; m ; i ++ )&#123;</span><br><span class="line">            mea[i].rank4 = i ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">1</span> ; i &lt; m ; i ++ )&#123;</span><br><span class="line">            <span class="keyword">if</span> ( mea[i].tot_population == mea[i<span class="number">-1</span>].tot_population )&#123;</span><br><span class="line">                mea[i].rank4 = mea[i<span class="number">-1</span>].rank4 ;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        sort(mea , mea + m , cmp) ;</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; m ; i ++ )&#123;</span><br><span class="line">            <span class="keyword">int</span> min_rank = mea[i].rank1 ;</span><br><span class="line">            mea[i].best_way = <span class="number">1</span> ;</span><br><span class="line">            <span class="keyword">if</span> ( mea[i].rank2 &lt; min_rank )&#123;</span><br><span class="line">                min_rank = mea[i].rank2 ;</span><br><span class="line">                mea[i].best_way = <span class="number">2</span> ;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> ( mea[i].rank3 &lt; min_rank )&#123;</span><br><span class="line">                min_rank = mea[i].rank3 ;</span><br><span class="line">                mea[i].best_way = <span class="number">3</span> ;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> ( mea[i].rank4 &lt; min_rank )&#123;</span><br><span class="line">                min_rank = mea[i].rank4 ;</span><br><span class="line">                mea[i].best_way = <span class="number">4</span> ;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d:%d\n"</span> , min_rank + <span class="number">1</span> , mea[i].best_way) ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">""</span>) ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Online Judge</category>
      </categories>
      <tags>
        <tag>HDU</tag>
        <tag>结构体排序</tag>
      </tags>
  </entry>
  <entry>
    <title>51Nod 1174 区间中最大的数</title>
    <url>/2018/10/18/51Nod-1174-%E5%8C%BA%E9%97%B4%E4%B8%AD%E6%9C%80%E5%A4%A7%E7%9A%84%E6%95%B0/</url>
    <content><![CDATA[<h2 id="1174-区间中最大的数"><a href="#1174-区间中最大的数" class="headerlink" title="1174 区间中最大的数"></a>1174 区间中最大的数</h2><h3 id="基准时间限制：1-秒-空间限制：131072-KB-分值-0-难度：基础题-收藏-关注"><a href="#基准时间限制：1-秒-空间限制：131072-KB-分值-0-难度：基础题-收藏-关注" class="headerlink" title="基准时间限制：1 秒 空间限制：131072 KB 分值: 0 难度：基础题 收藏  关注"></a>基准时间限制：1 秒 空间限制：131072 KB 分值: 0 难度：基础题 收藏  关注</h3><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>给出一个有N个数的序列，编号0 - N - 1。进行Q次查询，查询编号i至j的所有数中，最大的数是多少。<br>例如: 1 7 6 3 1。i = 1, j = 3，对应的数为7 6 3，最大的数为7。（该问题也被称为RMQ问题）  </p>
<h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><p>第1行：1个数N，表示序列的长度。(2 &lt;= N &lt;= 10000)<br>第2 - N + 1行：每行1个数，对应序列中的元素。(0 &lt;= S[i] &lt;= 10^9)<br>第N + 2行：1个数Q，表示查询的数量。(2 &lt;= Q &lt;= 10000)<br>第N + 3 - N + Q + 2行：每行2个数，对应查询的起始编号i和结束编号j。(0 &lt;= i &lt;= j &lt;= N - 1)</p>
<h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p>共Q行，对应每一个查询区间的最大值。</p>
<h3 id="Input示例"><a href="#Input示例" class="headerlink" title="Input示例"></a>Input示例</h3><p>5<br>1<br>7<br>6<br>3<br>1<br>3<br>0 1<br>1 3<br>3 4  </p>
<h3 id="Output示例"><a href="#Output示例" class="headerlink" title="Output示例"></a>Output示例</h3><p>7<br>7<br>3  </p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>RMQ(查询区间最值)模版。代码如下：<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span> ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e4</span>+<span class="number">10</span> ;</span><br><span class="line"><span class="keyword">int</span> max_[MAXN][<span class="number">32</span>] ;</span><br><span class="line"><span class="keyword">int</span> arr_[MAXN] ;</span><br><span class="line"><span class="keyword">int</span> n ;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rmq</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= n ; i ++ )&#123;</span><br><span class="line">        max_[i][<span class="number">0</span>] = arr_[i] ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> k = <span class="built_in">log</span>(n * <span class="number">1.0</span>) / <span class="built_in">log</span>(<span class="number">2.0</span>) ;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> j = <span class="number">1</span> ; j &lt;= k ; j ++ )&#123;</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= n ; i ++ )&#123;</span><br><span class="line">            <span class="keyword">if</span> ( i + (<span class="number">1</span> &lt;&lt; j) - <span class="number">1</span> &gt; n ) <span class="keyword">break</span> ;</span><br><span class="line">            max_[i][j] = max(max_[i][j - <span class="number">1</span>] , max_[i + (<span class="number">1</span> &lt;&lt; (j - <span class="number">1</span>))][j - <span class="number">1</span>]) ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">( <span class="keyword">int</span> x , <span class="keyword">int</span> y )</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k = <span class="built_in">log</span>(y - x + <span class="number">1.0</span>) / <span class="built_in">log</span>(<span class="number">2.0</span>) ;</span><br><span class="line">    <span class="keyword">return</span> max(max_[x][k] , max_[y + <span class="number">1</span> - (<span class="number">1</span> &lt;&lt; k)][k]) ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n ;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= n ; i ++ )&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; arr_[i] ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> t ;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; t ;</span><br><span class="line">    rmq() ;</span><br><span class="line">    <span class="keyword">while</span> ( t -- )&#123;</span><br><span class="line">        <span class="keyword">int</span> x , y ;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y ;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; query( x + <span class="number">1</span> , y + <span class="number">1</span> ) &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Online Judge</category>
      </categories>
      <tags>
        <tag>51Nod</tag>
        <tag>动态规划</tag>
        <tag>模板</tag>
        <tag>RMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces Round #512(Div2) B.Vasya and Cornfield</title>
    <url>/2018/10/17/Codeforces-Round-512-B-Vasya-and-Cornfield/</url>
    <content><![CDATA[<h2 id="B-Vasya-and-Cornfield"><a href="#B-Vasya-and-Cornfield" class="headerlink" title="B. Vasya and Cornfield"></a><center>B. Vasya and Cornfield</center></h2><center>time limit per test<br>1 second<br>memory limit per test<br>256 megabytes<br>input:standard input<br>output:standard output</center>

<p>Vasya owns a cornfield which can be defined with two integers nn and dd. The cornfield can be represented as rectangle with vertices having Cartesian coordinates (0,d),(d,0),(n,n−d)(0,d),(d,0),(n,n−d) and (n−d,n)(n−d,n).</p>
<center><img src="https://codeforces.com/predownloaded/d4/77/d4774c8e0335ef834f224f203b990e3154fc535a.png" alt="">An example of a cornfield with n=7n=7 and d=2d=2.</center>

<p>Vasya also knows that there are mm grasshoppers near the field (maybe even inside it). The ii-th grasshopper is at the point (xi,yi)(xi,yi). Vasya does not like when grasshoppers eat his corn, so for each grasshopper he wants to know whether its position is inside the cornfield (including the border) or outside.</p>
<p>Help Vasya! For each grasshopper determine if it is inside the field (including the border).</p>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>The first line contains two integers n and d (1≤d&lt;n≤100).</p>
<p>The second line contains a single integer m (1≤m≤100) — the number of grasshoppers.</p>
<p>The i-th of the next m lines contains two integers xi and yi (0≤xi,yi≤n) — position of the i-th grasshopper.</p>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>Print mm lines. The ii-th line should contain “YES” if the position of the ii-th grasshopper lies inside or on the border of the cornfield. Otherwise the ii-th line should contain “NO”.You can print each letter in any case (upper or lower).</p>
<h2 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h2><h3 id="input"><a href="#input" class="headerlink" title="input"></a>input</h3><p>7 2<br>4<br>2 4<br>4 1<br>6 3<br>4 5  </p>
<h3 id="output"><a href="#output" class="headerlink" title="output"></a>output</h3><p>YES<br>NO<br>NO<br>YES  </p>
<h3 id="input-1"><a href="#input-1" class="headerlink" title="input"></a>input</h3><p>8 7<br>4<br>4 4<br>2 8<br>8 1<br>6 1  </p>
<h3 id="output-1"><a href="#output-1" class="headerlink" title="output"></a>output</h3><p>YES<br>NO<br>YES<br>YES  </p>
<h3 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h3><p>The cornfield from the first example is pictured above. Grasshoppers with indices 1 (coordinates (2,4)) and 4 (coordinates (4,5)) are inside the cornfield.<br>The cornfield from the second example is pictured below. Grasshoppers with indices 1 (coordinates (4,4)), 3 (coordinates (8,1)) and 4 (coordinates (6,1)) are inside the cornfield.  </p>
<center><img src="https://codeforces.com/predownloaded/30/b5/30b5e2a9e0f28c1052b75c86da5045de2d090d00.png" alt=""></center>

<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>题目大意就是给定 n 和 d ，在(0,d),(d,0),(n,n−d) 和 (n−d,n)这四个点构成的矩形里，给出 m 次询问，再给出点的坐标，询问此点是否在这个矩形内。可以通过叉积来计算点是否在矩形内(之后补充，再次挖坑…)。代码如下：<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span> ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    <span class="keyword">double</span> x ;</span><br><span class="line">    <span class="keyword">double</span> y ;</span><br><span class="line">&#125;point ;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">xmulti</span><span class="params">( point p1 , point p2 , point p0 )</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ((p1.x - p0.x) * (p2.y - p0.y) - (p2.x - p0.x) * (p1.y - p0.y)) ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n , d ;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; d )&#123;</span><br><span class="line">        <span class="keyword">int</span> m ;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; m ;</span><br><span class="line">        point p1 , p2 , p3 , p4 ;</span><br><span class="line">        p1.x = <span class="number">0</span> ;</span><br><span class="line">        p1.y = d ;</span><br><span class="line">        p2.x = d ;</span><br><span class="line">        p2.y = <span class="number">0</span> ;</span><br><span class="line">        p3.x = n ;</span><br><span class="line">        p3.y = n - d ;</span><br><span class="line">        p4.x = n - d ;</span><br><span class="line">        p4.y = n ;</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; m ; i ++ )&#123;</span><br><span class="line">            point p0 ;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; p0.x &gt;&gt; p0.y ;</span><br><span class="line">            <span class="keyword">if</span> ( xmulti( p1 , p2 , p0 ) * xmulti( p3 , p4 , p0 ) &gt;= <span class="number">0</span></span><br><span class="line">              &amp;&amp; xmulti( p2 , p3 , p0 ) * xmulti( p4 , p1 , p0 ) &gt;= <span class="number">0</span> )&#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">"YES"</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">"NO"</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> ;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Online Judge</category>
      </categories>
      <tags>
        <tag>几何</tag>
        <tag>CodeForces</tag>
      </tags>
  </entry>
  <entry>
    <title>51Nod 1049 最大子段和</title>
    <url>/2018/10/16/51Nod-1049-%E6%9C%80%E5%A4%A7%E5%AD%90%E6%AE%B5%E5%92%8C/</url>
    <content><![CDATA[<h2 id="1049-最大子段和"><a href="#1049-最大子段和" class="headerlink" title="1049 最大子段和"></a>1049 最大子段和</h2><h3 id="基准时间限制：1-秒-空间限制：131072-KB-分值-0-难度：基础题-收藏-关注"><a href="#基准时间限制：1-秒-空间限制：131072-KB-分值-0-难度：基础题-收藏-关注" class="headerlink" title="基准时间限制：1 秒 空间限制：131072 KB 分值: 0 难度：基础题 收藏  关注"></a>基准时间限制：1 秒 空间限制：131072 KB 分值: 0 难度：基础题 收藏  关注</h3><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>N个整数组成的序列a[1],a[2],a[3],…,a[n]，求该序列如a[i]+a[i+1]+…+a[j]的连续子段和的最大值。当所给的整数均为负数时和为0。<br>例如：-2,11,-4,13,-5,-2，和最大的子段为：11,-4,13。和为20。</p>
<h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><p>第1行：整数序列的长度N（2 &lt;= N &lt;= 50000)<br>第2 - N + 1行：N个整数（-10^9 &lt;= A[i] &lt;= 10^9）</p>
<h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p>输出最大子段和。</p>
<h3 id="Input示例"><a href="#Input示例" class="headerlink" title="Input示例"></a>Input示例</h3><p>6<br>-2<br>11<br>-4<br>13<br>-5<br>-2  </p>
<h3 id="Output示例"><a href="#Output示例" class="headerlink" title="Output示例"></a>Output示例</h3><p>20  </p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>动态规划入门题= =…我个大水笔，改个时间补充一下…代码如下：<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span> ;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n ;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n ;</span><br><span class="line">    ll maxx = <span class="number">0</span> ;</span><br><span class="line">    ll a[n + <span class="number">10</span>] ;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; n ; i ++ )&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a[i] ;</span><br><span class="line">    &#125;</span><br><span class="line">    ll ans = <span class="number">0</span> ;</span><br><span class="line">    maxx = ans = a[<span class="number">0</span>] ;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">1</span> ; i &lt; n ; i ++ )&#123;</span><br><span class="line">        maxx = max(maxx , <span class="number">0L</span>L) + a[i] ;</span><br><span class="line">        ans = max(ans , maxx) ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Online Judge</category>
      </categories>
      <tags>
        <tag>日常水题</tag>
        <tag>51Nod</tag>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title>洛谷 P3880 [JLOI2008]提示问题</title>
    <url>/2018/10/15/%E6%B4%9B%E8%B0%B7-P3880-JLOI2008-%E6%8F%90%E7%A4%BA%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>最近在JLOI网上的一个流行游戏中，选手要回答很难的问题。假如在规定时间内不能回答，系统将给出1个提示，之后再依次给出第2，3个提示。出现在答案中的是字母和下列字符：</p>
<p>‘.’,’,’,’:’,’;’,’!’,’?’,’-‘和空格（空格不会在开头和结尾出现）</p>
<p>字母是指：小写字母’a’…’z’ 大写字母 ‘A’…’Z’，其中aeiouAEIOU是元音字母。</p>
<p>生成提示的规则：</p>
<p>第1个提示：简单的将所有字母换成’.’即可；</p>
<p>第2个提示：从第1个提示而来，将所有字母的个数求出，再将总个数除以三，得到的最接近商的自然数N，将第1个提示中的前N个字母显示；</p>
<p>第3个提示：从第2个提示而来，将剩下的元音字母显示。假如没有可显示的元音字母，则从第1个提示而来，即我们将前2/3的字母显示（同样如不能被3整除则取最接近的整数）。</p>
<h2 id="输入输出格式"><a href="#输入输出格式" class="headerlink" title="输入输出格式"></a>输入输出格式</h2><h3 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h3><p>仅一行，给出问题，问题字符数最多不超过50</p>
<h3 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h3><p>三行：按规则输出的三行提示</p>
<h2 id="输入输出样例"><a href="#输入输出样例" class="headerlink" title="输入输出样例"></a>输入输出样例</h2><h3 id="输入样例-1："><a href="#输入样例-1：" class="headerlink" title="输入样例#1："></a>输入样例#1：</h3><p>Upomoc! Lpv s nm pkrl sv smglsnk.</p>
<h3 id="输出样例-1："><a href="#输出样例-1：" class="headerlink" title="输出样例#1："></a>输出样例#1：</h3><p>……! … . .. …. .. ……..<br>Upomoc! Lp. . .. …. .. ……..<br>Upomoc! Lpv s nm pkrl s. ……..  </p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>题意很好理解，但这道题实在太考细节了…<br>随便乱打的一个测试样例竟然帮我找到第八组测试样例过不去的原因？？hhhh…<br>有个小地方忘写了导致第十组样例一直WA…<br>为各位dalao献上蒟蒻的代码，详情请看注释。<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span> ;</span><br><span class="line"> </span><br><span class="line"><span class="built_in">string</span> str1 ;   <span class="comment">//输入的原始串</span></span><br><span class="line"><span class="built_in">string</span> str2 ;   <span class="comment">//根据第1个提示之后的串</span></span><br><span class="line"><span class="built_in">string</span> str3 ;   <span class="comment">//将第2个提示之后的串复制到str3中</span></span><br><span class="line"><span class="comment">//string str4 ; str4 ？ 并没有 str4，由str3或str2与str1可直接得出最后一个提示的串</span></span><br><span class="line"><span class="keyword">int</span> tot_alpha ;     <span class="comment">//统计总共的字母数字</span></span><br><span class="line"><span class="keyword">bool</span> check = <span class="literal">false</span> ;        <span class="comment">//检查第3个提示中是否有可显示的元音字母</span></span><br><span class="line"><span class="keyword">int</span> indexx ;        <span class="comment">//找到第2个提示第N个字母的位置</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">closest</span><span class="params">(<span class="keyword">double</span> a , <span class="keyword">double</span> b , <span class="keyword">double</span> c)</span></span>&#123;    <span class="comment">//在第二个提示中比较谁更接近，也可如上面几位dalao的round函数</span></span><br><span class="line">    <span class="keyword">if</span> ( <span class="built_in">fabs</span>(c - a) &gt; <span class="built_in">fabs</span>(c - b) )&#123;       <span class="comment">//比较浮点数绝对值，谁小谁更接近</span></span><br><span class="line">        <span class="keyword">return</span> b ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a ;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">display_one</span><span class="params">()</span></span>&#123;         <span class="comment">//提示1，直接处理字符串</span></span><br><span class="line">    str2 = str1 ;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; str1.size() ; i ++ )&#123;</span><br><span class="line">        <span class="keyword">if</span> ( <span class="built_in">isalpha</span>(str2[i]) )&#123;</span><br><span class="line">            str2[i] = <span class="string">'.'</span> ;</span><br><span class="line">            tot_alpha ++ ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; str2 &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">display_two</span><span class="params">()</span></span>&#123;         <span class="comment">//提示2，由str1和str2组合而成</span></span><br><span class="line">    <span class="keyword">double</span> number = tot_alpha / <span class="number">3.0</span> ;</span><br><span class="line">    <span class="comment">/*天花板ceil(element) 和 地板函数floor(element) (雾</span></span><br><span class="line"><span class="comment">    ceil()向上取整，返回不小于element的最大的整数，</span></span><br><span class="line"><span class="comment">    floor()向下取整，返回不大于element的最小的整数</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">int</span> num = closest(<span class="built_in">ceil</span>(number) , <span class="built_in">floor</span>(number) , number) ;      <span class="comment">//找到离商最接近的自然数N</span></span><br><span class="line">    <span class="keyword">int</span> count_ = <span class="number">0</span> ;        <span class="comment">//记录到目前出现的字母个数</span></span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; str1.size() ; i ++ )&#123;</span><br><span class="line">        str3[i] = str1[i] ;         <span class="comment">//将串复制到str3，便于第三个提示的处理 *ps：之前觉得这个str3会用到，但写到后面发现没什么用...于是一直WA第十组样例的噩梦开始了...</span></span><br><span class="line">        <span class="comment">/*纪念找到这个BUG的此组胡乱敲打的样例....</span></span><br><span class="line"><span class="comment">            input:  asd132asd123zxc</span></span><br><span class="line"><span class="comment">            output: ...132...123...</span></span><br><span class="line"><span class="comment">            output: asd132...123...</span></span><br><span class="line"><span class="comment">            output: as.132a..123...    正确输出-&gt;  output: asd132a..123...</span></span><br><span class="line"><span class="comment">          所以有了之后的 “用不着str3” 的疯狂打脸...</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">if</span> ( <span class="built_in">isalpha</span>(str1[i]) )&#123;        <span class="comment">//ctype.h 头文件判断字符是否是字母函数</span></span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; str1[i] ;           <span class="comment">//输出原串str1中的对应字符</span></span><br><span class="line">            count_ ++ ;                 <span class="comment">//若真字母个数+1 </span></span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; str1[i] ;           <span class="comment">//输出原串str1中的对应字符</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ( count_ == num ) &#123;      <span class="comment">//当字母个数等于N时，记录下标，并跳出</span></span><br><span class="line">            indexx = i ;            <span class="comment">//记录第N个字母的位置</span></span><br><span class="line">            <span class="keyword">break</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i = indexx + <span class="number">1</span> ; i &lt; str1.size() ; i ++ )&#123;        <span class="comment">//输出str2之后的串</span></span><br><span class="line">        str3[i] = str2[i] ;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; str2[i] ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">display_thr</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">/*str3 = str1 ;   </span></span><br><span class="line"><span class="comment">    此处若加上这语句会出现一个未知的错误..</span></span><br><span class="line"><span class="comment">    如果有dalao知道为什么请告诉我，感激不尽！</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i = indexx + <span class="number">1</span> ; i &lt; str1.size() ; i ++ )&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        cytpe.h头文件 tolower() 函数将一个字母转换成小写字母，与之对应的是 toupper() </span></span><br><span class="line"><span class="comment">        此处统一转成小写字母，便于处理大写元音字母与小写元音字母</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">if</span> ( <span class="built_in">tolower</span>(str1[i]) == <span class="string">'a'</span> || <span class="built_in">tolower</span>(str1[i]) == <span class="string">'e'</span> || <span class="built_in">tolower</span>(str1[i]) == <span class="string">'i'</span> || <span class="built_in">tolower</span>(str1[i]) == <span class="string">'o'</span> || <span class="built_in">tolower</span>(str1[i]) == <span class="string">'u'</span> )&#123;</span><br><span class="line">            check = <span class="literal">true</span> ;      <span class="comment">//说明有可显示的元音字母</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( check )&#123;   <span class="comment">//若真，则由原串str1和str3组合生成答案</span></span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; indexx ; i ++ )&#123;      <span class="comment">//输出到第N个字母的位置</span></span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; str1[i] ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> i = indexx ; i &lt; str1.size() ; i ++ )&#123;    </span><br><span class="line">            <span class="comment">/*输出第N个字母之后的字符，并判断是否有元音字母，</span></span><br><span class="line"><span class="comment">            若有则输出str1中的字母，若无则输出str3中的字符</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            <span class="keyword">if</span> ( <span class="built_in">tolower</span>(str1[i]) == <span class="string">'a'</span> || <span class="built_in">tolower</span>(str1[i]) == <span class="string">'e'</span> || <span class="built_in">tolower</span>(str1[i]) == <span class="string">'i'</span> || <span class="built_in">tolower</span>(str1[i]) == <span class="string">'o'</span> || <span class="built_in">tolower</span>(str1[i]) == <span class="string">'u'</span> )&#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; str1[i] ;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; str3[i] ;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;  <span class="comment">//若非真，则由原串str1与str2组合生成答案</span></span><br><span class="line">        <span class="keyword">double</span> number = tot_alpha / <span class="number">3.0</span> * <span class="number">2.0</span> ;</span><br><span class="line">        <span class="keyword">int</span> count_ = <span class="number">0</span> ;</span><br><span class="line">        <span class="keyword">int</span> num = closest(<span class="built_in">ceil</span>(number) , <span class="built_in">floor</span>(number) , number) ;</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; str1.size() ; i ++ )&#123;</span><br><span class="line">            <span class="keyword">if</span> ( count_ &lt; num )&#123;            <span class="comment">//显示前2/3个字母</span></span><br><span class="line">                <span class="keyword">if</span> ( <span class="built_in">isalpha</span>(str1[i]) )&#123;</span><br><span class="line">                    <span class="built_in">cout</span> &lt;&lt; str1[i] ;</span><br><span class="line">                    count_ ++ ;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="built_in">cout</span> &lt;&lt; str1[i] ;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;       <span class="comment">//若字母个数等于num则输出str2之后的串</span></span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; str2[i] ;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    getline(<span class="built_in">cin</span> , str1) ;</span><br><span class="line">    str3 = str1 ;           <span class="comment">//若不加上此句在 codeblocks 下会返回非零...如果有dalao知道是什么原因请告诉我，感激不尽！</span></span><br><span class="line">    display_one() ;</span><br><span class="line">    display_two() ;</span><br><span class="line">    display_thr() ;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Online Judge</category>
      </categories>
      <tags>
        <tag>日常水题</tag>
        <tag>模拟</tag>
        <tag>洛谷</tag>
      </tags>
  </entry>
  <entry>
    <title>HDU 1425 sort</title>
    <url>/2018/10/14/HDU-1425-sort/</url>
    <content><![CDATA[<h2 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h2><h3 id="Time-Limit-6000-1000-MS-Java-Others-Memory-Limit-65536-32768-K-Java-Others"><a href="#Time-Limit-6000-1000-MS-Java-Others-Memory-Limit-65536-32768-K-Java-Others" class="headerlink" title="Time Limit: 6000/1000 MS (Java/Others)    Memory Limit: 65536/32768 K (Java/Others)"></a>Time Limit: 6000/1000 MS (Java/Others)    Memory Limit: 65536/32768 K (Java/Others)</h3><h3 id="Total-Submission-s-60210-Accepted-Submission-s-16618"><a href="#Total-Submission-s-60210-Accepted-Submission-s-16618" class="headerlink" title="Total Submission(s): 60210    Accepted Submission(s): 16618"></a>Total Submission(s): 60210    Accepted Submission(s): 16618</h3><h2 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h2><p>给你n个整数，请按从大到小的顺序输出其中前m大的数。</p>
<h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><p>每组测试数据有两行，第一行有两个数n,m(0&lt;n,m&lt;1000000)，第二行包含n个各不相同，且都处于区间[-500000,500000]的整数。</p>
<h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p>对每组测试数据按从大到小的顺序输出前m大的数。</p>
<h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h3><p>5 3<br>3 -35 92 213 -644  </p>
<h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h3><p>213 92 3</p>
<h3 id="Hint"><a href="#Hint" class="headerlink" title="Hint"></a>Hint</h3><p>请用VC/VC++提交</p>
<h3 id="Author"><a href="#Author" class="headerlink" title="Author"></a>Author</h3><p>LL</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>此题用桶排序即可。用两个数组分别存放正数和负数和0，用数组的下标表示这个数。代码如下：</p>
<pre><code class="c++"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span>
<span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span>
<span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span>
<span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span>
<span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span>
<span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span>
<span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span>
<span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span>
<span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span>
<span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span>
<span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span>
<span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utility&gt;</span></span>
<span class="meta">#<span class="meta-keyword">define</span> ll long long</span>

<span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span> ;

<span class="keyword">bool</span> pos[<span class="number">500005</span>] ;
<span class="keyword">bool</span> neg[<span class="number">500005</span>] ;

<span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>{
    <span class="built_in">memset</span>(pos , <span class="literal">false</span> , <span class="keyword">sizeof</span>(pos)) ;
    <span class="built_in">memset</span>(neg , <span class="literal">false</span> , <span class="keyword">sizeof</span>(neg)) ;
    <span class="keyword">return</span> ;
}

<span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{
    <span class="keyword">int</span> n , m ;
    <span class="keyword">while</span> ( <span class="built_in">scanf</span>(<span class="string">"%d%d"</span> , &amp;n , &amp;m) != EOF ){
        init() ;
        <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; n ; i ++ ){
            <span class="keyword">int</span> t ;
            <span class="built_in">scanf</span>(<span class="string">"%d"</span> , &amp;t) ;
            <span class="keyword">if</span> ( t &lt; <span class="number">0</span> ){
                neg[-t] = <span class="literal">true</span> ;
            }<span class="keyword">else</span> <span class="keyword">if</span> ( t &gt;= <span class="number">0</span> ){
                pos[t] = <span class="literal">true</span> ;
            }
        }
        <span class="keyword">bool</span> first = <span class="literal">true</span> ;
        <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">500000</span> ; i &gt;= <span class="number">0</span> ; i -- ){
            <span class="keyword">if</span> ( pos[i] == <span class="literal">true</span> &amp;&amp; m ){
                <span class="keyword">if</span> ( first == <span class="literal">true</span> ){
                    <span class="built_in">printf</span>(<span class="string">"%d"</span> , i) ;
                    first = <span class="literal">false</span> ;
                }<span class="keyword">else</span>{
                    <span class="built_in">printf</span>(<span class="string">" %d"</span> , i) ;
                }
                m -- ;
            }
        }
        <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= <span class="number">500000</span> ; i ++ ){
            <span class="keyword">if</span> ( neg[i] == <span class="literal">true</span> &amp;&amp; m ){
                <span class="keyword">if</span> ( first == <span class="literal">true</span> ){
                    <span class="built_in">printf</span>(<span class="string">"%d"</span> , -i) ;
                    first = <span class="literal">false</span> ;
                }<span class="keyword">else</span>{
                    <span class="built_in">printf</span>(<span class="string">" %d"</span> , -i) ;
                }
                m -- ;
            }
        }
        <span class="built_in">printf</span>(<span class="string">"\n"</span>) ;
    }
    <span class="keyword">return</span> <span class="number">0</span> ;
}
</code></pre>
]]></content>
      <categories>
        <category>Online Judge</category>
      </categories>
      <tags>
        <tag>HDU</tag>
        <tag>桶排序</tag>
      </tags>
  </entry>
  <entry>
    <title>洛谷 P1464 Function</title>
    <url>/2018/10/13/%E6%B4%9B%E8%B0%B7-P1464-Function/</url>
    <content><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>对于一个递归函数w(a,b,c)  </p>
<ul>
<li>如果 a≤0 or b≤0 or c≤0 就返回值1.  </li>
<li>如果 a&gt;20 or b&gt;20 or c&gt;20 就返回w(20,20,20)  </li>
<li>如果 a&lt;b 并且 b&lt;c 就返回w(a,b,c-1)+w(a,b-1,c-1)-w(a,b-1,c)  </li>
<li>其它的情况就返回 w(a−1,b,c)+w(a−1,b−1,c)+w(a−1,b,c−1)−w(a−1,b−1,c−1)<br>这是个简单的递归函数，但实现起来可能会有些问题。当a,b,ca,b,c均为15时，调用的次数将非常的多。你要想个办法才行.  </li>
</ul>
<p>/<em> absi2011 : 比如 w(30,-1,0)w(30,−1,0)既满足条件1又满足条件2<br>这种时候我们就按最上面的条件来算<br>所以答案为1<br>/</em></p>
<h2 id="输入输出格式"><a href="#输入输出格式" class="headerlink" title="输入输出格式"></a>输入输出格式</h2><h3 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h3><p>会有若干行。  </p>
<p>并以-1,-1,-1−1,−1,−1结束。</p>
<p>保证输入的数在[−9223372036854775808,9223372036854775807]之间，并且是整数。</p>
<h3 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h3><p>输出若干行，每一行格式：</p>
<p>w(a, b, c) = ans</p>
<p>注意空格。</p>
<h2 id="输入输出样例"><a href="#输入输出样例" class="headerlink" title="输入输出样例"></a>输入输出样例</h2><h3 id="输入样例-1："><a href="#输入样例-1：" class="headerlink" title="输入样例#1："></a>输入样例#1：</h3><p>1 1 1<br>2 2 2<br>-1 -1 -1  </p>
<h3 id="输出样例-1："><a href="#输出样例-1：" class="headerlink" title="输出样例#1："></a>输出样例#1：</h3><p>w(1, 1, 1) = 2<br>w(2, 2, 2) = 4  </p>
<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>记忆化搜索  </p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>这个题目已经告诉我们用记忆化搜索了。。。在此之前我们先看看如何记忆化搜索斐波那契数列。<br>斐波那契数列满足 f(n) = f(n-1) + f(n-2) 如果当 n 很大时按照平常的递归代码：<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span> ;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">f</span><span class="params">( ll n )</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ( n == <span class="number">0</span> )&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> ( n == <span class="number">1</span> || n == <span class="number">2</span> )&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> f(n - <span class="number">1</span>) + f(n - <span class="number">2</span>) ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ll n ;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="built_in">cin</span> &gt;&gt; n ) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; f(n) &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>当 n 到 36 左右时速度已经明显变慢。如果采用记忆化搜索的办法呢？代码如下：<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span> ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">305</span> ;</span><br><span class="line"></span><br><span class="line">ll ans[MAXN] ;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">f</span><span class="params">( ll n )</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ( n == <span class="number">0</span> )&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> ( n == <span class="number">1</span> || n == <span class="number">2</span> )&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span> ;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> ( ans[n] != <span class="number">0</span> )&#123;</span><br><span class="line">        <span class="keyword">return</span> ans[n] ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans[n] = f(n - <span class="number">1</span>) + f(n - <span class="number">2</span>) ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ll n ;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="built_in">cin</span> &gt;&gt; n )&#123;</span><br><span class="line">        <span class="built_in">memset</span>(ans , <span class="number">0</span> , <span class="keyword">sizeof</span>(ans)) ;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; f(n) &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>当 n 大于 36 甚至到 90 左右(快炸 long long 了..)都能瞬间出答案。所以记忆化搜索的思想就是记录下每一次计算的答案，如果这个值存在的话就直接返回这个值，省去了递归中重复计算的过程，可以省去大量的时间，这或许也是个用空间换时间的一个典型例子。<br>所以本道题也可以用记忆化搜索的思想去解决，记录中间结果减少重复计算从而省去大量时间。代码如下：<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span> ;</span><br><span class="line"></span><br><span class="line">ll ans[<span class="number">25</span>][<span class="number">25</span>][<span class="number">25</span>] ;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">25</span> ; i ++ )&#123;</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> j = <span class="number">0</span> ; j &lt; <span class="number">25</span> ; j ++ )&#123;</span><br><span class="line">            <span class="keyword">for</span> ( <span class="keyword">int</span> k = <span class="number">0</span> ; k &lt; <span class="number">25</span> ; k ++ )&#123;</span><br><span class="line">                ans[i][j][k] = <span class="number">-1</span> ;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">w</span> <span class="params">( ll a , ll b , ll c )</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ( a &lt;= <span class="number">0</span> || b &lt;= <span class="number">0</span> || c &lt;= <span class="number">0</span> )&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span> ;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> ( ans[a][b][c] != <span class="number">-1</span> )&#123;</span><br><span class="line">        <span class="keyword">return</span> ans[a][b][c] ;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> ( a &gt; <span class="number">20</span> || b &gt; <span class="number">20</span> || c &gt; <span class="number">20</span> )&#123;</span><br><span class="line">        ans[a][b][c] = w(<span class="number">20</span> , <span class="number">20</span> , <span class="number">20</span>) ;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> ( a &lt; b &amp;&amp; b &lt; c )&#123;</span><br><span class="line">        ans[a][b][c] = w(a , b , c - <span class="number">1</span> ) + w(a , b - <span class="number">1</span> , c - <span class="number">1</span>) - w(a , b - <span class="number">1</span> , c) ;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        ans[a][b][c] = w(a - <span class="number">1</span> , b , c) + w(a - <span class="number">1</span> , b - <span class="number">1</span> , c) + w(a - <span class="number">1</span> , b , c - <span class="number">1</span>) - w(a - <span class="number">1</span> , b - <span class="number">1</span> , c - <span class="number">1</span>) ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans[a][b][c] ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ll a , b , c ;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b &gt;&gt; c &amp;&amp; !(a == <span class="number">-1</span> &amp;&amp; b == <span class="number">-1</span> &amp;&amp; c == <span class="number">-1</span>) )&#123;</span><br><span class="line">        init() ;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"w(%lld, %lld, %lld) = "</span> , a , b , c) ;</span><br><span class="line">        <span class="keyword">if</span> ( a &gt; <span class="number">20</span> ) a = <span class="number">21</span> ;</span><br><span class="line">        <span class="keyword">if</span> ( b &gt; <span class="number">20</span> ) b = <span class="number">21</span> ;</span><br><span class="line">        <span class="keyword">if</span> ( c &gt; <span class="number">20</span> ) c = <span class="number">21</span> ;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span> , w(a , b , c)) ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Online Judge</category>
      </categories>
      <tags>
        <tag>洛谷</tag>
        <tag>记忆化搜索</tag>
        <tag>递归</tag>
      </tags>
  </entry>
  <entry>
    <title>洛谷 P1067 多项式输出</title>
    <url>/2018/10/12/%E6%B4%9B%E8%B0%B7-P1067-%E5%A4%9A%E9%A1%B9%E5%BC%8F%E8%BE%93%E5%87%BA/</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>(Markdown编辑器复制这个修改太麻烦，索性直接粘贴网址了…）<br>网址如下：<br><a href="https://www.luogu.org/problemnew/show/P1067" target="_blank" rel="noopener">洛谷 P1067 多项式输出</a>  </p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>这是个简单的模拟题，不算复杂。题目大意就是给你一个数 n ，以及 n + 1 项系数，以降幂的方式输出对应的一元n次多项式。需要注意的地方有：  </p>
<ul>
<li>当这个系数大于 0 时，如果此项为第一项，检查 n 是否是 1 ，并且还要检查此项系数是否是 1 。系数是否是 1 控制 x 的系数能不能出现 1 ，n 是否是 1 控制 x 的幂次方能不能出现 1 ，是否是第一项控制当系数大于 0 时候是否有 ‘+’ 号。  </li>
<li>当这个系数小于 0 时，需要检查 n 是否是 1 ，并且还要检查此项系数是否是 -1 。系数是否是 -1 控制 x 的系数能不能只出现 ‘-‘号，n 的作用等同于上面。  </li>
<li>当这个系数等于 0 时，直接将 n 减一 ，便于之后的多项式的输出。</li>
<li>每输出一项 n 得减一，因为是按降序排列。  </li>
<li>当 n == 0 时，说明到了最后一项输出的时候了，此时需要根据这个值的情况进行输出。如果这个值大于 0 ，则输出值的同时也需要输出 ‘+’ 号；如果这个值小于 0 ，直接输出就好，符号已经包含在数字里；如果这个值为 0 ，直接跳出循环，不用输出。</li>
</ul>
<p>代码如下：<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span> ;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t ;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; t ;</span><br><span class="line">    <span class="keyword">int</span> n = t ;</span><br><span class="line">    <span class="keyword">int</span> *a = <span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">10</span>] ;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt;= n ; i ++ )&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a[i] ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt;= t ; i ++ )&#123;</span><br><span class="line">        <span class="keyword">if</span> ( n == <span class="number">0</span> )&#123;</span><br><span class="line">            <span class="keyword">if</span> ( a[i] &gt; <span class="number">0</span> )&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"+%d"</span> , a[i]) ;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ( a[i] &lt; <span class="number">0</span> )&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d"</span> , a[i]) ;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">break</span> ;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span> ( a[i] &gt; <span class="number">0</span> )&#123;</span><br><span class="line">                <span class="keyword">if</span> ( i == <span class="number">0</span> )&#123;</span><br><span class="line">                    <span class="keyword">if</span> ( n == <span class="number">1</span> )&#123;</span><br><span class="line">                        <span class="keyword">if</span> ( a[i] == <span class="number">1</span> )&#123;</span><br><span class="line">                            <span class="built_in">printf</span>(<span class="string">"x"</span>) ;</span><br><span class="line">                            n -- ;</span><br><span class="line">                        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                            <span class="built_in">printf</span>(<span class="string">"%dx"</span> , a[i]) ;</span><br><span class="line">                            n -- ;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        <span class="keyword">if</span> ( a[i] == <span class="number">1</span> )&#123;</span><br><span class="line">                            <span class="built_in">printf</span>(<span class="string">"x^%d"</span> , n --) ;</span><br><span class="line">                        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                            <span class="built_in">printf</span>(<span class="string">"%dx^%d"</span> , a[i] , n --) ;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> ( n == <span class="number">1</span> )&#123;</span><br><span class="line">                        <span class="keyword">if</span> ( a[i] == <span class="number">1</span> )&#123;</span><br><span class="line">                            <span class="built_in">printf</span>(<span class="string">"+x"</span>) ;</span><br><span class="line">                            n -- ;</span><br><span class="line">                        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                            <span class="built_in">printf</span>(<span class="string">"+%dx"</span> , a[i]) ;</span><br><span class="line">                            n -- ;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span>&#123;</span><br><span class="line">                        <span class="keyword">if</span> ( a[i] == <span class="number">1</span> )&#123;</span><br><span class="line">                            <span class="built_in">printf</span>(<span class="string">"+x^%d"</span> , n --) ;</span><br><span class="line">                        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                            <span class="built_in">printf</span>(<span class="string">"+%dx^%d"</span> , a[i] , n --) ;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> ( a[i] &lt; <span class="number">0</span> )&#123;</span><br><span class="line">                <span class="keyword">if</span> ( n == <span class="number">1</span> )&#123;</span><br><span class="line">                    <span class="keyword">if</span> ( a[i] == <span class="number">-1</span> )&#123;</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">"-x"</span>) ;</span><br><span class="line">                        n -- ;</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">"%dx"</span> , a[i]) ;</span><br><span class="line">                        n -- ;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> ( a[i] == <span class="number">-1</span> )&#123;</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">"-x^%d"</span> , n --) ;</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">"%dx^%d"</span> , a[i] , n --) ;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                n -- ;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Online Judge</category>
      </categories>
      <tags>
        <tag>日常水题</tag>
        <tag>模拟</tag>
        <tag>洛谷</tag>
      </tags>
  </entry>
  <entry>
    <title>单链表的基本操作(创建,删除,插入,逆置)</title>
    <url>/2018/10/11/%E5%8D%95%E9%93%BE%E8%A1%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C-%E5%88%9B%E5%BB%BA-%E5%88%A0%E9%99%A4-%E6%8F%92%E5%85%A5-%E9%80%86%E7%BD%AE/</url>
    <content><![CDATA[<p>代码鲁棒性较差，之后补充注释以及减少BUG增加可读性。<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span> ;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data ;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">next</span> ;</span></span><br><span class="line">&#125;node , *Lnode ;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Linklist_length</span><span class="params">( node *head )</span></span>&#123;</span><br><span class="line">    node *p = (node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(node)) ;</span><br><span class="line">    <span class="keyword">int</span> len = <span class="number">0</span> ;</span><br><span class="line">    <span class="keyword">while</span> ( p )&#123;</span><br><span class="line">        p = p-&gt;next ;</span><br><span class="line">        len ++ ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> len ;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function">Lnode <span class="title">Link_reverse_head</span><span class="params">( node *head )</span></span>&#123;</span><br><span class="line">    node *p = head-&gt;next ;</span><br><span class="line">    head-&gt;next = <span class="literal">NULL</span> ;</span><br><span class="line">    node *q ;</span><br><span class="line">    <span class="keyword">while</span> ( p )&#123;</span><br><span class="line">        q = p ;</span><br><span class="line">        p = p-&gt;next ;</span><br><span class="line">        q-&gt;next = head-&gt;next ;</span><br><span class="line">        head-&gt;next = q ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head ;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function">Lnode <span class="title">Linklist_insert</span><span class="params">( <span class="keyword">int</span> pos , <span class="keyword">int</span> num , node *head )</span></span>&#123;</span><br><span class="line">    node *index = head ;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; pos ; i ++ )&#123;</span><br><span class="line">        index = index-&gt;next ;</span><br><span class="line">    &#125;</span><br><span class="line">    node *p = (node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(node)) ;</span><br><span class="line">    p-&gt;data = num ;</span><br><span class="line">    p-&gt;next = index-&gt;next ;</span><br><span class="line">    index-&gt;next = p ;</span><br><span class="line">    <span class="keyword">return</span> head ;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function">Lnode <span class="title">Linklist_delete</span><span class="params">( <span class="keyword">int</span> pos , node *head )</span></span>&#123;</span><br><span class="line">    node *index = head ;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">1</span> ; i &lt; pos ; i ++ )&#123;</span><br><span class="line">        index = index-&gt;next ;</span><br><span class="line">    &#125;</span><br><span class="line">    node *p = index-&gt;next ;</span><br><span class="line">    index-&gt;next = p-&gt;next ;</span><br><span class="line">    p-&gt;next = <span class="literal">NULL</span> ;</span><br><span class="line">    <span class="built_in">free</span>( p ) ;</span><br><span class="line">    <span class="keyword">return</span> head ;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function">Lnode <span class="title">Creat_from_head</span><span class="params">( <span class="keyword">int</span> count )</span></span>&#123;</span><br><span class="line">    node *head = (node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(node)) ;</span><br><span class="line">    head-&gt;next = <span class="literal">NULL</span> ;</span><br><span class="line">    <span class="keyword">int</span> num ;</span><br><span class="line">    <span class="keyword">while</span> ( count -- &amp;&amp; <span class="built_in">cin</span> &gt;&gt; num )&#123;</span><br><span class="line">        node *p = (node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(node)) ;</span><br><span class="line">        p-&gt;data = num ;</span><br><span class="line">        p-&gt;next = head-&gt;next ;</span><br><span class="line">        head-&gt;next = p ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head ;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function">Lnode <span class="title">Creat_from_last</span><span class="params">( <span class="keyword">int</span> count )</span></span>&#123;</span><br><span class="line">    node *head = (node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(node)) ;</span><br><span class="line">    head-&gt;next = <span class="literal">NULL</span> ;</span><br><span class="line">    <span class="keyword">int</span> num ;</span><br><span class="line">    node *index = head ;</span><br><span class="line">    <span class="keyword">while</span> ( count -- &amp;&amp; <span class="built_in">cin</span> &gt;&gt; num )&#123;</span><br><span class="line">        node *p = (node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(node)) ;</span><br><span class="line">        p-&gt;data = num ;</span><br><span class="line">        index-&gt;next = p ;</span><br><span class="line">        index = p ;</span><br><span class="line">    &#125;</span><br><span class="line">    index-&gt;next = <span class="literal">NULL</span> ;</span><br><span class="line">    <span class="keyword">return</span> head ;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">( node *head )</span></span>&#123;</span><br><span class="line">    node *p = head-&gt;next ;</span><br><span class="line">    <span class="keyword">while</span> ( p )&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; p-&gt;data &lt;&lt; <span class="string">" "</span> ;</span><br><span class="line">        p = p-&gt;next ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num ;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; num ;</span><br><span class="line">    node *index_creat = Creat_from_last( num ) ;</span><br><span class="line">    output( index_creat ) ;</span><br><span class="line">    <span class="keyword">int</span> pos , number ;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; pos &gt;&gt; number ;</span><br><span class="line">    node *index_insert = Linklist_insert( pos , number , index_creat ) ;</span><br><span class="line">    output( index_insert ) ;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; pos ;</span><br><span class="line">    node *index_delete = Linklist_delete( pos , index_creat ) ;</span><br><span class="line">    output( index_delete ) ;</span><br><span class="line"><span class="comment">//    int len = Linklist_length( index_creat ) ;</span></span><br><span class="line">    node *index_reverse = Link_reverse_head( index_creat ) ;</span><br><span class="line">    output( index_reverse ) ;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>链表</tag>
      </tags>
  </entry>
  <entry>
    <title>洛谷 P1117 [模板]快速排序</title>
    <url>/2018/10/10/%E6%B4%9B%E8%B0%B7-P1117-%E6%A8%A1%E7%89%88-%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>利用快速排序算法将读入的NN个数从小到大排序后输出。</p>
<p>快速排序是信息学竞赛的必备算法之一。对于快速排序不是很了解的同学可以自行上网查询相关资料，掌握后独立完成。（C++C++选手请不要试图使用STL，虽然你可以使用sort一遍过，但是你并没有掌握快速排序算法的精髓。）</p>
<h2 id="输入输出格式"><a href="#输入输出格式" class="headerlink" title="输入输出格式"></a>输入输出格式</h2><h3 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h3><p>第1行为一个正整数NN，第2行包含N个空格隔开的正整数ai，为你需要进行排序的数，数据保证了Ai不超过1000000000。</p>
<h3 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h3><p>将给定的N个数从小到大输出，数之间空格隔开，行末换行且无空格。</p>
<h2 id="输入输出样例"><a href="#输入输出样例" class="headerlink" title="输入输出样例"></a>输入输出样例</h2><h3 id="输入样例-1："><a href="#输入样例-1：" class="headerlink" title="输入样例#1："></a>输入样例#1：</h3><p>5<br>4 2 4 5 1  </p>
<h3 id="输出样例-1："><a href="#输出样例-1：" class="headerlink" title="输出样例#1："></a>输出样例#1：</h3><p>1 2 4 4 5  </p>
<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>对于20\%20%的数据，有N≤1000N≤1000；</p>
<p>对于100\%100%的数据，有N≤100000N≤100000。</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>快速排序模版，代码如下：<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span> ;</span><br><span class="line"></span><br><span class="line">pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;partition( <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;a ,<span class="keyword">int</span> l, <span class="keyword">int</span> r )&#123;</span><br><span class="line">    <span class="keyword">int</span> less = l<span class="number">-1</span>,more = r ;</span><br><span class="line">    <span class="keyword">while</span> ( l &lt; more )&#123;</span><br><span class="line">        <span class="keyword">if</span> ( a[l] &lt; a[r] )&#123;</span><br><span class="line">            swap(a[l++],a[++less]) ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ( a[l] &gt; a[r] )&#123;</span><br><span class="line">            swap(a[l],a[--more]) ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            l ++ ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    swap(a[more],a[r]) ;</span><br><span class="line">    <span class="keyword">return</span> make_pair(less+<span class="number">1</span>,more);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;a , <span class="keyword">int</span> l , <span class="keyword">int</span> r )</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ( l &lt; r )&#123;</span><br><span class="line">        swap(a[l +rand()%(<span class="keyword">int</span>)(r-l+<span class="number">1</span>)],a[r]) ;</span><br><span class="line">        pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; p = partition(a,l,r) ;</span><br><span class="line">        quickSort(a,l,p.first<span class="number">-1</span>) ;</span><br><span class="line">        quickSort(a,p.second+<span class="number">1</span>,r) ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a ;</span><br><span class="line">    <span class="keyword">int</span> n ;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n ;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; n ; i ++ )&#123;</span><br><span class="line">        <span class="keyword">int</span> num ;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; num ;</span><br><span class="line">        a.push_back(num) ;</span><br><span class="line">    &#125;</span><br><span class="line">    quickSort(a,<span class="number">0</span>,a.size()<span class="number">-1</span>) ;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; a.size() ; i ++ )&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; a[i] &lt;&lt; <span class="string">" "</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Online Judge</category>
      </categories>
      <tags>
        <tag>日常水题</tag>
        <tag>模板</tag>
        <tag>洛谷</tag>
        <tag>快速排序</tag>
      </tags>
  </entry>
  <entry>
    <title>洛谷 P1579 哥德巴赫猜想(升级版)</title>
    <url>/2018/10/09/%E6%B4%9B%E8%B0%B7-P1579-%E5%93%A5%E5%BE%B7%E5%B7%B4%E8%B5%AB%E7%8C%9C%E6%83%B3-%E5%8D%87%E7%BA%A7%E7%89%88/</url>
    <content><![CDATA[<h2 id="题目背景"><a href="#题目背景" class="headerlink" title="题目背景"></a>题目背景</h2><p>1742年6月7日哥德巴赫写信给当时的大数学家欧拉，正式提出了以下的猜想：任何一个大于9的奇数都可以表示成3个质数之和。质数是指除了1和本身之外没有其他约数的数，如2和11都是质数，而6不是质数，因为6除了约数1和6之外还有约数2和3。需要特别说明的是1不是质数。<br>这就是哥德巴赫猜想。欧拉在回信中说，他相信这个猜想是正确的，但他不能证明。<br>从此，这道数学难题引起了几乎所有数学家的注意。哥德巴赫猜想由此成为数学皇冠上一颗可望不可及的“明珠”。</p>
<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>现在请你编一个程序验证哥德巴赫猜想。<br>先给出一个奇数n，要求输出3个质数，这3个质数之和等于输入的奇数。</p>
<h3 id="输入输出格式"><a href="#输入输出格式" class="headerlink" title="输入输出格式"></a>输入输出格式</h3><h4 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h4><p>仅有一行，包含一个正奇数n，其中9&lt;n&lt;20000</p>
<h4 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h4><p>仅有一行，输出3个质数，这3个质数之和等于输入的奇数。相邻两个质数之间用一个空格隔开，最后一个质数后面没有空格。如果表示方法不唯一，请输出第一个质数最小的方案，如果第一个质数最小的方案不唯一，请输出第一个质数最小的同时，第二个质数最小的方案。</p>
<h3 id="输入输出样例"><a href="#输入输出样例" class="headerlink" title="输入输出样例"></a>输入输出样例</h3><h4 id="输入样例-1："><a href="#输入样例-1：" class="headerlink" title="输入样例#1："></a>输入样例#1：</h4><p>2009</p>
<h4 id="输出样例-1："><a href="#输出样例-1：" class="headerlink" title="输出样例#1："></a>输出样例#1：</h4><p>3 3 2003</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>两层循环找到其中两个值，最后一个值由输入的num减去他们的和可得到，若都是质数则可以输出,筛法选素数可稍微优化判断素数的时间<br>代码如下：<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span> ;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">20005</span> ;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">bool</span> flag[MAXN] ;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">erat</span><span class="params">( <span class="keyword">int</span> num )</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>( flag , <span class="literal">true</span> , <span class="keyword">sizeof</span>(flag) ) ;</span><br><span class="line">    flag[<span class="number">0</span>] = flag[<span class="number">1</span>] = <span class="number">0</span> ;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">2</span> ; i &lt;= num ; i ++ )&#123;</span><br><span class="line">        <span class="keyword">if</span> ( flag[i] )&#123;</span><br><span class="line">            <span class="keyword">for</span> ( <span class="keyword">int</span> j = i * i ; j &lt;= num ; j += i )&#123;</span><br><span class="line">                flag[j] = <span class="number">0</span> ;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n ;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n ;</span><br><span class="line">    erat(n) ;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">2</span> ; i &lt; n ; i ++ )&#123;</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> j = <span class="number">2</span> ; j &lt; n ; j ++ )&#123;</span><br><span class="line">            <span class="keyword">int</span> num = n - i - j ;</span><br><span class="line">            <span class="keyword">if</span> ( flag[num] &amp;&amp; flag[i] &amp;&amp; flag[j] )&#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="string">" "</span> &lt;&lt; j &lt;&lt; <span class="string">" "</span> &lt;&lt; num ;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Online Judge</category>
      </categories>
      <tags>
        <tag>日常水题</tag>
        <tag>模板</tag>
        <tag>洛谷</tag>
      </tags>
  </entry>
  <entry>
    <title>51Nod 1384 全排列</title>
    <url>/2018/10/08/51Nod-1384-%E5%85%A8%E6%8E%92%E5%88%97/</url>
    <content><![CDATA[<h2 id="1384-全排列"><a href="#1384-全排列" class="headerlink" title="1384 全排列"></a>1384 全排列</h2><h3 id="基准时间限制：1-秒-空间限制：131072-KB-分值-0-难度：基础题-收藏-关注"><a href="#基准时间限制：1-秒-空间限制：131072-KB-分值-0-难度：基础题-收藏-关注" class="headerlink" title="基准时间限制：1 秒 空间限制：131072 KB 分值: 0 难度：基础题 收藏  关注"></a>基准时间限制：1 秒 空间限制：131072 KB 分值: 0 难度：基础题 收藏  关注</h3><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>给出一个字符串S（可能有重复的字符），按照字典序从小到大，输出S包括的字符组成的所有排列。例如：S = “1312”，输出为：<br>1123<br>1132<br>1213<br>1231<br>1312<br>1321<br>2113<br>2131<br>2311<br>3112<br>3121<br>3211  </p>
<h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><p>输入一个字符串S（S的长度 &lt;= 9，且只包括0 - 9的阿拉伯数字）</p>
<h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p>输出S所包含的字符组成的所有排列</p>
<h3 id="Input示例"><a href="#Input示例" class="headerlink" title="Input示例"></a>Input示例</h3><p>1312</p>
<h3 id="Output示例"><a href="#Output示例" class="headerlink" title="Output示例"></a>Output示例</h3><p>1123<br>1132<br>1213<br>1231<br>1312<br>1321<br>2113<br>2131<br>2311<br>3112<br>3121<br>3211  </p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>STL的应用。想到全排列就想到了STL中的 next_permutation() 函数。用字符串读取输入，用 sort() 对其进行排序，再用 next_permutation() 输出结果。代码如下：<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ull_ unsigned long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span> ;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> str ;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; str ;</span><br><span class="line">    sort(str.begin() , str.end()) ;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; str &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">    <span class="keyword">while</span>(next_permutation(str.begin() , str.end()))&#123;</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; str.size() ; i ++ )&#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; str[i] ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Online Judge</category>
      </categories>
      <tags>
        <tag>日常水题</tag>
        <tag>51Nod</tag>
        <tag>STL</tag>
        <tag>next_permutation()</tag>
      </tags>
  </entry>
  <entry>
    <title>51Nod 1080 两个数的平方和</title>
    <url>/2018/10/07/51Nod-1080-%E4%B8%A4%E4%B8%AA%E6%95%B0%E7%9A%84%E5%B9%B3%E6%96%B9%E5%92%8C/</url>
    <content><![CDATA[<h2 id="1080-两个数的平方和"><a href="#1080-两个数的平方和" class="headerlink" title="1080 两个数的平方和"></a>1080 两个数的平方和</h2><h3 id="基准时间限制：1-秒-空间限制：131072-KB-分值-5-难度：1级算法题-收藏-关注"><a href="#基准时间限制：1-秒-空间限制：131072-KB-分值-5-难度：1级算法题-收藏-关注" class="headerlink" title="基准时间限制：1 秒 空间限制：131072 KB 分值: 5 难度：1级算法题 收藏  关注"></a>基准时间限制：1 秒 空间限制：131072 KB 分值: 5 难度：1级算法题 收藏  关注</h3><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>给出一个整数N，将N表示为2个整数i与j的平方之和（i &lt;= j)，如果有多种表示，按照i的递增序输出。<br>例如：N = 130，130 = 3^2 + 11^2 = 7^2 + 9^2（注：3^2 + 11^2同11^2 + 3^2算1种）</p>
<h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><p>一个数N(1 &lt;= N &lt;= 10^9)</p>
<h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p>共K行：每行2个数，i j，表示N = i^2 + j^2（0 &lt;= i &lt;= j)。<br>如果无法分解为2个数的平方和，则输出No Solution</p>
<h3 id="Input示例"><a href="#Input示例" class="headerlink" title="Input示例"></a>Input示例</h3><p>130</p>
<h3 id="Output示例"><a href="#Output示例" class="headerlink" title="Output示例"></a>Output示例</h3><p>3 11<br>7 9  </p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>看到1e9的数据基本排除了暴力的可能。一个数如果能被两个数的平方和表示的话，那这两个数一定不会超过他的平方根。所以基本思路就是先给输入的这个数开方，减少数据量，枚举 0 到 sqrt(number) ，再对[0,sqrt(number)] 这个区间二分找是否存在这样的数使他的平方加上之前枚举的那个数的平方和等于number。需要注意的一点是根据在前面的个数小的顺序输出，并要去重。根据map容器的一一对应关系并且内部自动排序，可以使用map容器同时完成这两个工作。代码如下：<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ull_ unsigned long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span> ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n ;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">searh_Binary</span><span class="params">( <span class="keyword">int</span> begin_ , <span class="keyword">int</span> end_ , <span class="keyword">int</span> num )</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> l = begin_ , r = end_ ;</span><br><span class="line">    <span class="keyword">while</span> ( l &lt; r )&#123;</span><br><span class="line">        <span class="keyword">int</span> mid = ( l + r ) &gt;&gt; <span class="number">1</span> ;</span><br><span class="line">        <span class="keyword">int</span> index_one = mid * mid ;</span><br><span class="line">        <span class="keyword">int</span> index_two = num * num ;</span><br><span class="line">        <span class="keyword">if</span> ( index_one + index_two == n )&#123;</span><br><span class="line">            <span class="keyword">return</span> mid ;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> ( index_one + index_two &lt; n )&#123;</span><br><span class="line">            l = mid + <span class="number">1</span> ;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            r = mid ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n ;</span><br><span class="line">    <span class="keyword">int</span> num = (<span class="keyword">int</span>)<span class="built_in">sqrt</span>(n) ;</span><br><span class="line">    <span class="keyword">int</span> index ;</span><br><span class="line">    <span class="keyword">bool</span> check = <span class="literal">false</span> ;</span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="keyword">int</span> , <span class="keyword">int</span>&gt; map_ ;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt;= num ; i ++ )&#123;</span><br><span class="line">        index = searh_Binary( <span class="number">0</span> , num , i ) ;</span><br><span class="line">        <span class="keyword">if</span> ( index != <span class="number">-1</span> )&#123;</span><br><span class="line">            map_[min(i , index)] = max(i , index) ;</span><br><span class="line">            check = <span class="literal">true</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( !check )&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"No Solution"</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">map</span>&lt;<span class="keyword">int</span> , <span class="keyword">int</span>&gt;::iterator it ;</span><br><span class="line">        <span class="keyword">for</span> ( it = map_.begin() ; it != map_.end() ; it ++ )&#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; it-&gt;first &lt;&lt; <span class="string">" "</span> &lt;&lt; it-&gt;second &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Online Judge</category>
      </categories>
      <tags>
        <tag>日常水题</tag>
        <tag>51Nod</tag>
        <tag>map</tag>
        <tag>二分</tag>
      </tags>
  </entry>
  <entry>
    <title>51Nod 1083 矩阵取数问题</title>
    <url>/2018/10/06/51Nod-1083-%E7%9F%A9%E9%98%B5%E5%8F%96%E6%95%B0%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h2 id="1083-矩阵取数问题"><a href="#1083-矩阵取数问题" class="headerlink" title="1083 矩阵取数问题"></a>1083 矩阵取数问题</h2><h3 id="基准时间限制：1-秒-空间限制：131072-KB-分值-5-难度：1级算法题-收藏-关注"><a href="#基准时间限制：1-秒-空间限制：131072-KB-分值-5-难度：1级算法题-收藏-关注" class="headerlink" title="基准时间限制：1 秒 空间限制：131072 KB 分值: 5 难度：1级算法题 收藏  关注"></a>基准时间限制：1 秒 空间限制：131072 KB 分值: 5 难度：1级算法题 收藏  关注</h3><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>一个N/<em>N矩阵中有不同的正整数，经过这个格子，就能获得相应价值的奖励，从左上走到右下，只能向下向右走，求能够获得的最大价值。<br>例如：3 /</em> 3的方格。<br>1 3 3<br>2 1 3<br>2 2 1<br>能够获得的最大价值为：11。  </p>
<h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><p>第1行：N，N为矩阵的大小。(2 &lt;= N &lt;= 500)<br>第2 - N + 1行：每行N个数，中间用空格隔开，对应格子中奖励的价值。（1 &lt;= N[i] &lt;= 10000)  </p>
<h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p>输出能够获得的最大价值。  </p>
<h3 id="Input示例"><a href="#Input示例" class="headerlink" title="Input示例"></a>Input示例</h3><p>3<br>1 3 3<br>2 1 3<br>2 2 1  </p>
<h3 id="Output示例"><a href="#Output示例" class="headerlink" title="Output示例"></a>Output示例</h3><p>11</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>动态规划入门题，输入的 dp[][] 二维数组矩阵，用 dp[i][j] 表示从起点到第 x 行，第 y 列的最优路径上的数之和，而最优路径为 dp[i][j] 的值加上来自其上方或左方的值中的较大的一个值，累计到最后则为最大的值，所以状态转移方程为<br>dp[i][j] = dp[i][j] + max(dp[i-1][j] , dp[i][j-1])<br>代码如下：<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span> ;</span><br><span class="line"></span><br><span class="line">ll dp[<span class="number">505</span>][<span class="number">505</span>] ;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ll n ;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n ;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= n ; i ++ )&#123;</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> j = <span class="number">1</span> ; j &lt;= n ; j ++ )&#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; dp[i][j] ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= n ; i ++ )&#123;</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> j = <span class="number">1</span> ; j &lt;= n ; j ++ )&#123;</span><br><span class="line">            dp[i][j]= max(dp[i<span class="number">-1</span>][j] , dp[i][j<span class="number">-1</span>]) + dp[i][j] ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; dp[n][n] &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Online Judge</category>
      </categories>
      <tags>
        <tag>日常水题</tag>
        <tag>51Nod</tag>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title>HrbustOJ 2301 行编辑器</title>
    <url>/2018/10/05/HrbustOJ-2301-%E8%A1%8C%E7%BC%96%E8%BE%91%E5%99%A8/</url>
    <content><![CDATA[<h2 id="行编辑器"><a href="#行编辑器" class="headerlink" title="行编辑器"></a>行编辑器</h2><h3 id="Time-Limit-1000-MS-Memory-Limit-32768-K"><a href="#Time-Limit-1000-MS-Memory-Limit-32768-K" class="headerlink" title="Time Limit: 1000 MS    Memory Limit: 32768 K"></a>Time Limit: 1000 MS    Memory Limit: 32768 K</h3><h3 id="Total-Submit-312-173-users-Total-Accepted-206-161-users-Rating-Special-Judge-No"><a href="#Total-Submit-312-173-users-Total-Accepted-206-161-users-Rating-Special-Judge-No" class="headerlink" title="Total Submit: 312(173 users)    Total Accepted: 206(161 users)    Rating:     Special Judge: No"></a>Total Submit: 312(173 users)    Total Accepted: 206(161 users)    Rating:     Special Judge: No</h3><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>这次我们要写一个简单的行编辑器，当按下‘#’时代表按下了一次退格符，当按下‘@’时代表一个退行符（使当前行的字符全部无效）。例如，假设从终端接收了这样的两行字符：<br>Whil#lr#e(s#*s)<br>outcha@putchar(*s=#++)<br>则实际有效的是下列两行：<br>While(*s)<br>putchar(*s++)<br>请你编写一个程序，输出实际有效的字符串。  </p>
<h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><p>第一行是一个整数T，表示测试数据组数。<br>接下来每行为一个字符串（不含空格和任何空白），表示输入的原始字符串</p>
<h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p>输出最终的正确字符串。</p>
<h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h3><p>2<br>Whil#lr#e(s#*s)<br>outcha@putchar(*s=#++)  </p>
<h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h3><p>While(*s)<br>putchar(*s++)  </p>
<h3 id="Source"><a href="#Source" class="headerlink" title="Source"></a>Source</h3><p>2016级新生程序设计全国邀请赛</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>栈的简单应用，基本思路，将遇到的所有字符装到栈里(当然，除了‘@’和‘#’)，如果遇到‘@’字符则清空整个栈，遇到‘#’则将栈顶元素弹出。此次使用了STL的栈来模拟这个过程，最后用字符数组存取这整个栈的元素，倒序输出，如果用数组模拟栈再来进行这个过程还可以省掉之前那个数组，过程也更简单些。代码如下：<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span> ;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear_</span><span class="params">( <span class="built_in">stack</span>&lt;<span class="keyword">char</span>&gt; &amp;sta_ )</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>( !sta_.empty() )&#123;</span><br><span class="line">        sta_.pop() ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t ;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; t ;</span><br><span class="line">    getchar() ;</span><br><span class="line">    <span class="keyword">while</span> ( t -- )&#123;</span><br><span class="line">        <span class="built_in">stack</span>&lt;<span class="keyword">char</span>&gt; sta_ ;</span><br><span class="line">        <span class="keyword">char</span> ch = getchar() ;</span><br><span class="line">        <span class="keyword">while</span> ( ch != <span class="string">'\n'</span> )&#123;</span><br><span class="line">            <span class="keyword">if</span> ( ch == <span class="string">'#'</span> )&#123;</span><br><span class="line">                sta_.pop() ;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> ( ch == <span class="string">'@'</span> )&#123;</span><br><span class="line">                clear_(sta_) ;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                sta_.push(ch) ;</span><br><span class="line">            &#125;</span><br><span class="line">            ch = getchar() ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">char</span> str[<span class="number">5005</span>] ;</span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span> ;</span><br><span class="line">        <span class="keyword">while</span> ( !sta_.empty() )&#123;</span><br><span class="line">            str[index++] = sta_.top() ;</span><br><span class="line">            sta_.pop() ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> i = index - <span class="number">1</span> ; i &gt;= <span class="number">0</span> ; i -- )&#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; str[i] ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Online Judge</category>
      </categories>
      <tags>
        <tag>日常水题</tag>
        <tag>STL</tag>
        <tag>HrbustOJ</tag>
        <tag>stack</tag>
      </tags>
  </entry>
  <entry>
    <title>51Nod 2133 排队接水</title>
    <url>/2018/10/04/51Nod-2133-%E6%8E%92%E9%98%9F%E6%8E%A5%E6%B0%B4/</url>
    <content><![CDATA[<h2 id="排队接水"><a href="#排队接水" class="headerlink" title="排队接水"></a>排队接水</h2><h3 id="基准时间限制：1-秒-空间限制：131072-KB-分值-5-难度：1级算法题-收藏-关注"><a href="#基准时间限制：1-秒-空间限制：131072-KB-分值-5-难度：1级算法题-收藏-关注" class="headerlink" title="基准时间限制：1 秒 空间限制：131072 KB 分值: 5 难度：1级算法题 收藏  关注"></a>基准时间限制：1 秒 空间限制：131072 KB 分值: 5 难度：1级算法题 收藏  关注</h3><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>n个人一起排队接水，第i个人需要b[i]的时间来接水。<br>1 &lt;= n &lt;= 1000<br>0 &lt;= b[i] &lt;= 1000<br>同时只能有一个人接水，正在接水的人和没有接水的人都需要等待。<br>完成接水的人会立刻消失，不会继续等待。<br>你可以决定所有人接水的顺序，并希望最小化所有人等待时间的总和。  </p>
<h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><p>第一行一个整数n<br>接下来n行，每行一个整数表示b[i]  </p>
<h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p>一行一个整数，表示所有人等待时间的总和的最小值  </p>
<h3 id="Input示例"><a href="#Input示例" class="headerlink" title="Input示例"></a>Input示例</h3><p>3<br>1<br>2<br>3  </p>
<h3 id="Output示例"><a href="#Output示例" class="headerlink" title="Output示例"></a>Output示例</h3><p>10</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>贪心问题。要使所有人等待时间最小，则使接水时间最少的在最前面。每个人对所有人等待时间的贡献为这个人及在这个人之后的人的个数乘以这个人接水所需要的时间。由此可以得出代码：<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span> ;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n ;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n ;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec_ ;</span><br><span class="line">    <span class="keyword">int</span> tot = <span class="number">0</span> ;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; n ; i ++ )&#123;</span><br><span class="line">        <span class="keyword">int</span> x ;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; x ;</span><br><span class="line">        vec_.push_back(x) ;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(vec_.begin() , vec_.end()) ;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; n ; i ++ )&#123;</span><br><span class="line">        tot += (n - i) * vec_[i] ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; tot &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Online Judge</category>
      </categories>
      <tags>
        <tag>日常水题</tag>
        <tag>51Nod</tag>
        <tag>贪心</tag>
      </tags>
  </entry>
  <entry>
    <title>51Nod 1117 聪明的木匠</title>
    <url>/2018/10/03/51Nod-1117-%E8%81%AA%E6%98%8E%E7%9A%84%E6%9C%A8%E5%8C%A0/</url>
    <content><![CDATA[<h2 id="聪明的木匠"><a href="#聪明的木匠" class="headerlink" title="聪明的木匠"></a>聪明的木匠</h2><h3 id="题目来源：-河北大学算法艺术协会"><a href="#题目来源：-河北大学算法艺术协会" class="headerlink" title="题目来源： 河北大学算法艺术协会"></a>题目来源： 河北大学算法艺术协会</h3><h3 id="基准时间限制：1-秒-空间限制：131072-KB-分值-20-难度：3级算法题-收藏-关注"><a href="#基准时间限制：1-秒-空间限制：131072-KB-分值-20-难度：3级算法题-收藏-关注" class="headerlink" title="基准时间限制：1 秒 空间限制：131072 KB 分值: 20 难度：3级算法题 收藏  关注"></a>基准时间限制：1 秒 空间限制：131072 KB 分值: 20 难度：3级算法题 收藏  关注</h3><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>一位老木匠需要将一根长的木棒切成N段。每段的长度分别为L1,L2,……,LN（1 &lt;= L1,L2,…,LN &lt;= 1000，且均为整数）个长度单位。我们认为切割时仅在整数点处切且没有木材损失。<br>木匠发现，每一次切割花费的体力与该木棒的长度成正比，不妨设切割长度为1的木棒花费1单位体力。例如：若N=3，L1 = 3,L2 = 4,L3 = 5，则木棒原长为12，木匠可以有多种切法，如：先将12切成3+9.，花费12体力，再将9切成4+5，花费9体力，一共花费21体力；还可以先将12切成4+8，花费12体力，再将8切成3+5，花费8体力，一共花费20体力。显然，后者比前者更省体力。<br>那么，木匠至少要花费多少体力才能完成切割任务呢？  </p>
<h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><p>第1行：1个整数N(2 &lt;= N &lt;= 50000)<br>第2 - N + 1行：每行1个整数Li(1 &lt;= Li &lt;= 1000)。  </p>
<h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p>输出最小的体力消耗。  </p>
<h3 id="Input示例"><a href="#Input示例" class="headerlink" title="Input示例"></a>Input示例</h3><p>3<br>3<br>4<br>5  </p>
<h3 id="Output示例"><a href="#Output示例" class="headerlink" title="Output示例"></a>Output示例</h3><p>19</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>假设总长为12，则需要最少的体力为19，步骤如下，先将12切成7+5，耗费12体力，再将7切成3+4，耗费7体力，总耗费体力19。所以我们总是优先将最长的那一段先切下来，最终所耗费的体力为最小。倒推过去，最少所消耗的体力值总是最小的两个值相加，再将这个值放入容器中，再寻找最小的两个值相加，重复这个步骤直到容器的大小为1，正好符合 堆 的性质，所以我们可以用优先队列来解决这个问题。代码如下：<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span> ;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t ;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="built_in">cin</span> &gt;&gt; t )&#123;</span><br><span class="line">        priority_queue&lt;ll , <span class="built_in">vector</span>&lt;ll&gt; , greater&lt;ll&gt; &gt; p_que ;</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; t ; i ++ )&#123;</span><br><span class="line">            ll x ;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; x ;</span><br><span class="line">            p_que.push(x) ;</span><br><span class="line">        &#125;</span><br><span class="line">        ll ans = <span class="number">0</span> ;</span><br><span class="line">        <span class="keyword">while</span> ( p_que.size() != <span class="number">1</span> )&#123;</span><br><span class="line">            ll num = p_que.top() ;</span><br><span class="line">            p_que.pop() ;</span><br><span class="line">            num += p_que.top() ;</span><br><span class="line">            p_que.pop() ;</span><br><span class="line">            ans += num ;</span><br><span class="line">            p_que.push(num) ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Online Judge</category>
      </categories>
      <tags>
        <tag>日常水题</tag>
        <tag>51Nod</tag>
        <tag>STL</tag>
        <tag>贪心</tag>
        <tag>priority_queue</tag>
      </tags>
  </entry>
  <entry>
    <title>HrbustOJ 1109 店长终极推荐</title>
    <url>/2018/10/02/HrbustOJ-1109-%E5%BA%97%E9%95%BF%E7%BB%88%E6%9E%81%E6%8E%A8%E8%8D%90/</url>
    <content><![CDATA[<h2 id="店长终极推荐"><a href="#店长终极推荐" class="headerlink" title="店长终极推荐"></a>店长终极推荐</h2><h3 id="Time-Limit-2000-MS-Memory-Limit-65536-K"><a href="#Time-Limit-2000-MS-Memory-Limit-65536-K" class="headerlink" title="Time Limit: 2000 MS    Memory Limit: 65536 K"></a>Time Limit: 2000 MS    Memory Limit: 65536 K</h3><h3 id="Total-Submit-743-214-users-Total-Accepted-261-195-users-Rating-Special-Judge-No"><a href="#Total-Submit-743-214-users-Total-Accepted-261-195-users-Rating-Special-Judge-No" class="headerlink" title="Total Submit: 743(214 users)    Total Accepted: 261(195 users)    Rating:     Special Judge: No"></a>Total Submit: 743(214 users)    Total Accepted: 261(195 users)    Rating:     Special Judge: No</h3><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>玩腻了两个工具之后，店长决定要好好学习.玩工具伤身体啊!!店长决定教大家学习阅读，店长总能总学习中找到乐趣，无聊的他找了一篇文章，由各种字符组成,他想统计下这篇阅读中,出现最多次数的相邻两个字符组合是什么？</p>
<h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><p>第一行输入一个整数T表示测试数据组数</p>
<p>接下来输入一行，包括一篇文章,文章由最多不超过200个字符(由任意ascii字符组成)</p>
<p>当T=0时结束</p>
<h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p>统计文章中出现频度最高的两个连续字符，并且输入然后换行.</p>
<p>如果最高的有多组，按照字典顺序排序后输出第一个.</p>
<p>每T组测试数据后，需要输出一个换行</p>
<h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h3><p>1<br>%#@!%#<br>2<br>This is a test!<br>Dianzhang JiaoZhu and Jiashou  </p>
<h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h3><p>%#  </p>
<p>is<br>an  </p>
<h3 id="Hint"><a href="#Hint" class="headerlink" title="Hint"></a>Hint</h3><p>店长自此开始学习复习考研了,一个神秘人物出现了,传说中的叫兽??敬请期待</p>
<h3 id="Author"><a href="#Author" class="headerlink" title="Author"></a>Author</h3><p>void</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>此题可以用map容器来解决，map容器本身会给键排序，所以正好可以用map来简化做题过程。键为存取的两个字符所组成的字符串，值为出现的次数，使用一个变量记录最大值，之后扫描这个最大值并获得所对应的键并输出就能得到结果。代码如下：<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span> ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">1e6</span> ;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t ;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="built_in">cin</span> &gt;&gt; t &amp;&amp; t )&#123;</span><br><span class="line">        getchar() ;</span><br><span class="line">        <span class="built_in">map</span>&lt;<span class="built_in">string</span> , <span class="keyword">int</span>&gt; map_ ;</span><br><span class="line">        <span class="built_in">map</span>&lt;<span class="built_in">string</span> , <span class="keyword">int</span>&gt;::iterator it ;</span><br><span class="line">        <span class="keyword">while</span> ( t -- )&#123;</span><br><span class="line">            map_.clear() ;</span><br><span class="line">            <span class="built_in">string</span> str ;</span><br><span class="line">            getline(<span class="built_in">cin</span> , str) ;</span><br><span class="line">            <span class="keyword">int</span> maxx = <span class="number">-1</span> ;</span><br><span class="line">            <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; str.size() - <span class="number">1</span> ; i ++ )&#123;</span><br><span class="line">                <span class="built_in">string</span> index = str.substr(i , <span class="number">2</span>) ;  <span class="comment">//截取str从i开始n个字符的子串</span></span><br><span class="line">                map_[index] ++ ;</span><br><span class="line">                maxx = max(map_[index] , maxx) ;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> ( it = map_.begin() ; it != map_.end() ; it ++ )&#123;</span><br><span class="line">                <span class="keyword">if</span> ( it-&gt;second == maxx )&#123;</span><br><span class="line">                    <span class="built_in">cout</span> &lt;&lt; it-&gt;first &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">                    <span class="keyword">break</span> ;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Online Judge</category>
      </categories>
      <tags>
        <tag>map</tag>
        <tag>STL</tag>
        <tag>HrbustOJ</tag>
      </tags>
  </entry>
  <entry>
    <title>HrbustOJ 2063 萌萌哒十五酱的情书~</title>
    <url>/2018/10/01/HrbustOJ-2063-%E8%90%8C%E8%90%8C%E5%93%92%E5%8D%81%E4%BA%94%E9%85%B1%E7%9A%84%E6%83%85%E4%B9%A6/</url>
    <content><![CDATA[<h2 id="萌萌哒十五酱的情书"><a href="#萌萌哒十五酱的情书" class="headerlink" title="萌萌哒十五酱的情书~"></a>萌萌哒十五酱的情书~</h2><h3 id="Time-Limit-150-MS-Memory-Limit-1515-K"><a href="#Time-Limit-150-MS-Memory-Limit-1515-K" class="headerlink" title="Time Limit: 150 MS    Memory Limit: 1515 K"></a>Time Limit: 150 MS    Memory Limit: 1515 K</h3><h3 id="Total-Submit-86-32-users-Total-Accepted-21-18-users-Rating-Special-Judge-No"><a href="#Total-Submit-86-32-users-Total-Accepted-21-18-users-Rating-Special-Judge-No" class="headerlink" title="Total Submit: 86(32 users)    Total Accepted: 21(18 users)    Rating:     Special Judge: No"></a>Total Submit: 86(32 users)    Total Accepted: 21(18 users)    Rating:     Special Judge: No</h3><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>因为十五酱实在是太萌了所以她经常会收到爱慕者的情书！！！！！！！！！！~</p>
<p>当然因为情书太多了所以她没有时间都读完</p>
<p>于是她把给她的情书从左到右划分成n个区域，在每个区域的边界依次表上0~n，然后她将经行m次操作，每次她都会选择一个数字ai，把纸带沿这个数字当前所在的位置翻折（假如已经在边界上了那就相当于什么都不做啦~）。</p>
<p>十五想知道经过m次对折之后她还需要读多长的情书。</p>
<h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><p>多组数据</p>
<p>第一行为两个正整数n（1&lt;=n&lt;=10^18），m（m&lt;=3000），表示纸带的长度和操作的次数。</p>
<p>接下来的一行为m个整数ai（1&lt;=ai&lt;=n），其中ai表示第i次选择的数字。</p>
<h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p>多组数据输出</p>
<p>输出文件中每组数据输出一行为一个整数，即纸带最后的长度。</p>
<h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h3><p>5<br>0 2<br>0 4<br>1 3<br>1 2<br>1 5</p>
<h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h3><p>3</p>
<h3 id="Hint"><a href="#Hint" class="headerlink" title="Hint"></a>Hint</h3><p>十五酱最萌了昂~</p>
<h3 id="Source"><a href="#Source" class="headerlink" title="Source"></a>Source</h3><p>HCPC2014校赛训练赛 6</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>由样例，0的时候是衬衫，找属性值最接近的裤子，比如 0 2 找到 1 3，属性差值的绝对值是1，而 0 4 也找到 1 3 ，属性差值的绝对值也是1，此时应该选取属性值较小的衣服，是 0 2 这一组，并扔进衣柜(清除)，所以可以用 multiset 多重映射容器做这个题，里面有 lower_bound() 二分查找算法返回不小于某个值的一个指针，正好可以用来解决这个题。<br>代码如下。<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span> ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">1e6</span> ;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t ;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="built_in">cin</span> &gt;&gt; t )&#123;</span><br><span class="line">        <span class="keyword">int</span> close_kind , close_val ;</span><br><span class="line">        <span class="keyword">int</span> index ;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span> ;</span><br><span class="line">        <span class="built_in">multiset</span>&lt;<span class="keyword">int</span>&gt; mul ;</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; t ; i ++ )&#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; close_kind &gt;&gt; close_val ;</span><br><span class="line">            <span class="keyword">if</span> ( mul.empty() )&#123;</span><br><span class="line">                index = close_kind ;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> ( mul.empty() || index == close_kind )&#123;</span><br><span class="line">                mul.insert(close_val) ;</span><br><span class="line">                <span class="keyword">continue</span> ;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">multiset</span>&lt;<span class="keyword">int</span>&gt;::iterator it_left , it_right = mul.begin() ;</span><br><span class="line">            it_right = mul.lower_bound(close_val) ;</span><br><span class="line">            <span class="keyword">if</span> ( it_right == mul.end() )&#123;</span><br><span class="line">                it_right -- ;</span><br><span class="line">                ans += (close_val - *it_right) % MOD ;</span><br><span class="line">                mul.erase(it_right) ;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> ( it_right == mul.begin() )&#123;</span><br><span class="line">                ans += (*it_right - close_val) % MOD ;</span><br><span class="line">                mul.erase(it_right) ;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                it_left = it_right ;</span><br><span class="line">                it_left -- ;</span><br><span class="line">                <span class="keyword">if</span> ( close_val - *it_left &lt;= *it_right - close_val )&#123;</span><br><span class="line">                    ans += (close_val - *it_left) % MOD ;</span><br><span class="line">                    mul.erase(it_left) ;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    ans += (*it_right - close_val) % MOD ;</span><br><span class="line">                    mul.erase(it_right) ;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            ans %= MOD ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Online Judge</category>
      </categories>
      <tags>
        <tag>STL</tag>
        <tag>HrbustOJ</tag>
        <tag>multiset</tag>
      </tags>
  </entry>
  <entry>
    <title>HrbustOJ 1023 JiaoZhu and CS</title>
    <url>/2018/09/30/HrbustOJ-1023-JiaoZhu-and-CS/</url>
    <content><![CDATA[<h2 id="JiaoZhu-and-CS"><a href="#JiaoZhu-and-CS" class="headerlink" title="JiaoZhu and CS"></a>JiaoZhu and CS</h2><h3 id="Time-Limit-2000-MS-Memory-Limit-65536-K"><a href="#Time-Limit-2000-MS-Memory-Limit-65536-K" class="headerlink" title="Time Limit: 2000 MS    Memory Limit: 65536 K"></a>Time Limit: 2000 MS    Memory Limit: 65536 K</h3><h3 id="Total-Submit-1704-659-users-Total-Accepted-804-607-users-Rating-Special-Judge-No"><a href="#Total-Submit-1704-659-users-Total-Accepted-804-607-users-Rating-Special-Judge-No" class="headerlink" title="Total Submit: 1704(659 users)    Total Accepted: 804(607 users)    Rating:     Special Judge: No"></a>Total Submit: 1704(659 users)    Total Accepted: 804(607 users)    Rating:     Special Judge: No</h3><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>自从电子竞技在中国被认定为第99个正式体育项目，教主就投身其中，CS（Counter Strike 反恐精英）是他拿手的一款游戏，有很多职业选手为之付出。<br>反恐精英中有各种不同的枪械，我们为了简化问题，规定每种枪有自己的名字、杀伤力、价格。<br>下面要求你按照如下规定给已知的枪支排序：<br>要求按照枪支的攻击力排序（由大到小），如果某些枪的攻击力相同则对这些枪按照价格排序（由小到大），如果某些枪的价格相同则对这些枪按照名字的字典序排列。（本题中若字符串a，b满足 strcmp(a, b) &lt; 0 即满足字典序）  </p>
<h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><p>本题只有一组测试数据<br>第一行：N (1 &lt;= N &lt;= 100000) 表示有N种枪<br>第1..1 + N行：首先是枪支的名字(只包括大写字母、数字，最长占10个字符），接着是两个数字A (0 &lt;= A &lt;= 1000) B (0 &lt;= B &lt;= 1000) A代表杀伤力，B代表价格  </p>
<h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p>排序后，每行输出一种枪的名字  </p>
<h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h3><p>7<br>AK47 500 200<br>AWP 1000 500<br>USP 50 20<br>M4A1 500 300<br>MP5 200 100<br>MP3 200 100<br>MP4 200 100    </p>
<h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h3><p>AWP<br>AK47<br>M4A1<br>MP3<br>MP4<br>MP5<br>USP  </p>
<h3 id="Hint"><a href="#Hint" class="headerlink" title="Hint"></a>Hint</h3><p>输入量巨大，建议使用scanf()与printf()，使用cin与cout可能会超时</p>
<h3 id="Author"><a href="#Author" class="headerlink" title="Author"></a>Author</h3><p>Chadalt</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>结构体排序，注意题给要求就好了。代码如下:<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span> ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span> gun_name[<span class="number">15</span>] ;</span><br><span class="line">    <span class="keyword">int</span> attack ;</span><br><span class="line">    <span class="keyword">int</span> price ;</span><br><span class="line">&#125;meassage ;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">( meassage a , meassage b )</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ( a.attack == b.attack )&#123;</span><br><span class="line">        <span class="keyword">if</span> ( a.price == b.price )&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">strcmp</span>(a.gun_name , b.gun_name) &lt; <span class="number">0</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> a.price &lt; b.price ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a.attack &gt; b.attack ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n ;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="built_in">scanf</span>(<span class="string">"%d"</span> , &amp;n) != EOF )&#123;</span><br><span class="line">        meassage mea[n+<span class="number">10</span>] ;</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; n ; i ++ )&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%s %d %d"</span> , mea[i].gun_name , &amp;mea[i].attack , &amp;mea[i].price) ;</span><br><span class="line">        &#125;</span><br><span class="line">        sort(mea , mea + n , cmp) ;</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; n ; i ++ )&#123;</span><br><span class="line">            <span class="built_in">puts</span>(mea[i].gun_name) ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Online Judge</category>
      </categories>
      <tags>
        <tag>日常水题</tag>
        <tag>结构体排序</tag>
        <tag>HrbustOJ</tag>
      </tags>
  </entry>
  <entry>
    <title>HrbustOJ 1987 逃课的孩子</title>
    <url>/2018/09/29/HrbustOJ-1987-%E9%80%83%E8%AF%BE%E7%9A%84%E5%AD%A9%E5%AD%90/</url>
    <content><![CDATA[<h2 id="逃课的孩子"><a href="#逃课的孩子" class="headerlink" title="逃课的孩子"></a>逃课的孩子</h2><h3 id="Time-Limit-1000-MS-Memory-Limit-32768-K"><a href="#Time-Limit-1000-MS-Memory-Limit-32768-K" class="headerlink" title="Time Limit: 1000 MS    Memory Limit: 32768 K"></a>Time Limit: 1000 MS    Memory Limit: 32768 K</h3><h3 id="Total-Submit-740-135-users-Total-Accepted-156-97-users-Rating-Special-Judge-No"><a href="#Total-Submit-740-135-users-Total-Accepted-156-97-users-Rating-Special-Judge-No" class="headerlink" title="Total Submit: 740(135 users)    Total Accepted: 156(97 users)    Rating:     Special Judge: No"></a>Total Submit: 740(135 users)    Total Accepted: 156(97 users)    Rating:     Special Judge: No</h3><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>今天fribbi的室友们又逃课了，秉着不能互相卖队友的原则，他们选择玩游戏。他们让fribbi替他们去点名，可是fribbi的室友们只告诉了fribbi他需要去新主楼点名，没说哪个教室。不过还好fribbi有个扫描仪，当他进入到教室，可是很快扫描一下老师的点名册里有没有他室友们的名字。</p>
<p>要知道今天是周五上午，要上选修课，这意味这fribbi要跑好几个教室，去替不同的室友答到，而现在他需要做的是去检查所有教室的点名册里有没有他们室友们的名字，有谁的没有谁的。</p>
<p>现在他进入到了D406，扫描仪很快检查出有没有这些室友们的名字。</p>
<h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><p>有多组测试数据，对于每组输入数据，第一行输入两个正整数n和m，n代表点名册里的人数，m代表fribbi的室友个数。</p>
<p>接下来n行每行是一个字符串，代表点名册里的名字；再接下来m行每行是一个字符串，代表fribbi的室友的名字。</p>
<p>其中1≤n≤10000,1≤m≤10000 (fribbi的室友真的很多)，字符串的长度均不超过10。</p>
<h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h3><p>对于每组测试数据，输出占m行。分别表示这m个室友的名字是否出现过，出现过输出yes，否则输出no。</p>
<h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h3><p>4 3<br>dream<br>mac<br>AmberG<br>wind<br>ShineCheng<br>AmberG<br>sunshine<br>Hint<br>no<br>yes<br>no</p>
<h3 id="Source"><a href="#Source" class="headerlink" title="Source"></a>Source</h3><p>2013级新生组队赛(11月)正式赛</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>由map容器建立键值之间的对应关系，根据值去寻找键即可。<br>代码如下：<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span> ;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n , m ;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m )&#123;</span><br><span class="line">        <span class="built_in">map</span>&lt;<span class="built_in">string</span> , <span class="keyword">bool</span>&gt; map_ ;</span><br><span class="line">        <span class="keyword">char</span> str[<span class="number">15</span>] ;</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; n ; i ++ )&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%s"</span> , str) ;</span><br><span class="line">            map_[str] = <span class="literal">true</span> ;</span><br><span class="line"><span class="comment">//            cin &gt;&gt; str ;</span></span><br><span class="line"><span class="comment">//            map_.insert(make_pair(str , true)) ;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; m ; i ++ )&#123;</span><br><span class="line"><span class="comment">//            cin &gt;&gt; str ;</span></span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%s"</span> , str) ;</span><br><span class="line">            <span class="keyword">if</span> ( map_[str] == <span class="literal">true</span> )&#123;</span><br><span class="line"><span class="comment">//                cout &lt;&lt; "yes" &lt;&lt; endl ;</span></span><br><span class="line">                <span class="built_in">puts</span>(<span class="string">"yes"</span>) ;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//                cout &lt;&lt; "no" &lt;&lt; endl ;</span></span><br><span class="line">                <span class="built_in">puts</span>(<span class="string">"no"</span>) ;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Online Judge</category>
      </categories>
      <tags>
        <tag>map</tag>
        <tag>STL</tag>
        <tag>HrbustOJ</tag>
      </tags>
  </entry>
  <entry>
    <title>HrbustOJ 1022 JiaoZhu and SC</title>
    <url>/2018/09/28/HrbustOJ-1022-JiaoZhu-and-SC/</url>
    <content><![CDATA[<h2 id="JiaoZhu-and-SC"><a href="#JiaoZhu-and-SC" class="headerlink" title="JiaoZhu and SC"></a>JiaoZhu and SC</h2><h3 id="Time-Limit-1000-MS-Memory-Limit-65536-K"><a href="#Time-Limit-1000-MS-Memory-Limit-65536-K" class="headerlink" title="Time Limit: 1000 MS    Memory Limit: 65536 K"></a>Time Limit: 1000 MS    Memory Limit: 65536 K</h3><h3 id="Total-Submit-1135-395-users-Total-Accepted-466-360-users-Rating-Special-Judge-No"><a href="#Total-Submit-1135-395-users-Total-Accepted-466-360-users-Rating-Special-Judge-No" class="headerlink" title="Total Submit: 1135(395 users)    Total Accepted: 466(360 users)    Rating:     Special Judge: No"></a>Total Submit: 1135(395 users)    Total Accepted: 466(360 users)    Rating:     Special Judge: No</h3><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>自从电子竞技在中国被认定为第99个正式体育项目，教主就投身其中，SC（StarCraft 星际争霸）他拿手的一款游戏，当然也有很多职业选手参与其中。<br>星际争霸中有3个种族：T(人族），P（神族），Z（虫族）而且每个玩家必须选择且只能选择一个种族来使用。<br>在职业电子竞技联赛中，每位职业选手都会固定使用某一个自己喜爱的种族。<br>在经过大量的比赛后，发现有如下的规律：<br>1.使用人族的选手总是能战胜虫族选手<br>2.使用虫族的选手总是能战胜神族选手<br>3.使用神族的选手总是能战胜人族选手<br>4.使用相同种族的选手对战总是产生平局<br>现在将告诉你每个选手的种族，并进行若干场比赛，要求你输出每场比赛的结果。</p>
<h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><p>本题只有一组测试数据<br>第一行：N M (1 &lt;= N, M&lt;= 10000)，N代表选手的数目，M代表比赛的场数。<br>接下来N行，每行首先给出选手名字（玩家的名字只由大写、小写字母、数字组成，其中没有空格，最长的名字占10个字符）接着是他的种族（用T、P、Z表示）<br>接下来M行，每行代表一场比赛，首先给出选手A的名字，接着给出选手B的名字。</p>
<h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p>对于每场比赛：<br>选手A胜利 输出”XiaoM Wins!”<br>选手B胜利 输出”TianT Wins!”<br>平局 输出”End in a draw!”  </p>
<h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h3><p>4 4<br>JiaoZhu T<br>Jaedong Z<br>Chadalt T<br>LMJ Z<br>JiaoZhu Chadalt<br>Jaedong LMJ<br>JiaoZhu LMJ<br>LMJ Chadalt<br>Sample Output<br>End in a draw!<br>End in a draw!<br>XiaoM Wins!<br>TianT Wins!  </p>
<h3 id="Hint"><a href="#Hint" class="headerlink" title="Hint"></a>Hint</h3><p>输入量巨大，建议使用scanf()与printf()，使用cin与cout可能会超时</p>
<h3 id="Author"><a href="#Author" class="headerlink" title="Author"></a>Author</h3><p>Chadalt</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>使用STL中的map建立对应关系，由对应关系去寻找是否可以战胜。<br>代码如下：<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span> ;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n , m ;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m )&#123;</span><br><span class="line">        <span class="built_in">map</span>&lt;<span class="built_in">string</span> , <span class="keyword">char</span>&gt; map_ ;</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; n ; i ++ )&#123;</span><br><span class="line">            <span class="built_in">string</span> str1 ;</span><br><span class="line">            <span class="keyword">char</span> str2 ;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; str1 &gt;&gt; str2 ;</span><br><span class="line">            map_.insert(make_pair(str1 , str2)) ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; m ; i ++ )&#123;</span><br><span class="line">            <span class="built_in">string</span> str1 , str2 ;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; str1 &gt;&gt; str2 ;</span><br><span class="line">            <span class="built_in">map</span>&lt;<span class="built_in">string</span> , <span class="keyword">char</span>&gt;::iterator it1 = map_.find(str1) ;</span><br><span class="line">            <span class="built_in">map</span>&lt;<span class="built_in">string</span> , <span class="keyword">char</span>&gt;::iterator it2 = map_.find(str2) ;</span><br><span class="line">            <span class="keyword">if</span> ( it1-&gt;second == it2-&gt;second )&#123;</span><br><span class="line"><span class="comment">//                cout &lt;&lt; "End in a draw!" &lt;&lt; endl ;</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"End in a draw!\n"</span>) ;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> ( (it1-&gt;second == <span class="string">'T'</span> &amp;&amp; it2-&gt;second == <span class="string">'Z'</span>)</span><br><span class="line">                    || (it1-&gt;second == <span class="string">'Z'</span> &amp;&amp; it2-&gt;second == <span class="string">'P'</span>)</span><br><span class="line">                    || (it1-&gt;second == <span class="string">'P'</span> &amp;&amp; it2-&gt;second == <span class="string">'T'</span>))&#123;</span><br><span class="line"><span class="comment">//                cout &lt;&lt; "XiaoM Wins!" &lt;&lt; endl ;</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"XiaoM Wins!\n"</span>) ;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//                cout &lt;&lt; "TianT Wins!" &lt;&lt; endl ;</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"TianT Wins!\n"</span>) ;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//T&gt;Z&gt;P&gt;T</span></span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Online Judge</category>
      </categories>
      <tags>
        <tag>map</tag>
        <tag>STL</tag>
        <tag>HrbustOJ</tag>
      </tags>
  </entry>
  <entry>
    <title>NyistOJ 55 懒省事的小明</title>
    <url>/2018/09/27/NyistOJ-55-%E6%87%92%E7%9C%81%E4%BA%8B%E7%9A%84%E5%B0%8F%E6%98%8E/</url>
    <content><![CDATA[<h2 id="懒省事的小明"><a href="#懒省事的小明" class="headerlink" title="懒省事的小明"></a>懒省事的小明</h2><h3 id="时间限制：3000-ms-内存限制：65535-KB"><a href="#时间限制：3000-ms-内存限制：65535-KB" class="headerlink" title="时间限制：3000 ms  |  内存限制：65535 KB"></a>时间限制：3000 ms  |  内存限制：65535 KB</h3><h3 id="难度：3"><a href="#难度：3" class="headerlink" title="难度：3"></a>难度：3</h3><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>小明很想吃果子，正好果园果子熟了。在果园里，小明已经将所有的果子打了下来，而且按果子的不同种类分成了不同的堆。小明决定把所有的果子合成一堆。 因为小明比较懒，为了省力气，小明开始想点子了:</p>
<p>每一次合并，小明可以把两堆果子合并到一起，消耗的体力等于两堆果子的重量之和。可以看出，所有的果子经过n-1次合并之后，就只剩下一堆了。小明在合并果子时总共消耗的体力等于每次合并所耗体力之和。</p>
<p>因为还要花大力气把这些果子搬回家，所以小明在合并果子时要尽可能地节省体力。假定每个果子重量都为1，并且已知果子的种类数和每种果子的数目，你的任务是设计出合并的次序方案，使小明耗费的体力最少，并输出这个最小的体力耗费值。</p>
<p>例如有3种果子，数目依次为1，2，9。可以先将1、2堆合并，新堆数目为3，耗费体力为3。接着，将新堆与原先的第三堆合并，又得到新的堆，数目为12，耗费体力为12。所以小明总共耗费体力=3+12=15。可以证明15为最小的体力耗费值。</p>
<h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><p>第一行输入整数N(0&lt;N&lt;=10)表示测试数据组数。接下来每组测试数据输入包括两行，第一行是一个整数n(1&lt;＝n&lt;=12000)，表示果子的种类数。第二行包含n个整数，用空格分隔，第i个整数ai(1&lt;＝ai&lt;=20000)是第i种果子的数目。</p>
<h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><p>每组测试数据输出包括一行，这一行只包含一个整数，也就是最小的体力耗费值。  </p>
<h3 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h3><p>1<br>3<br>1 2 9  </p>
<h3 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h3><p>15</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>贪心+优先队列。最少所消耗的体力值总是最小的两个值相加，再将这个值放入容器中，再寻找最小的两个值相加，重复这个步骤直到容器的大小为1，正好符合 堆 的性质，所以我们可以用优先队列来解决这个问题。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span> ;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t ;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; t ;</span><br><span class="line">    <span class="keyword">while</span> ( t -- )&#123;</span><br><span class="line">        <span class="keyword">int</span> n ;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n ;</span><br><span class="line">        ll ans = <span class="number">0</span> ;</span><br><span class="line">        priority_queue&lt;ll , <span class="built_in">vector</span>&lt;ll&gt; , greater&lt;ll&gt; &gt; p_que ;</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; n ; i ++ )&#123;</span><br><span class="line">            <span class="keyword">int</span> x ;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; x ;</span><br><span class="line">            p_que.push(x) ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">0</span> ;</span><br><span class="line">        <span class="keyword">while</span>( p_que.size() != <span class="number">1</span> )&#123;</span><br><span class="line">            num = p_que.top() ;</span><br><span class="line">            p_que.pop() ;</span><br><span class="line">            num += p_que.top() ;</span><br><span class="line">            p_que.pop() ;</span><br><span class="line">            ans += num ;</span><br><span class="line">            p_que.push(num) ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Online Judge</category>
      </categories>
      <tags>
        <tag>日常水题</tag>
        <tag>STL</tag>
        <tag>贪心</tag>
        <tag>priority_queue</tag>
        <tag>NyistOJ</tag>
      </tags>
  </entry>
  <entry>
    <title>题单</title>
    <url>/2018/09/27/%E9%A2%98%E5%8D%95/</url>
    <content><![CDATA[<p><strong>记录目前做过的有意思的题及其分类</strong><br><strong>OJ/ 题号(备注)</strong></p>
<h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><ol>
<li>洛谷 P1259</li>
<li>洛谷 P2404</li>
<li>洛谷 P1464(记忆化搜索)</li>
</ol>
<h2 id="递推"><a href="#递推" class="headerlink" title="递推"></a>递推</h2><ol>
<li>51nod 1062(水题)</li>
</ol>
<h2 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h2><ol>
<li>hihocoder 1408</li>
</ol>
<h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><ol>
<li>hrbust 1023(结构体排序) </li>
<li>hrbust 1095(结构体排序)</li>
<li>nyistoj 8(结构体排序)</li>
<li>洛谷 P1068(结构体排序)</li>
<li>洛谷 P1583(结构体排序)</li>
<li>洛谷 P1093(结构体排序)  </li>
<li>洛谷 P1177(快速排序)</li>
<li>hdu 1425(桶排序)</li>
<li>hdu 3789(结构体排序)</li>
<li>poj 2299(快速排序)</li>
<li>hrbust 1644(字典序排序)</li>
</ol>
<h2 id="STL"><a href="#STL" class="headerlink" title="STL"></a>STL</h2><ol>
<li>nyistoj 55(priority_queue，优先队列)</li>
<li>51nod 1117(priority_queue)</li>
<li>hrbustoj 1022(map)</li>
<li>hrbustoj 1987(map)</li>
<li>hrbustoj 1109(map)</li>
<li>hrbustoj 2063(multiset)</li>
<li>hrbustoj 2310(stack)</li>
<li>hdu 1276(vector)</li>
<li>51nod 1384(next_permutation())</li>
<li>洛谷 P1097(map)</li>
</ol>
<h2 id="模拟"><a href="#模拟" class="headerlink" title="模拟"></a>模拟</h2><ol>
<li>洛谷 P3880</li>
<li>洛谷 P1051</li>
<li>洛谷 P1067</li>
<li>hdu 1035</li>
<li>hihocoder 1409</li>
<li>hdu 1032</li>
<li>hdu 6297</li>
<li>hdu 6292</li>
</ol>
<h2 id="贪心"><a href="#贪心" class="headerlink" title="贪心"></a>贪心</h2><ol>
<li>nyistoj 55</li>
<li>51nod 1117</li>
<li>51nod 2133</li>
<li>hihocoder 1448</li>
<li>hrbust 1167</li>
</ol>
<h2 id="数论"><a href="#数论" class="headerlink" title="数论"></a>数论</h2><ol>
<li>洛谷 P1044(卡特兰数)</li>
<li>洛谷 P2626(分解质因数)</li>
<li>洛谷 P1579(筛法选素数)</li>
</ol>
<h2 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h2><ol>
<li>51nod 1083(动规入门)</li>
<li>51nod 1059(动规入门)</li>
<li>51nod 1174(RMQ)</li>
</ol>
<h2 id="二分"><a href="#二分" class="headerlink" title="二分"></a>二分</h2><ol>
<li>51nod 1080</li>
</ol>
<h2 id="快速幂"><a href="#快速幂" class="headerlink" title="快速幂"></a>快速幂</h2><ol>
<li>51nod 1113(矩阵快速幂基础)</li>
<li>codeforces Round #450(Div2) B</li>
</ol>
<h2 id="几何"><a href="#几何" class="headerlink" title="几何"></a>几何</h2><ol>
<li>Codeforces 1030B(叉积)</li>
<li>51nod 1264(叉积)</li>
</ol>
<h2 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h2><ol>
<li>poj 1562(dfs)</li>
</ol>
<h2 id="最短路"><a href="#最短路" class="headerlink" title="最短路"></a>最短路</h2><ol>
<li>poj 2387(dijkstra)</li>
</ol>
<h2 id="水塘"><a href="#水塘" class="headerlink" title="水塘"></a>水塘</h2><ol>
<li>51nod 1137</li>
</ol>
<h2 id="Codeforces系列"><a href="#Codeforces系列" class="headerlink" title="Codeforces系列"></a>Codeforces系列</h2><ol>
<li>Codeforces Round #512(Div2) A/B</li>
<li>Codeforces Round #517(Div2) A</li>
</ol>
]]></content>
      <categories>
        <category>Daily Record</category>
      </categories>
      <tags>
        <tag>Life</tag>
      </tags>
  </entry>
  <entry>
    <title>POJ 2503 Babelfish</title>
    <url>/2018/09/26/POJ-2503-Babelfish/</url>
    <content><![CDATA[<h2 id="Babelfish"><a href="#Babelfish" class="headerlink" title="Babelfish"></a>Babelfish</h2><h3 id="Time-Limit-3000MS-Memory-Limit-65536K"><a href="#Time-Limit-3000MS-Memory-Limit-65536K" class="headerlink" title="Time Limit: 3000MS Memory Limit: 65536K"></a>Time Limit: 3000MS Memory Limit: 65536K</h3><h3 id="Total-Submissions-48043-Accepted-20144"><a href="#Total-Submissions-48043-Accepted-20144" class="headerlink" title="Total Submissions: 48043  Accepted: 20144"></a>Total Submissions: 48043  Accepted: 20144</h3><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You have just moved from Waterloo to a big city. The people here speak an incomprehensible dialect of a foreign language. Fortunately, you have a dictionary to help you understand them.</p>
<h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><p>Input consists of up to 100,000 dictionary entries, followed by a blank line, followed by a message of up to 100,000 words. Each dictionary entry is a line containing an English word, followed by a space and a foreign language word. No foreign word appears more than once in the dictionary. The message is a sequence of words in the foreign language, one word on each line. Each word in the input is a sequence of at most 10 lowercase letters.</p>
<h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p>Output is the message translated to English, one word per line. Foreign words not in the dictionary should be translated as “eh”.</p>
<h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h3><p>dog ogday<br>cat atcay<br>pig igpay<br>froot ootfray<br>loops oopslay  </p>
<p>atcay<br>ittenkay<br>oopslay  </p>
<h3 id="Sample-Outputcat"><a href="#Sample-Outputcat" class="headerlink" title="Sample Outputcat"></a>Sample Outputcat</h3><p>eh<br>loops  </p>
<h3 id="Hint"><a href="#Hint" class="headerlink" title="Hint"></a>Hint</h3><p>Huge input and output,scanf and printf are recommended.</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>题目大意就是给两个单词，前面个单词是后面个单词的翻译，也就是说存在着一种由键到值的映射关系，以输入空行为标志结束录入的对应关系，之后输入单词输出对应翻译。所以此题可以用c++的map容器建立对应关系来解决。代码如下：<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> str1[<span class="number">35</span>] ;</span><br><span class="line">    <span class="keyword">char</span> key[<span class="number">35</span>] , value[<span class="number">35</span>] ;</span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="built_in">string</span> , <span class="built_in">string</span>&gt; map_ ;</span><br><span class="line">    <span class="keyword">while</span> ( gets(str1) )&#123;</span><br><span class="line">        <span class="keyword">if</span> ( <span class="built_in">strcmp</span>(str1 , <span class="string">"\0"</span>) == <span class="number">0</span> )&#123;</span><br><span class="line">            <span class="keyword">break</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">sscanf</span>(str1 , <span class="string">"%s %s"</span> , value , key) ;    <span class="comment">///从一个字符串中读进与指定格式相符的数据</span></span><br><span class="line"><span class="comment">//        map_[key] = value ;                     ///两种建立键值的关系均可；</span></span><br><span class="line">        map_.insert(make_pair(key , value)) ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( gets(str1) )&#123;</span><br><span class="line">        <span class="built_in">map</span>&lt;<span class="built_in">string</span> , <span class="built_in">string</span>&gt;::iterator it ;       <span class="comment">///迭代器</span></span><br><span class="line">        it = map_.find(str1) ;                    <span class="comment">///查找map_中是否有此键</span></span><br><span class="line">        <span class="keyword">if</span> ( it != map_.end() )&#123;                  <span class="comment">///如果查找到</span></span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; it-&gt;second &lt;&lt; <span class="built_in">endl</span> ;          <span class="comment">///输出键值</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"eh"</span> &lt;&lt; <span class="built_in">endl</span> ;                <span class="comment">///否则输出 eh</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Online Judge</category>
      </categories>
      <tags>
        <tag>map</tag>
        <tag>STL</tag>
        <tag>POJ</tag>
      </tags>
  </entry>
  <entry>
    <title>博客更新日志</title>
    <url>/2018/09/25/%E5%8D%9A%E5%AE%A2%E6%9B%B4%E6%96%B0%E6%97%A5%E5%BF%97/</url>
    <content><![CDATA[<p><strong>记录博客每一次的更新和日常..</strong></p>
<h1 id="2018年"><a href="#2018年" class="headerlink" title="2018年"></a>2018年</h1><h2 id="9月"><a href="#9月" class="headerlink" title="9月"></a>9月</h2><h3 id="22日"><a href="#22日" class="headerlink" title="22日"></a>22日</h3><ol>
<li>初始版本，创建博客  </li>
<li>新增文章《Game Start!》  </li>
<li>重要初始备份     <strong><strong>原始备份</strong></strong>  </li>
</ol>
<h3 id="23日"><a href="#23日" class="headerlink" title="23日"></a>23日</h3><ol>
<li>新增文章《STL容器用法详解及注解(持续更新)》  </li>
<li>添加侧边栏头像  </li>
<li>增加标签及分类目录  </li>
<li>增加阅读时长及字数统计  </li>
<li>增加阅读次数  </li>
</ol>
<h3 id="24日"><a href="#24日" class="headerlink" title="24日"></a>24日</h3><ol>
<li>修改文章《STL容器用法详解及注解(持续更新)》  </li>
<li>旋转头像  </li>
<li>增加代码复制功能  </li>
<li>增加文章《[快速幂]a^b》  </li>
<li>增加顶部加载条  </li>
</ol>
<h3 id="25日"><a href="#25日" class="headerlink" title="25日"></a>25日</h3><ol>
<li>增加记录《博客更新日志》</li>
</ol>
<h3 id="26日"><a href="#26日" class="headerlink" title="26日"></a>26日</h3><ol>
<li>增加版权声明</li>
<li>增加文章《POJ 2503 Babelfish》</li>
</ol>
<h3 id="27日"><a href="#27日" class="headerlink" title="27日"></a>27日</h3><ol>
<li>增加新文章《题单》</li>
<li>增加新文章《NyistOJ 55 懒省事的小明》</li>
</ol>
<h3 id="28日"><a href="#28日" class="headerlink" title="28日"></a>28日</h3><ol>
<li>更新版权声明样式</li>
<li>增加新文章《HrbustOJ 1022 JiaoZhu and SC》</li>
</ol>
<h3 id="29日"><a href="#29日" class="headerlink" title="29日"></a>29日</h3><ol>
<li>增加新文章《HrbustOJ 1987 逃课的孩子》</li>
</ol>
<h3 id="30日"><a href="#30日" class="headerlink" title="30日"></a>30日</h3><ol>
<li>增加新文章《HrbustOJ 1023 JiaoZhu and cs》</li>
</ol>
<h2 id="10月"><a href="#10月" class="headerlink" title="10月"></a>10月</h2><h3 id="1日"><a href="#1日" class="headerlink" title="1日"></a>1日</h3><ol>
<li>增加新文章《HrbustOJ 2063 萌萌哒十五酱的情书~》</li>
</ol>
<h3 id="2日"><a href="#2日" class="headerlink" title="2日"></a>2日</h3><ol>
<li>修改文章《STL容器用法详解及注解(持续更新)》</li>
<li>增加新文章《HrbustOJ 1109 店长终极推荐》</li>
</ol>
<h3 id="3日"><a href="#3日" class="headerlink" title="3日"></a>3日</h3><ol>
<li>增加新文章《51Nod 1117 聪明的木匠》</li>
</ol>
<h3 id="4日"><a href="#4日" class="headerlink" title="4日"></a>4日</h3><ol>
<li>codeforces 灰名纪念(雾..</li>
<li>增加新文章《51Nod 2133 排队接水》</li>
</ol>
<h3 id="5日"><a href="#5日" class="headerlink" title="5日"></a>5日</h3><ol>
<li>增加新文章《HrbustOJ 2301 行编辑器》</li>
</ol>
<h3 id="6日"><a href="#6日" class="headerlink" title="6日"></a>6日</h3><ol>
<li>cf持续掉分….(终有一天会成为负分dalao的！！</li>
<li>增加新文章《51Nod 1083 矩阵取数问题》</li>
</ol>
<h3 id="7日"><a href="#7日" class="headerlink" title="7日"></a>7日</h3><ol>
<li>增加新文章《51Nod 1080 两个数的平方和》</li>
</ol>
<h3 id="8日"><a href="#8日" class="headerlink" title="8日"></a>8日</h3><ol>
<li>增加新文章《51Nod 1384 全排列》</li>
</ol>
<h3 id="9日"><a href="#9日" class="headerlink" title="9日"></a>9日</h3><ol>
<li>增加新文章《洛谷 P1579 哥德巴赫猜想(升级版)》</li>
</ol>
<h3 id="10日"><a href="#10日" class="headerlink" title="10日"></a>10日</h3><ol>
<li>增加新文章《洛谷 P1177 [模版]快速排序》</li>
</ol>
<h3 id="11日"><a href="#11日" class="headerlink" title="11日"></a>11日</h3><ol>
<li>增加新文章《单链表的基本操作(创建,删除,插入,逆置)》</li>
</ol>
<h3 id="12日"><a href="#12日" class="headerlink" title="12日"></a>12日</h3><ol>
<li>增加新文章《洛谷 P1067 多项式输出》</li>
</ol>
<h3 id="13日"><a href="#13日" class="headerlink" title="13日"></a>13日</h3><ol>
<li>增加新文章《洛谷 P1464 Function》</li>
</ol>
<h3 id="14日"><a href="#14日" class="headerlink" title="14日"></a>14日</h3><ol>
<li>增加新文章《HDU P1425 sort》</li>
</ol>
<h3 id="15日"><a href="#15日" class="headerlink" title="15日"></a>15日</h3><ol>
<li>增加新文章《洛谷 P3880 [JLOI2008]提示问题》</li>
</ol>
<h3 id="16日"><a href="#16日" class="headerlink" title="16日"></a>16日</h3><ol>
<li>增加新文章《51Nod 1049 最大子段和》</li>
</ol>
<h3 id="17日"><a href="#17日" class="headerlink" title="17日"></a>17日</h3><ol>
<li>增加新文章《Codeforces Round #512 B.Vasya and Cornfield》</li>
</ol>
<h3 id="18日"><a href="#18日" class="headerlink" title="18日"></a>18日</h3><ol>
<li>增加新文章《51Nod 1174 区间中最大的数》</li>
</ol>
<h3 id="19日"><a href="#19日" class="headerlink" title="19日"></a>19日</h3><ol>
<li>增加新文章《HDU 3789 奥运排序问题》</li>
</ol>
<h3 id="20日"><a href="#20日" class="headerlink" title="20日"></a>20日</h3><ol>
<li>增加新文章《51Nod 1264 线段相交》</li>
</ol>
<h3 id="21日"><a href="#21日" class="headerlink" title="21日"></a>21日</h3><ol>
<li>增加新文章《Codeforces Round #517 A.Golden Plate》</li>
</ol>
<h3 id="22日-1"><a href="#22日-1" class="headerlink" title="22日"></a>22日</h3><ol>
<li>增加新文章《51Nod 1004 n^n的末位数字》</li>
</ol>
<h3 id="23日-1"><a href="#23日-1" class="headerlink" title="23日"></a>23日</h3><ol>
<li>增加新文章《CCF 201809-1 卖菜》</li>
</ol>
<h3 id="24日-1"><a href="#24日-1" class="headerlink" title="24日"></a>24日</h3><ol>
<li>增加新文章《POJ 1852 Ants》</li>
</ol>
<h3 id="25日-1"><a href="#25日-1" class="headerlink" title="25日"></a>25日</h3><ol>
<li>增加新文章《HDU 1035 Robot Motion》</li>
</ol>
<h3 id="26日-1"><a href="#26日-1" class="headerlink" title="26日"></a>26日</h3><ol>
<li>增加新文章《51Nod 1062 序列中最大的数》</li>
</ol>
<h3 id="27日-1"><a href="#27日-1" class="headerlink" title="27日"></a>27日</h3><ol>
<li>增加新文章《HihoCoder 1448 Split Array》</li>
</ol>
<h3 id="28日-1"><a href="#28日-1" class="headerlink" title="28日"></a>28日</h3><ol>
<li>增加新文章《HihoCoder 1408 The Lastest Time》</li>
</ol>
<h3 id="29日-1"><a href="#29日-1" class="headerlink" title="29日"></a>29日</h3><ol>
<li>增加新文章《HihoCoder 1409 Smallest Sub Array》</li>
</ol>
<h3 id="30日-1"><a href="#30日-1" class="headerlink" title="30日"></a>30日</h3><ol>
<li>增加新文章《POJ 2387 Til the Cows Come Home》</li>
</ol>
<h3 id="31日"><a href="#31日" class="headerlink" title="31日"></a>31日</h3><ol>
<li>增加新文章《POJ 1562 Oil Desposits》</li>
</ol>
<h2 id="11月"><a href="#11月" class="headerlink" title="11月"></a>11月</h2><h3 id="1日-1"><a href="#1日-1" class="headerlink" title="1日"></a>1日</h3><ol>
<li>增加新文章《POJ 2299 Ultra QuickSort》</li>
</ol>
<h3 id="2日-1"><a href="#2日-1" class="headerlink" title="2日"></a>2日</h3><ol>
<li>增加新文章《HrbustOJ 1644 水水更健康》</li>
</ol>
<h3 id="3日-1"><a href="#3日-1" class="headerlink" title="3日"></a>3日</h3><ol>
<li>增加新文章《CSU 2079 觉醒！MACROSS！》 (默默说一句 IG NB！)</li>
</ol>
<h3 id="4日-1"><a href="#4日-1" class="headerlink" title="4日"></a>4日</h3><ol>
<li>增加新文章《Hrbust 2093 真·找规律》</li>
</ol>
<h3 id="5日-1"><a href="#5日-1" class="headerlink" title="5日"></a>5日</h3><ol>
<li>增加新文章《HDU 1032 The 3n + 1 problem》</li>
</ol>
<h3 id="6日-1"><a href="#6日-1" class="headerlink" title="6日"></a>6日</h3><ol>
<li>增加新文章《HDU-6297-CCPC直播》</li>
</ol>
<h3 id="8日-1"><a href="#8日-1" class="headerlink" title="8日"></a>8日</h3><ol>
<li>增加新文章《HDU 6292 赛题分析》</li>
</ol>
<h3 id="9日-1"><a href="#9日-1" class="headerlink" title="9日"></a>9日</h3><ol>
<li>增加新文章《51Nod 1137 矩阵乘法》</li>
</ol>
<h3 id="10日-1"><a href="#10日-1" class="headerlink" title="10日"></a>10日</h3><ol>
<li>增加新文章《Codeforces Round #132(Div2) A.Bicycle Chain》 </li>
</ol>
<h3 id="11日-1"><a href="#11日-1" class="headerlink" title="11日"></a>11日</h3><ol>
<li>增加新文章《HDU 5533 Dancing Stars on Me》</li>
</ol>
<h3 id="12日-1"><a href="#12日-1" class="headerlink" title="12日"></a>12日</h3><ol>
<li>增加新文章《ZOJ 1760 Doubles》(最近真是有点懒…)</li>
</ol>
<h3 id="13日-1"><a href="#13日-1" class="headerlink" title="13日"></a>13日</h3><ol>
<li>增加新文章《HrbustOJ 1167 每种面值的货币要多少》</li>
</ol>
<h3 id="15日-1"><a href="#15日-1" class="headerlink" title="15日"></a>15日</h3><ol>
<li>增加新文章《摘录》</li>
</ol>
<h3 id="24日-2"><a href="#24日-2" class="headerlink" title="24日"></a>24日</h3><ol>
<li>增加新文章《HDU 1702 ACboy needs your help again!》</li>
</ol>
<h3 id="26日-2"><a href="#26日-2" class="headerlink" title="26日"></a>26日</h3><ol>
<li>增加新文章《51Nod 1113 矩阵快速幂》</li>
</ol>
<h3 id="29日-2"><a href="#29日-2" class="headerlink" title="29日"></a>29日</h3><ol>
<li>增加新文章《Codeforces Round 450 Div2 B.Jzzhu and Sequences》</li>
</ol>
<h3 id="30日-2"><a href="#30日-2" class="headerlink" title="30日"></a>30日</h3><ol>
<li>增加新文章《HDU 1575 Tr A》</li>
</ol>
<h1 id="2019年"><a href="#2019年" class="headerlink" title="2019年"></a>2019年</h1><h2 id="1月"><a href="#1月" class="headerlink" title="1月"></a>1月</h2><h3 id="20日-1"><a href="#20日-1" class="headerlink" title="20日"></a>20日</h3><ol>
<li>增加新文章《数据分析笔记》</li>
</ol>
<h2 id="3月"><a href="#3月" class="headerlink" title="3月"></a>3月</h2><h3 id="21日-1"><a href="#21日-1" class="headerlink" title="21日"></a>21日</h3><ol>
<li>增加新文章《BUG记录本》</li>
</ol>
<h3 id="27日-2"><a href="#27日-2" class="headerlink" title="27日"></a>27日</h3><ol>
<li>增加新文章《学生信息管理系统》</li>
</ol>
<h2 id="4月"><a href="#4月" class="headerlink" title="4月"></a>4月</h2><h3 id="9日-2"><a href="#9日-2" class="headerlink" title="9日"></a>9日</h3><ol>
<li>更新《摘录》</li>
</ol>
<h2 id="5月"><a href="#5月" class="headerlink" title="5月"></a>5月</h2><h3 id="5日-2"><a href="#5日-2" class="headerlink" title="5日"></a>5日</h3><ol>
<li>增加新文章《Python学习笔记》</li>
</ol>
<h3 id="7日-1"><a href="#7日-1" class="headerlink" title="7日"></a>7日</h3><ol>
<li>更新《Python学习笔记》</li>
</ol>
<h3 id="11日-2"><a href="#11日-2" class="headerlink" title="11日"></a>11日</h3><ol>
<li>新增《关于学习爬虫过程中的理解和注意事项》</li>
</ol>
<h1 id="2020年"><a href="#2020年" class="headerlink" title="2020年"></a>2020年</h1><h2 id="2月"><a href="#2月" class="headerlink" title="2月"></a>2月</h2><h3 id="2日-2"><a href="#2日-2" class="headerlink" title="2日"></a>2日</h3><ol>
<li>增加新文章《顺序表与链表》</li>
</ol>
]]></content>
      <categories>
        <category>Daily Record</category>
      </categories>
      <tags>
        <tag>Life</tag>
      </tags>
  </entry>
  <entry>
    <title>[快速幂]a^b</title>
    <url>/2018/09/24/%E5%BF%AB%E9%80%9F%E5%B9%82-a-b/</url>
    <content><![CDATA[<p>问题 A: 【快速幂】a^b<br>时间限制: 1 Sec  内存限制: 128 MB<br>提交: 703  解决: 159<br>[提交] [状态] [讨论版] [命题人:admin]<br>题目描述<br>求 a 的 b 次方对 p 取模的值，其中 1≤a,b,p≤109  </p>
<p>输入<br>三个用空格隔开的整数a,b和p。</p>
<p>输出<br>一个整数，表示ab mod p的值。</p>
<p>样例输入<br>2 3 9</p>
<p>样例输出<br>8</p>
<p>快速幂模板，代码如下：<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span> ;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">quick_pow</span><span class="params">( ll a , ll b , ll p )</span></span>&#123;</span><br><span class="line">    ll ans = <span class="number">1</span> % p , base = a ;</span><br><span class="line">    <span class="keyword">while</span> ( b )&#123;</span><br><span class="line">        <span class="keyword">if</span> ( b &amp; <span class="number">1</span> )&#123;</span><br><span class="line">            ans = (ans % p * base % p) % p ;</span><br><span class="line">        &#125;</span><br><span class="line">        base = base * base % p ;</span><br><span class="line">        b &gt;&gt;= <span class="number">1</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ll a , b , p ;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="built_in">scanf</span>(<span class="string">"%lld %lld %lld"</span> , &amp;a , &amp;b , &amp;p) != EOF )&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span> , quick_pow(a , b , p)) ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Online Judge</category>
      </categories>
      <tags>
        <tag>日常水题</tag>
        <tag>快速幂</tag>
        <tag>模板</tag>
      </tags>
  </entry>
  <entry>
    <title>STL容器用法详解及注解(持续更新)</title>
    <url>/2018/09/23/STL%E5%AE%B9%E5%99%A8%E7%94%A8%E6%B3%95%E8%AF%A6%E8%A7%A3%E5%8F%8A%E6%B3%A8%E9%87%8A/</url>
    <content><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>以下摘录自wiki</p>
<blockquote>
<p>STL又称标准模板库，是一个c++软件库，其中包含4个组件，分别为：</p>
</blockquote>
<blockquote>
<ul>
<li>算法  </li>
<li>容器  </li>
<li>函数  </li>
<li>迭代器  </li>
</ul>
</blockquote>
<blockquote>
<p>STL将“在数据上的操作”与“要执行操作的数据分开”，分别以如下概念指代：  </p>
</blockquote>
<blockquote>
<ul>
<li>容器：包含、放置数据的地方。</li>
<li>迭代器： 在容器中指出一个位置、或成对使用以划定一个区域，用来限定操作所涉及到的数据范围。</li>
<li>算法： 要执行的操作。</li>
</ul>
</blockquote>
<p>总而言之，STL在编程的方方面面都有着巨大的作用，接下来将介绍常用的STL以及用法。</p>
<h1 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h1><h2 id="Vector向量容器"><a href="#Vector向量容器" class="headerlink" title="Vector向量容器"></a>Vector向量容器</h2><p>Vector向量容器可在尾端插入或者删除元素，可动态调整所占用的内存空间，可以将其看作是以顺序结构实现的线性表。vector可以保存任意类型的变量，包括用户自定义的数据类型。</p>
<h3 id="包含头文件"><a href="#包含头文件" class="headerlink" title="包含头文件"></a>包含头文件</h3><p>#include &lt;vector></p>
<h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><p>vector&lt;T> vec ;</p>
<h3 id="增加或者删除元素"><a href="#增加或者删除元素" class="headerlink" title="增加或者删除元素"></a>增加或者删除元素</h3><ul>
<li>vec.push_back(elem) –增加元素到vector容器的尾端</li>
<li>vec.pop_back(elem) –删除尾端元素</li>
<li>vec.insert(it,elem) –在迭代器it指向的元素前插入某一元素</li>
<li>vec.insert(it,n,elem) –在迭代器it指向的元素前插入n个元素</li>
<li>vec.erase(it) –删除迭代器it指向的元素</li>
<li>vec.erase(begin_it,end_it) –删除区间 [begin_it,end_it) 的元素</li>
<li>vec.clear() –清空全部元素</li>
</ul>
<h3 id="访问元素"><a href="#访问元素" class="headerlink" title="访问元素"></a>访问元素</h3><ul>
<li>vec[i] –访问索引值为i的元素</li>
<li>vec.front() –返回vec第一个元素</li>
<li>vec.back() –返回vec最后一个元素</li>
</ul>
<h3 id="获取当前长度或者当前容量"><a href="#获取当前长度或者当前容量" class="headerlink" title="获取当前长度或者当前容量"></a>获取当前长度或者当前容量</h3><ul>
<li>vec.size() –返回vec当前的长度</li>
<li>vec.empty() –若为空返回true否则为false</li>
</ul>
<h3 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h3><ul>
<li>vector&lt;T>::iterator it –创建一个T数据类型的正向迭代器it</li>
<li>Vector&lt;T>::reverse_iterator it –创建一个T数据类型的反向迭代器it</li>
</ul>
<h3 id="使用举例"><a href="#使用举例" class="headerlink" title="使用举例"></a>使用举例</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//STL组件属于std名称空间，以下不再赘述</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span> ;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"enter the number of element:"</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">    <span class="keyword">int</span> num ;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; num ;</span><br><span class="line">    <span class="keyword">if</span> ( num == <span class="number">0</span> )&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"please enter again"</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; num ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建一个数据类型为 int 的 vector 容器 vec</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec ;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; num ; i ++ )&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"input: "</span> ;</span><br><span class="line">        <span class="keyword">int</span> number ;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; number ;</span><br><span class="line">        <span class="comment">//将元素添加至表尾</span></span><br><span class="line">        vec.push_back(number) ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建一个正向迭代器 it</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator it ;</span><br><span class="line">    <span class="comment">//创建一个反向迭代器 rit</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::reverse_iterator rit ;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="string">"output:"</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">    <span class="comment">//正向输出</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"in order: "</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">    <span class="keyword">for</span> ( it = vec.begin() ; it != vec.end() ; it ++ )&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="string">" "</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">    <span class="comment">//反向输出</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"reverse order: "</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">    <span class="keyword">for</span> ( rit = vec.rbegin() ; rit != vec.rend() ; rit ++ )&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; *rit &lt;&lt; <span class="string">" "</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//插入操作</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"insert:(position , element)"</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">    <span class="keyword">int</span> pos , element ;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; pos &gt;&gt; element ;</span><br><span class="line">    <span class="keyword">if</span> ( pos &lt; <span class="number">0</span> || pos &gt; vec.size() )&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"please enter position again"</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; pos ;</span><br><span class="line">    &#125;</span><br><span class="line">    vec.insert(vec.begin() + pos , element) ;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"there are *"</span> &lt;&lt; vec.size() &lt;&lt; <span class="string">"* numbers now"</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"output:"</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">    <span class="keyword">for</span> ( it = vec.begin() ; it != vec.end() ; it ++ )&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="string">" "</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除操作</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"erase:(begin , end)"</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">    <span class="keyword">int</span> first , last ;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; first &gt;&gt; last ;</span><br><span class="line">    <span class="keyword">if</span> ( first &lt; <span class="number">0</span> || last &gt; vec.size() )&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"please enter again"</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; first &gt;&gt; last ;</span><br><span class="line">    &#125;</span><br><span class="line">    vec.erase(vec.begin() + first , vec.begin() + last) ;</span><br><span class="line">    <span class="keyword">if</span> ( !vec.empty() )&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"there are *"</span> &lt;&lt; vec.size() &lt;&lt; <span class="string">"* numbers now"</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">        <span class="keyword">for</span> ( it = vec.begin() ; it != vec.end() ; it ++ )&#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="string">" "</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"the vector is empty now!"</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="堆栈和队列容器"><a href="#堆栈和队列容器" class="headerlink" title="堆栈和队列容器"></a>堆栈和队列容器</h2><p>栈只能允许在链表或者数组的一段进行插入或者删除操作，此端被称为栈顶，另一端则被称为栈底。在栈顶进行的插入操作称为入栈(push)，在栈顶进行的删除操作称为出栈(pop)。符合后进先出的原则(LIFO,Last In First Out)。</p>
<p>队列只允许在一端进行插入(push)，此操作称为入队，此端称为队尾，而另一端进行删除(pop)，此操作称为出队，此端称为队首。符合先进先出的原则(FIFO,First In First Out)。</p>
<h3 id="包含头文件-1"><a href="#包含头文件-1" class="headerlink" title="包含头文件"></a>包含头文件</h3><p>#include <stack> –STL栈<br>#include <queue> –STL队列</queue></stack></p>
<h3 id="创建-1"><a href="#创建-1" class="headerlink" title="创建"></a>创建</h3><p>stack<t> sta ;<br>queue<t> que ;</t></t></p>
<h3 id="插入或者删除元素"><a href="#插入或者删除元素" class="headerlink" title="插入或者删除元素"></a>插入或者删除元素</h3><ul>
<li>sta.push(elem) –往栈顶插入元素</li>
<li>sta.pop() –移除栈顶元素</li>
<li>que.push(elem) –往队尾插入元素</li>
<li>que.pop() –移除队首元素</li>
</ul>
<h3 id="访问元素-1"><a href="#访问元素-1" class="headerlink" title="访问元素"></a>访问元素</h3><ul>
<li>sta.top() –返回当前栈顶元素</li>
<li>que.front() –返回当前队首元素</li>
<li>que.back() –返回当前队尾元素</li>
<li>对于栈和队列元素的访问，除上述方式外，唯一方式是遍历容器内容，并且移除访问过的每一个元素。</li>
</ul>
<h3 id="获取当前容器的容量大小"><a href="#获取当前容器的容量大小" class="headerlink" title="获取当前容器的容量大小"></a>获取当前容器的容量大小</h3><ul>
<li>sta.size() –当前栈容器的容量大小</li>
<li>que.size() –当前队列容器的容量大小</li>
<li>sta.empty() –判断栈是否为空，若为空返回true</li>
<li>que.empty() –判断队列是否为空，若为空返回true</li>
</ul>
<h3 id="迭代器-1"><a href="#迭代器-1" class="headerlink" title="迭代器"></a>迭代器</h3><ul>
<li>并无迭代器..</li>
</ul>
<h3 id="使用举例-1"><a href="#使用举例-1" class="headerlink" title="使用举例"></a>使用举例</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span> ;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"enter the number of element:"</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">    <span class="keyword">int</span> num ;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; num ;</span><br><span class="line">    <span class="keyword">if</span> ( num == <span class="number">0</span> )&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"please enter again"</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; num ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建存储数据类型为 int 的栈和队列容器</span></span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; sta ;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; que ;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"enter elements of stack:"</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; num ; i ++ )&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"input: "</span> ;</span><br><span class="line">        <span class="keyword">int</span> number ;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; number ;</span><br><span class="line">        <span class="comment">//往栈顶添加元素</span></span><br><span class="line">        sta.push(number) ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"enter elements of queue:"</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; num ; i ++ )&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"input: "</span> ;</span><br><span class="line">        <span class="keyword">int</span> number ;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; number ;</span><br><span class="line">        <span class="comment">//往队尾添加元素</span></span><br><span class="line">        que.push(number) ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"the number of stack is "</span> &lt;&lt; sta.size() &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"the number of queue is "</span> &lt;&lt; que.size() &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//访问栈顶元素</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"the top of stack is "</span> &lt;&lt; sta.top() &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">    <span class="comment">//访问队首元素</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"the front of queue is "</span> &lt;&lt; que.front() &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">    <span class="comment">//访问队尾元素</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"the back of queue is "</span> &lt;&lt; que.back() &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//访问栈元素</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"the elements of stack is "</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">    <span class="keyword">while</span> ( !sta.empty() )&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; sta.top() &lt;&lt; <span class="string">" "</span> ;</span><br><span class="line">        sta.pop() ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">    <span class="comment">//访问队列元素</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"the elements of queue is "</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">    <span class="keyword">while</span> ( !que.empty() )&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; que.front() &lt;&lt; <span class="string">" "</span> ;</span><br><span class="line">        que.pop() ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="map容器"><a href="#map容器" class="headerlink" title="map容器"></a>map容器</h2><p>map容器中的元素通过比较键的关系使其有序。通过使用map容器可以建立一种由键到值的一一映照的对应关系，不允许有重复的键，但可以允许有重复的值，在某些题目中可以大大简化代码流程。  </p>
<h3 id="包含头文件-2"><a href="#包含头文件-2" class="headerlink" title="包含头文件"></a>包含头文件</h3><p>#include <map></map></p>
<h3 id="创建-2"><a href="#创建-2" class="headerlink" title="创建"></a>创建</h3><p>map<key ,="" t=""> map_ ;</key></p>
<h3 id="插入或者删除元素-1"><a href="#插入或者删除元素-1" class="headerlink" title="插入或者删除元素"></a>插入或者删除元素</h3><ul>
<li>map_[key] = value –插入一个 key 到 value 关系的元素。</li>
<li>map_.insert(make_pair(key , value)) –效果同上。</li>
<li>map_erase(key) –移除键和参数匹配的元素。</li>
</ul>
<h3 id="迭代器-2"><a href="#迭代器-2" class="headerlink" title="迭代器"></a>迭代器</h3><ul>
<li>map<key ,="" t="">::iterator it –创建一个map的正向迭代器</key></li>
</ul>
<h3 id="访问元素-2"><a href="#访问元素-2" class="headerlink" title="访问元素"></a>访问元素</h3><ul>
<li>map_[key] –返回key所对应的值</li>
<li>it-&gt;first –返回迭代器it所指向的map元素对应的键</li>
<li>it-&gt;second –返回迭代器it所指向的map元素对应的值</li>
<li>map_.begin() –返回一个指向第一个元素的迭代器指针</li>
<li>map_.end() –返回一个指向<strong>最后一个元素的后一个位置</strong>的指针</li>
</ul>
<h3 id="获取当前长度或者当前容量-1"><a href="#获取当前长度或者当前容量-1" class="headerlink" title="获取当前长度或者当前容量"></a>获取当前长度或者当前容量</h3><ul>
<li>map_.size() –获取当前元素个数</li>
<li>map_.empty() –若为空则返回true</li>
</ul>
<h3 id="使用举例-2"><a href="#使用举例-2" class="headerlink" title="使用举例"></a>使用举例</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span> ;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> name ;</span><br><span class="line">    <span class="keyword">int</span> grades ;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"enter student`s name and grades(enter \"0 0\" to end):"</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建由string到int的映照关系 map_</span></span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="built_in">string</span> , <span class="keyword">int</span>&gt; map_ ;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> ( name[<span class="number">0</span>] != <span class="string">'0'</span> &amp;&amp; grades != <span class="number">0</span> )&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; name &gt;&gt; grades ;</span><br><span class="line">        <span class="keyword">if</span> ( name[<span class="number">0</span>] != <span class="string">'0'</span> &amp;&amp; grades != <span class="number">0</span> )</span><br><span class="line">            map_[name] = grades ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"there are "</span> &lt;&lt; map_.size() &lt;&lt; <span class="string">" students now"</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"which student do you want to query?enter the name:"</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line"></span><br><span class="line">     <span class="comment">//创建map的正向迭代器it</span></span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="built_in">string</span> , <span class="keyword">int</span>&gt;::iterator it ;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="built_in">cin</span> &gt;&gt; name )&#123;</span><br><span class="line">        <span class="keyword">for</span> ( it = map_.begin() ; it != map_.end() ; it ++ )&#123;</span><br><span class="line">            <span class="keyword">if</span> ( it-&gt;first == name )&#123;</span><br><span class="line">                <span class="keyword">break</span> ;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ( it == map_.end() )&#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"please enter the name again!"</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">break</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//由键访问值</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"the "</span> &lt;&lt; name &lt;&lt; <span class="string">"`s grades is "</span> &lt;&lt; map_[name] &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"there is list:"</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> ( it = map_.begin() ; it != map_.end() ; it ++ )&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; it-&gt;first &lt;&lt; <span class="string">" "</span> &lt;&lt; it-&gt;second &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"which student do you want to remove?enter the name:"</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//移除和键匹配的此元素</span></span><br><span class="line">    <span class="keyword">while</span> ( <span class="built_in">cin</span> &gt;&gt; name )&#123;</span><br><span class="line">        <span class="keyword">for</span> ( it = map_.begin() ; it != map_.end() ; it ++ )&#123;</span><br><span class="line">            <span class="keyword">if</span> ( it-&gt;first == name )&#123;</span><br><span class="line">                <span class="keyword">break</span> ;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ( it == map_.end() )&#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"please enter the name again!"</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">break</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    map_.erase(name) ;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ( !map_.empty() )&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"there is list:"</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">        <span class="keyword">for</span> ( it = map_.begin() ; it != map_.end() ; it ++ )&#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; it-&gt;first &lt;&lt; <span class="string">" "</span> &lt;&lt; it-&gt;second &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"there are "</span> &lt;&lt; map_.size() &lt;&lt; <span class="string">" students now"</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"no students now!"</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><p><a href="http://cantredo.com/2018/09/26/POJ-2503-Babelfish/" target="_blank" rel="noopener">POJ 2503 Babelfish</a><br><a href="http://cantredo.com/2018/09/29/HrbustOJ-1987-%E9%80%83%E8%AF%BE%E7%9A%84%E5%AD%A9%E5%AD%90/" target="_blank" rel="noopener">HrbustOJ 1987 逃课的孩子</a><br><a href="http://cantredo.com/2018/09/28/HrbustOJ-1022-JiaoZhu-and-SC/" target="_blank" rel="noopener">HrbustOJ 1022 JiaoZhu and SC</a>  </p>
<h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p>本篇文章进行过程中参考了大量资料，对wiki贡献者以及各博主对天性愚钝的我给予知识上的补充表示深深的感谢。</p>
]]></content>
      <categories>
        <category>STL</category>
      </categories>
      <tags>
        <tag>STL</tag>
      </tags>
  </entry>
  <entry>
    <title>Game Start!</title>
    <url>/2018/09/22/Game-Start/</url>
    <content><![CDATA[<p>历经七个多小时，终于利用Hexo以及GitHub搭建好了本博客，同时对各开源贡献者以及搭建博客的教程感激不尽。——用以纪念的第一篇博客</p>
]]></content>
      <categories>
        <category>Daily Record</category>
      </categories>
      <tags>
        <tag>Life</tag>
      </tags>
  </entry>
</search>
